["```py\n# Load libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data with only two classes\niris = datasets.load_iris()\nfeatures = iris.data[:100,:]\ntarget = iris.target[:100]\n\n# Standardize features\nscaler = StandardScaler()\nfeatures_standardized = scaler.fit_transform(features)\n\n# Create logistic regression object\nlogistic_regression = LogisticRegression(random_state=0)\n\n# Train model\nmodel = logistic_regression.fit(features_standardized, target)\n```", "```py\n# Create new observation\nnew_observation = [[.5, .5, .5, .5]]\n\n# Predict class\nmodel.predict(new_observation)\n```", "```py\narray([1])\n```", "```py\n# View predicted probabilities\nmodel.predict_proba(new_observation)\n```", "```py\narray([[0.17738424, 0.82261576]])\n```", "```py\n# Load libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\niris = datasets.load_iris()\nfeatures = iris.data\ntarget = iris.target\n\n# Standardize features\nscaler = StandardScaler()\nfeatures_standardized = scaler.fit_transform(features)\n\n# Create one-vs-rest logistic regression object\nlogistic_regression = LogisticRegression(random_state=0, multi_class=\"ovr\")\n\n# Train model\nmodel = logistic_regression.fit(features_standardized, target)\n```", "```py\n# Load libraries\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn import datasets\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\niris = datasets.load_iris()\nfeatures = iris.data\ntarget = iris.target\n\n# Standardize features\nscaler = StandardScaler()\nfeatures_standardized = scaler.fit_transform(features)\n\n# Create decision tree regression object\nlogistic_regression = LogisticRegressionCV(\n    penalty='l2', Cs=10, random_state=0, n_jobs=-1)\n\n# Train model\nmodel = logistic_regression.fit(features_standardized, target)\n```", "```py\n# Load libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\niris = datasets.load_iris()\nfeatures = iris.data\ntarget = iris.target\n\n# Standardize features\nscaler = StandardScaler()\nfeatures_standardized = scaler.fit_transform(features)\n\n# Create logistic regression object\nlogistic_regression = LogisticRegression(random_state=0, solver=\"sag\")\n\n# Train model\nmodel = logistic_regression.fit(features_standardized, target)\n```", "```py\n# Load libraries\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\niris = datasets.load_iris()\nfeatures = iris.data\ntarget = iris.target\n\n# Make class highly imbalanced by removing first 40 observations\nfeatures = features[40:,:]\ntarget = target[40:]\n\n# Create target vector indicating if class 0, otherwise 1\ntarget = np.where((target == 0), 0, 1)\n\n# Standardize features\nscaler = StandardScaler()\nfeatures_standardized = scaler.fit_transform(features)\n\n# Create decision tree regression object\nlogistic_regression = LogisticRegression(random_state=0, class_weight=\"balanced\")\n\n# Train model\nmodel = logistic_regression.fit(features_standardized, target)\n```"]