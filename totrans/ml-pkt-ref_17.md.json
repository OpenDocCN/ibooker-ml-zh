["```py\n>>> ti_df = tweak_titanic(orig_df)\n>>> std_cols = \"pclass,age,sibsp,fare\".split(\",\")\n>>> X_train, X_test, y_train, y_test = get_train_test_X_y(\n...     ti_df, \"survived\", std_cols=std_cols\n... )\n>>> X = pd.concat([X_train, X_test])\n>>> y = pd.concat([y_train, y_test])\n```", "```py\n>>> from sklearn.decomposition import PCA\n>>> from sklearn.preprocessing import (\n...     StandardScaler,\n... )\n>>> pca = PCA(random_state=42)\n>>> X_pca = pca.fit_transform(\n...     StandardScaler().fit_transform(X)\n... )\n>>> pca.explained_variance_ratio_\narray([0.23917891, 0.21623078, 0.19265028,\n 0.10460882, 0.08170342, 0.07229959,\n 0.05133752, 0.04199068])\n\n>>> pca.components_[0]\narrayarray([-0.63368693,  0.39682566,\n 0.00614498,  0.11488415,  0.58075352,\n -0.19046812, -0.21190808, -0.09631388])\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> ax.plot(pca.explained_variance_ratio_)\n>>> ax.set(\n...     xlabel=\"Component\",\n...     ylabel=\"Percent of Explained variance\",\n...     title=\"Scree Plot\",\n...     ylim=(0, 1),\n... )\n>>> fig.savefig(\n...     \"images/mlpr_1701.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> ax.plot(\n...     np.cumsum(pca.explained_variance_ratio_)\n... )\n>>> ax.set(\n...     xlabel=\"Component\",\n...     ylabel=\"Percent of Explained variance\",\n...     title=\"Cumulative Variance\",\n...     ylim=(0, 1),\n... )\n>>> fig.savefig(\"images/mlpr_1702.png\", dpi=300)\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> plt.imshow(\n...     pca.components_.T,\n...     cmap=\"Spectral\",\n...     vmin=-1,\n...     vmax=1,\n... )\n>>> plt.yticks(range(len(X.columns)), X.columns)\n>>> plt.xticks(range(8), range(1, 9))\n>>> plt.xlabel(\"Principal Component\")\n>>> plt.ylabel(\"Contribution\")\n>>> plt.title(\n...     \"Contribution of Features to Components\"\n... )\n>>> plt.colorbar()\n>>> fig.savefig(\"images/mlpr_1703.png\", dpi=300)\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(8, 4))\n>>> pd.DataFrame(\n...     pca.components_, columns=X.columns\n... ).plot(kind=\"bar\", ax=ax).legend(\n...     bbox_to_anchor=(1, 1)\n... )\n>>> fig.savefig(\"images/mlpr_1704.png\", dpi=300)\n```", "```py\n>>> comps = pd.DataFrame(\n...     pca.components_, columns=X.columns\n... )\n>>> min_val = 0.5\n>>> num_components = 2\n>>> pca_cols = set()\n>>> for i in range(num_components):\n...     parts = comps.iloc[i][\n...         comps.iloc[i].abs() > min_val\n...     ]\n...     pca_cols.update(set(parts.index))\n>>> pca_cols\n{'fare', 'parch', 'pclass', 'sibsp'}\n```", "```py\n>>> from yellowbrick.features.pca import (\n...     PCADecomposition,\n... )\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> colors = [\"rg\"[j] for j in y]\n>>> pca_viz = PCADecomposition(color=colors)\n>>> pca_viz.fit_transform(X, y)\n>>> pca_viz.poof()\n>>> fig.savefig(\"images/mlpr_1705.png\", dpi=300)\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> pca_df = pd.DataFrame(\n...     X_pca,\n...     columns=[\n...         f\"PC{i+1}\"\n...         for i in range(X_pca.shape[1])\n...     ],\n... )\n>>> pca_df[\"status\"] = [\n...     (\"deceased\", \"survived\")[i] for i in y\n... ]\n>>> evr = pca.explained_variance_ratio_\n>>> ax.set_aspect(evr[1] / evr[0])\n>>> sns.scatterplot(\n...     x=\"PC1\",\n...     y=\"PC2\",\n...     hue=\"status\",\n...     data=pca_df,\n...     alpha=0.5,\n...     ax=ax,\n... )\n>>> fig.savefig(\n...     \"images/mlpr_1706.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> pca_df = pd.DataFrame(\n...     X_pca,\n...     columns=[\n...         f\"PC{i+1}\"\n...         for i in range(X_pca.shape[1])\n...     ],\n... )\n>>> pca_df[\"status\"] = [\n...     (\"deceased\", \"survived\")[i] for i in y\n... ]\n>>> evr = pca.explained_variance_ratio_\n>>> x_idx = 0  # x_pc\n>>> y_idx = 1  # y_pc\n>>> ax.set_aspect(evr[y_idx] / evr[x_idx])\n>>> x_col = pca_df.columns[x_idx]\n>>> y_col = pca_df.columns[y_idx]\n>>> sns.scatterplot(\n...     x=x_col,\n...     y=y_col,\n...     hue=\"status\",\n...     data=pca_df,\n...     alpha=0.5,\n...     ax=ax,\n... )\n>>> scale = 8\n>>> comps = pd.DataFrame(\n...     pca.components_, columns=X.columns\n... )\n>>> for idx, s in comps.T.iterrows():\n...     plt.arrow(\n...         0,\n...         0,\n...         s[x_idx] * scale,\n...         s[y_idx] * scale,\n...         color=\"k\",\n...     )\n...     plt.text(\n...         s[x_idx] * scale,\n...         s[y_idx] * scale,\n...         idx,\n...         weight=\"bold\",\n...     )\n>>> fig.savefig(\n...     \"images/mlpr_1707.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> pca_df = pd.DataFrame(\n...     X_pca,\n...     columns=[\n...         f\"PC{i+1}\"\n...         for i in range(X_pca.shape[1])\n...     ],\n... )\n>>> pca_df[\"status\"] = [\n...     (\"deceased\", \"survived\")[i] for i in y\n... ]\n>>> evr = pca.explained_variance_ratio_\n>>> ax.set_aspect(evr[3] / evr[0])\n>>> sns.scatterplot(\n...     x=\"PC1\",\n...     y=\"PC4\",\n...     hue=\"status\",\n...     data=pca_df,\n...     alpha=0.5,\n...     ax=ax,\n... )\n>>> fig.savefig(\n...     \"images/mlpr_1708.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> from bokeh.io import output_notebook\n>>> from bokeh import models, palettes, transform\n>>> from bokeh.plotting import figure, show\n>>>\n>>> def bokeh_scatter(\n...     x,\n...     y,\n...     data,\n...     hue=None,\n...     label_cols=None,\n...     size=None,\n...     legend=None,\n...     alpha=0.5,\n... ):\n...     \"\"\"\n...     x - x column name to plot\n...     y - y column name to plot\n...     data - pandas DataFrame\n...     hue - column name to color by (numeric)\n...     legend - column name to label by\n...     label_cols - columns to use in tooltip\n...                  (None all in DataFrame)\n...     size - size of points in screen space unigs\n...     alpha - transparency\n...     \"\"\"\n...     output_notebook()\n...     circle_kwargs = {}\n...     if legend:\n...         circle_kwargs[\"legend\"] = legend\n...     if size:\n...         circle_kwargs[\"size\"] = size\n...     if hue:\n...         color_seq = data[hue]\n...         mapper = models.LinearColorMapper(\n...             palette=palettes.viridis(256),\n...             low=min(color_seq),\n...             high=max(color_seq),\n...         )\n...         circle_kwargs[\n...             \"fill_color\"\n...         ] = transform.transform(hue, mapper)\n...     ds = models.ColumnDataSource(data)\n...     if label_cols is None:\n...         label_cols = data.columns\n...     tool_tips = sorted(\n...         [\n...             (x, \"@{}\".format(x))\n...             for x in label_cols\n...         ],\n...         key=lambda tup: tup[0],\n...     )\n...     hover = models.HoverTool(\n...         tooltips=tool_tips\n...     )\n...     fig = figure(\n...         tools=[\n...             hover,\n...             \"pan\",\n...             \"zoom_in\",\n...             \"zoom_out\",\n...             \"reset\",\n...         ],\n...         toolbar_location=\"below\",\n...     )\n...\n...     fig.circle(\n...         x,\n...         y,\n...         source=ds,\n...         alpha=alpha,\n...         **circle_kwargs\n...     )\n...     show(fig)\n...     return fig\n>>> res = bokeh_scatter(\n...     \"PC1\",\n...     \"PC2\",\n...     data=pca_df.assign(\n...         surv=y.reset_index(drop=True)\n...     ),\n...     hue=\"surv\",\n...     size=10,\n...     legend=\"surv\",\n... )\n```", "```py\n>>> from yellowbrick.features.pca import (\n...     PCADecomposition,\n... )\n>>> colors = [\"rg\"[j] for j in y]\n>>> pca3_viz = PCADecomposition(\n...     proj_dim=3, color=colors\n... )\n>>> pca3_viz.fit_transform(X, y)\n>>> pca3_viz.finalize()\n>>> fig = plt.gcf()\n>>> plt.tight_layout()\n>>> fig.savefig(\n...     \"images/mlpr_1710.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> import scprep\n>>> scprep.plot.rotate_scatter3d(\n...     X_pca[:, :3],\n...     c=y,\n...     cmap=\"Spectral\",\n...     figsize=(8, 6),\n...     label_prefix=\"Principal Component\",\n... )\n```", "```py\n>>> from mpl_toolkits.mplot3d import Axes3D\n>>> fig = plt.figure(figsize=(6, 4))\n>>> ax = fig.add_subplot(111, projection=\"3d\")\n>>> ax.scatter(\n...     xs=X_pca[:, 0],\n...     ys=X_pca[:, 1],\n...     zs=X_pca[:, 2],\n...     c=y,\n...     cmap=\"viridis\",\n... )\n>>> ax.set_xlabel(\"PC 1\")\n>>> ax.set_ylabel(\"PC 2\")\n>>> ax.set_zlabel(\"PC 3\")\n```", "```py\n% matplotlib inline\n```", "```py\n% matplotlib notebook\n```", "```py\n>>> import umap\n>>> u = umap.UMAP(random_state=42)\n>>> X_umap = u.fit_transform(\n...     StandardScaler().fit_transform(X)\n... )\n>>> X_umap.shape\n(1309, 2)\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(8, 4))\n>>> pd.DataFrame(X_umap).plot(\n...     kind=\"scatter\",\n...     x=0,\n...     y=1,\n...     ax=ax,\n...     c=y,\n...     alpha=0.2,\n...     cmap=\"Spectral\",\n... )\n>>> fig.savefig(\"images/mlpr_1713.png\", dpi=300)\n```", "```py\n>>> X_std = StandardScaler().fit_transform(X)\n>>> fig, axes = plt.subplots(2, 2, figsize=(6, 4))\n>>> axes = axes.reshape(4)\n>>> for i, n in enumerate([2, 5, 10, 50]):\n...     ax = axes[i]\n...     u = umap.UMAP(\n...         random_state=42, n_neighbors=n\n...     )\n...     X_umap = u.fit_transform(X_std)\n...\n...     pd.DataFrame(X_umap).plot(\n...         kind=\"scatter\",\n...         x=0,\n...         y=1,\n...         ax=ax,\n...         c=y,\n...         cmap=\"Spectral\",\n...         alpha=0.5,\n...     )\n...     ax.set_title(f\"nn={n}\")\n>>> plt.tight_layout()\n>>> fig.savefig(\"images/mlpr_1714.png\", dpi=300)\n```", "```py\n>>> fig, axes = plt.subplots(2, 2, figsize=(6, 4))\n>>> axes = axes.reshape(4)\n>>> for i, n in enumerate([0, 0.33, 0.66, 0.99]):\n...     ax = axes[i]\n...     u = umap.UMAP(random_state=42, min_dist=n)\n...     X_umap = u.fit_transform(X_std)\n...     pd.DataFrame(X_umap).plot(\n...         kind=\"scatter\",\n...         x=0,\n...         y=1,\n...         ax=ax,\n...         c=y,\n...         cmap=\"Spectral\",\n...         alpha=0.5,\n...     )\n...     ax.set_title(f\"min_dist={n}\")\n>>> plt.tight_layout()\n>>> fig.savefig(\"images/mlpr_1715.png\", dpi=300)\n```", "```py\n>>> from sklearn.manifold import TSNE\n>>> X_std = StandardScaler().fit_transform(X)\n>>> ts = TSNE()\n>>> X_tsne = ts.fit_transform(X_std)\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> colors = [\"rg\"[j] for j in y]\n>>> scat = ax.scatter(\n...     X_tsne[:, 0],\n...     X_tsne[:, 1],\n...     c=colors,\n...     alpha=0.5,\n... )\n>>> ax.set_xlabel(\"Embedding 1\")\n>>> ax.set_ylabel(\"Embedding 2\")\n>>> fig.savefig(\"images/mlpr_1716.png\", dpi=300)\n```", "```py\n>>> fig, axes = plt.subplots(2, 2, figsize=(6, 4))\n>>> axes = axes.reshape(4)\n>>> for i, n in enumerate((2, 30, 50, 100)):\n...     ax = axes[i]\n...     t = TSNE(random_state=42, perplexity=n)\n...     X_tsne = t.fit_transform(X)\n...     pd.DataFrame(X_tsne).plot(\n...         kind=\"scatter\",\n...         x=0,\n...         y=1,\n...         ax=ax,\n...         c=y,\n...         cmap=\"Spectral\",\n...         alpha=0.5,\n...     )\n...     ax.set_title(f\"perplexity={n}\")\n... plt.tight_layout()\n... fig.savefig(\"images/mlpr_1717.png\", dpi=300)\n```", "```py\n>>> import phate\n>>> p = phate.PHATE(random_state=42)\n>>> X_phate = p.fit_transform(X)\n>>> X_phate.shape\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> phate.plot.scatter2d(p, c=y, ax=ax, alpha=0.5)\n>>> fig.savefig(\"images/mlpr_1718.png\", dpi=300)\n```", "```py\n>>> fig, axes = plt.subplots(2, 2, figsize=(6, 4))\n>>> axes = axes.reshape(4)\n>>> p = phate.PHATE(random_state=42, n_jobs=-1)\n\n>>> for i, n in enumerate((2, 5, 20, 100)):\n...     ax = axes[i]\n...     p.set_params(knn=n)\n...     X_phate = p.fit_transform(X)\n...     pd.DataFrame(X_phate).plot(\n...         kind=\"scatter\",\n...         x=0,\n...         y=1,\n...         ax=ax,\n...         c=y,\n...         cmap=\"Spectral\",\n...         alpha=0.5,\n...     )\n...     ax.set_title(f\"knn={n}\")\n... plt.tight_layout()\n... fig.savefig(\"images/mlpr_1719.png\", dpi=300)\n```"]