- en: Chapter 4\. Missing Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章\. 缺失数据
- en: 'We need to deal with missing data. The previous chapter showed an example.
    This chapter will dive into it a bit more. Most algorithms will not work if data
    is missing. Notable exceptions are the recent boosting libraries: XGBoost, CatBoost,
    and LightGBM.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要处理缺失数据。前一章节展示了一个例子。本章将更深入地探讨。如果数据缺失，大多数算法将无法工作。值得注意的例外是最近的增强库：XGBoost、CatBoost
    和 LightGBM。
- en: As with many things in machine learning, there are no hard answers for how to
    treat missing data. Also, missing data could represent different situations. Imagine
    census data coming back and an age feature being reported as missing. Is it because
    the sample didn’t want to reveal their age? They didn’t know their age? The one
    asking the questions forgot to even ask about age? Is there a pattern to missing
    ages? Does it correlate to another feature? Is it completely random?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 和许多机器学习中的其他事物一样，如何处理缺失数据没有硬性答案。此外，缺失数据可能代表不同的情况。想象一下，人口普查数据返回，一个年龄特征被报告为缺失。这是因为样本不愿透露他们的年龄？他们不知道他们的年龄？问问题的人甚至忘记询问年龄？缺失的年龄是否有模式？它是否与另一个特征相关？它是否完全是随机的？
- en: 'There are also various ways to handle missing data:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缺失数据的方法有多种：
- en: Remove any row with missing data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除任何带有缺失数据的行。
- en: Remove any column with missing data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除任何带有缺失数据的列。
- en: Impute missing values
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填补缺失值
- en: Create an indicator column to signify data was missing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个指示列来表示数据缺失
- en: Examining Missing Data
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查缺失数据
- en: 'Let’s go back to the Titanic data. Because Python treats `True` and `False`
    as `1` and `0`, respectively, we can use this trick in pandas to get percent of
    missing data:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到泰坦尼克号的数据。因为 Python 将 `True` 和 `False` 分别视为 `1` 和 `0`，我们可以在 pandas 中利用这一技巧来获取缺失数据的百分比：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To visualize patterns in the missing data, use the [missingno library](https://oreil.ly/rgYJG).
    This library is useful for viewing contiguous areas of missing data, which would
    indicate that the missing data is not random (see [Figure 4-1](#id2)). The `matrix`
    function includes a sparkline along the right side. Patterns here would also indicate
    nonrandom missing data. You may need to limit the number of samples to be able
    to see the patterns:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化缺失数据的模式，可以使用 [missingno 库](https://oreil.ly/rgYJG)。该库对于查看连续的缺失数据区域非常有用，这表明缺失数据不是随机的（见
    [图 4-1](#id2)）。`matrix` 函数在右侧包括一个火花线。这里的模式也表明非随机的缺失数据。您可能需要限制样本数量以便看到这些模式：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Where data is missing. No clear patterns jump out to the author.](assets/mlpr_0401.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![数据缺失的位置。作者看不出明显的模式。](assets/mlpr_0401.png)'
- en: Figure 4-1\. Where data is missing. No clear patterns jump out to the author.
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 数据缺失的位置。作者看不出明显的模式。
- en: 'We can create a bar plot of missing data counts using pandas (see [Figure 4-2](#id3)):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 pandas 创建一个缺失数据计数的条形图（见 [图 4-2](#id3)）：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Percents of nonmissing data with pandas. Boat and body are leaky so we should
    ignore those. Interesting that some ages are missing.](assets/mlpr_0402.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![使用 pandas 的非缺失数据百分比。船和身体有漏洞，所以我们应该忽略它们。有些年龄缺失很有趣。](assets/mlpr_0402.png)'
- en: Figure 4-2\. Percents of nonmissing data with pandas. Boat and body are leaky
    so we should ignore those. Interesting that some ages are missing.
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 使用 pandas 的非缺失数据百分比。船和身体有漏洞，所以我们应该忽略它们。有些年龄缺失很有趣。
- en: 'Or use the missingno library to create the same plot (see [Figure 4-3](#id4)):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 missingno 库创建相同的图（见 [图 4-3](#id4)）：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Percents of nonmissing data with missingno.](assets/mlpr_0403.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![使用 missingno 的非缺失数据百分比。](assets/mlpr_0403.png)'
- en: Figure 4-3\. Percents of nonmissing data with missingno.
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-3\. 使用 missingno 的非缺失数据百分比。
- en: 'We can create a heat map showing if there are correlations where data is missing
    (see [Figure 4-4](#id5)). In this case, it doesn’t look like the locations where
    data are missing are correlated:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个热力图，显示数据缺失的相关性（见 [图 4-4](#id5)）。在这种情况下，看起来数据缺失的位置并没有相关性：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Correlations of missing data with missingno.](assets/mlpr_0404.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![缺失数据与 missingno 的相关性。](assets/mlpr_0404.png)'
- en: Figure 4-4\. Correlations of missing data with missingno.
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-4\. 缺失数据与 missingno 的相关性。
- en: 'We can create a dendrogram showing the clusterings of where data is missing
    (see [Figure 4-5](#id6)). Leaves that are at the same level predict one another’s
    presence (empty or filled). The vertical arms are used to indicate how different
    clusters are. Short arms mean that branches are similar:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个树状图，显示数据缺失的聚类情况（见 [图 4-5](#id6)）。处于同一水平的叶子预测彼此的存在（空或填充）。垂直臂用于指示不同聚类的差异程度。短臂意味着分支相似：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Dendrogram of missing data with missingno. We can see the columns without
    missing data on the upper right.](assets/mlpr_0405.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![缺失数据的树状图与 missingno。我们可以看到右上角没有缺失数据的列。](assets/mlpr_0405.png)'
- en: Figure 4-5\. Dendrogram of missing data with missingno. We can see the columns
    without missing data on the upper right.
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-5\. 缺失数据的树状图与 missingno。我们可以看到右上角没有缺失数据的列。
- en: Dropping Missing Data
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除缺失数据
- en: 'The pandas library can drop all rows with missing data with the `.dropna` method:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 库可以使用`.dropna`方法删除所有带有缺失数据的行：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To drop columns, we can note what columns are missing and use the `.drop` method.
    We can pass in a list of column names or a single column name:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除列，我们可以注意哪些列缺失，并使用`.drop`方法。可以传入一个列名列表或单个列名：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Alternatively, we can use the `.dropna` method and set `axis=1` (drop along
    the column axis):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用`.dropna`方法，并设置`axis=1`（沿着列轴删除）：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Be careful about dropping data. I typically view this as a last resort option.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 谨慎处理删除数据。我通常把这看作是最后的选择。
- en: Imputing Data
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填补数据
- en: Once you have a tool for predicting data, you can use that to predict missing
    data. The general task of defining values for missing values is called *imputation*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有一个预测数据的工具，你可以用它来预测缺失数据。定义缺失值的值的一般任务称为*填充*。
- en: If you are imputing data, you will need to build up a pipeline and use the same
    imputation logic during model creation and prediction time. The `SimpleImputer`
    class in scikit-learn will handle mean, median, and most frequent feature values.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在填补数据，你需要建立一个流水线，并且在模型创建和预测时使用相同的填补逻辑。scikit-learn 中的 `SimpleImputer` 类将处理平均值、中位数和最常见的特征值。
- en: 'The default behavior is to calculate the mean:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为是计算平均值：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Provide `strategy='median'` or `strategy='most_frequent'` to change the replaced
    value to median or most common, respectively. If you wish to fill with a constant
    value, say `-1`, use `strategy``='constant'` in combination with `fill_value=-1`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 提供`strategy='median'`或`strategy='most_frequent'`以将替换值更改为中位数或最常见值。如果你希望用常数值填充，比如`-1`，可以使用`strategy='constant'`与`fill_value=-1`结合使用。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can use the `.fillna` method in pandas to impute missing values as well.
    Make sure that you do not leak data though. If you are filling in with the mean
    value, make sure you use the same mean value during model creation and model prediction
    time.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，你可以使用`.fillna`方法来填补缺失值。确保不要泄漏数据。如果你使用平均值进行填充，请确保在模型创建和预测时使用相同的平均值。
- en: The most frequent and constant strategies may be used with numeric or string
    data. The mean and median require numeric data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最频繁和常量策略可以用于数字或字符串数据。平均值和中位数需要数字数据。
- en: The fancyimpute library implements many algorithms and follows the scikit-learn
    interface. Sadly, most of the algorithms are *transductive*, meaning that you
    can’t call the `.transform` method by itself after fitting the algorithm. The
    `IterativeImputer` is *inductive* (has since been migrated from fancyimpute to
    scikit-learn) and supports transforming after fitting.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: fancyimpute 库实现了许多算法并遵循 scikit-learn 接口。遗憾的是，大多数算法是*传导的*，这意味着你不能在拟合算法后单独调用`.transform`方法。`IterativeImputer`
    是*归纳的*（已从 fancyimpute 迁移到 scikit-learn）并支持在拟合后进行转换。
- en: Adding Indicator Columns
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加指示列
- en: 'The lack of data in and of itself may provide some signal to a model. The pandas
    library can add a new column to indicate that a value was missing:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数据本身的缺失可能为模型提供一些信号。pandas 库可以添加一个新列来指示缺失值：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
