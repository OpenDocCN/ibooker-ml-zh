["```py\nimport pandas as pd\n\ndef filter_dataframe(df: pd.DataFrame, filter_dict: dict):\n    \"\"\"\n Filter a dataframe to exclude rows where columns have certain values.\n\n Args:\n df (pd.DataFrame): Input dataframe.\n filter_dict (dict): Dictionary where keys are column names\n and values are the values to exclude.\n\n Returns:\n pd.DataFrame: Filtered dataframe.\n \"\"\"\n    for col, val in filter_dict.items():\n        df = df.loc[df[col] != val]\n    return df\n\nfilter_dict = {'column1': 'value1', 'column2': 'value2', 'column3': 'value3'}\n\ndf = df.pipe(filter_dataframe, filter_dict)\n```", "```py\nimport jax\nimport jax.numpy as jnp\n\ndef filter_jax_array(arr: jnp.array, col_indices: list, values: list):\n    \"\"\"\n Filter a jax array to exclude rows where certain columns have certain values.\n\n Args:\n arr (jnp.array): Input array.\n col_indices (list): List of column indices to filter on.\n values (list): List of corresponding values to exclude.\n\n Returns:\n jnp.array: Filtered array.\n \"\"\"\n    assert len(col_indices) == len(values),\n\n    masks = [arr[:, col] != val for col, val in zip(col_indices, values)]\n    total_mask = jnp.logical_and(*masks)\n\n    return arr[total_mask]\n```"]