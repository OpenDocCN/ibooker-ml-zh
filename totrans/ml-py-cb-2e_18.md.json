["```py\n# Load libraries\nfrom sklearn import datasets\nfrom sklearn.naive_bayes import GaussianNB\n\n# Load data\niris = datasets.load_iris()\nfeatures = iris.data\ntarget = iris.target\n\n# Create Gaussian naive Bayes object\nclassifer = GaussianNB()\n\n# Train model\nmodel = classifer.fit(features, target)\n```", "```py\n# Create new observation\nnew_observation = [[ 4,  4,  4,  0.4]]\n\n# Predict class\nmodel.predict(new_observation)\n```", "```py\narray([1])\n```", "```py\n# Create Gaussian naive Bayes object with prior probabilities of each class\nclf = GaussianNB(priors=[0.25, 0.25, 0.5])\n\n# Train model\nmodel = classifer.fit(features, target)\n```", "```py\n# Load libraries\nimport numpy as np\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Create text\ntext_data = np.array(['I love Brazil. Brazil!',\n                      'Brazil is best',\n                      'Germany beats both'])\n\n# Create bag of words\ncount = CountVectorizer()\nbag_of_words = count.fit_transform(text_data)\n\n# Create feature matrix\nfeatures = bag_of_words.toarray()\n\n# Create target vector\ntarget = np.array([0,0,1])\n\n# Create multinomial naive Bayes object with prior probabilities of each class\nclassifer = MultinomialNB(class_prior=[0.25, 0.5])\n\n# Train model\nmodel = classifer.fit(features, target)\n```", "```py\n# Create new observation\nnew_observation = [[0, 0, 0, 1, 0, 1, 0]]\n\n# Predict new observation's class\nmodel.predict(new_observation)\n```", "```py\narray([0])\n```", "```py\n# Load libraries\nimport numpy as np\nfrom sklearn.naive_bayes import BernoulliNB\n\n# Create three binary features\nfeatures = np.random.randint(2, size=(100, 3))\n\n# Create a binary target vector\ntarget = np.random.randint(2, size=(100, 1)).ravel()\n\n# Create Bernoulli naive Bayes object with prior probabilities of each class\nclassifer = BernoulliNB(class_prior=[0.25, 0.5])\n\n# Train model\nmodel = classifer.fit(features, target)\n```", "```py\nmodel_uniform_prior = BernoulliNB(class_prior=None, fit_prior=False)\n```", "```py\n# Load libraries\nfrom sklearn import datasets\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.calibration import CalibratedClassifierCV\n\n# Load data\niris = datasets.load_iris()\nfeatures = iris.data\ntarget = iris.target\n\n# Create Gaussian naive Bayes object\nclassifer = GaussianNB()\n\n# Create calibrated cross-validation with sigmoid calibration\nclassifer_sigmoid = CalibratedClassifierCV(classifer, cv=2, method='sigmoid')\n\n# Calibrate probabilities\nclassifer_sigmoid.fit(features, target)\n\n# Create new observation\nnew_observation = [[ 2.6,  2.6,  2.6,  0.4]]\n\n# View calibrated probabilities\nclassifer_sigmoid.predict_proba(new_observation)\n```", "```py\narray([[0.31859969, 0.63663466, 0.04476565]])\n```", "```py\n# Train a Gaussian naive Bayes then predict class probabilities\nclassifer.fit(features, target).predict_proba(new_observation)\n```", "```py\narray([[2.31548432e-04, 9.99768128e-01, 3.23532277e-07]])\n```", "```py\n# View calibrated probabilities\narray([[0.31859969, 0.63663466, 0.04476565]])\n```", "```py\narray([[ 0.31859969,  0.63663466,  0.04476565]])\n```"]