["```py\n# Load library\nimport numpy as np\n\n# Create a vector as a row\nvector_row = np.array([1, 2, 3])\n\n# Create a vector as a column\nvector_column = np.array([[1],\n                          [2],\n                          [3]])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create a matrix\nmatrix = np.array([[1, 2],\n                   [1, 2],\n                   [1, 2]])\n```", "```py\nmatrix_object = np.mat([[1, 2],\n                        [1, 2],\n                        [1, 2]])\n```", "```py\nmatrix([[1, 2],\n        [1, 2],\n        [1, 2]])\n```", "```py\n# Load libraries\nimport numpy as np\nfrom scipy import sparse\n\n# Create a matrix\nmatrix = np.array([[0, 0],\n                   [0, 1],\n                   [3, 0]])\n\n# Create compressed sparse row (CSR) matrix\nmatrix_sparse = sparse.csr_matrix(matrix)\n```", "```py\n# View sparse matrix\nprint(matrix_sparse)\n```", "```py\n  (1, 1)    1\n  (2, 0)    3\n```", "```py\n# Create larger matrix\nmatrix_large = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n                         [3, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n\n# Create compressed sparse row (CSR) matrix\nmatrix_large_sparse = sparse.csr_matrix(matrix_large)\n```", "```py\n# View original sparse matrix\nprint(matrix_sparse)\n```", "```py\n  (1, 1)    1\n  (2, 0)    3\n```", "```py\n# View larger sparse matrix\nprint(matrix_large_sparse)\n```", "```py\n  (1, 1)    1\n  (2, 0)    3\n```", "```py\n# Load library\nimport numpy as np\n\n# Generate a vector of shape (1,5) containing all zeros\nvector = np.zeros(shape=5)\n\n# View the matrix\nprint(vector)\n```", "```py\narray([0., 0., 0., 0., 0.])\n```", "```py\n# Generate a matrix of shape (3,3) containing all ones\nmatrix = np.full(shape=(3,3), fill_value=1)\n\n# View the vector\nprint(matrix)\n```", "```py\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create row vector\nvector = np.array([1, 2, 3, 4, 5, 6])\n\n# Create matrix\nmatrix = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\n# Select third element of vector\nvector[2]\n```", "```py\n3\n```", "```py\n# Select second row, second column\nmatrix[1,1]\n```", "```py\n5\n```", "```py\n# Select all elements of a vector\nvector[:]\n```", "```py\narray([1, 2, 3, 4, 5, 6])\n```", "```py\n# Select everything up to and including the third element\nvector[:3]\n```", "```py\narray([1, 2, 3])\n```", "```py\n# Select everything after the third element\nvector[3:]\n```", "```py\narray([4, 5, 6])\n```", "```py\n# Select the last element\nvector[-1]\n```", "```py\n6\n```", "```py\n# Reverse the vector\nvector[::-1]\n```", "```py\narray([6, 5, 4, 3, 2, 1])\n```", "```py\n# Select the first two rows and all columns of a matrix\nmatrix[:2,:]\n```", "```py\narray([[1, 2, 3],\n       [4, 5, 6]])\n```", "```py\n# Select all rows and the second column\nmatrix[:,1:2]\n```", "```py\narray([[2],\n       [5],\n       [8]])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 2, 3, 4],\n                   [5, 6, 7, 8],\n                   [9, 10, 11, 12]])\n\n# View number of rows and columns\nmatrix.shape\n```", "```py\n(3, 4)\n```", "```py\n# View number of elements (rows * columns)\nmatrix.size\n```", "```py\n12\n```", "```py\n# View number of dimensions\nmatrix.ndim\n```", "```py\n2\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\n# Create function that adds 100 to something\nadd_100 = lambda i: i + 100\n\n# Create vectorized function\nvectorized_add_100 = np.vectorize(add_100)\n\n# Apply function to all elements in matrix\nvectorized_add_100(matrix)\n```", "```py\narray([[101, 102, 103],\n       [104, 105, 106],\n       [107, 108, 109]])\n```", "```py\n# Add 100 to all elements\nmatrix + 100\n```", "```py\narray([[101, 102, 103],\n       [104, 105, 106],\n       [107, 108, 109]])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\n# Return maximum element\nnp.max(matrix)\n```", "```py\n9\n```", "```py\n# Return minimum element\nnp.min(matrix)\n```", "```py\n1\n```", "```py\n# Find maximum element in each column\nnp.max(matrix, axis=0)\n```", "```py\narray([7, 8, 9])\n```", "```py\n# Find maximum element in each row\nnp.max(matrix, axis=1)\n```", "```py\narray([3, 6, 9])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\n# Return mean\nnp.mean(matrix)\n```", "```py\n5.0\n```", "```py\n# Return variance\nnp.var(matrix)\n```", "```py\n6.666666666666667\n```", "```py\n# Return standard deviation\nnp.std(matrix)\n```", "```py\n2.5819888974716112\n```", "```py\n# Find the mean value in each column\nnp.mean(matrix, axis=0)\n```", "```py\narray([ 4.,  5.,  6.])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create 4x3 matrix\nmatrix = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9],\n                   [10, 11, 12]])\n\n# Reshape matrix into 2x6 matrix\nmatrix.reshape(2, 6)\n```", "```py\narray([[ 1,  2,  3,  4,  5,  6],\n       [ 7,  8,  9, 10, 11, 12]])\n```", "```py\nmatrix.size\n```", "```py\n12\n```", "```py\nmatrix.reshape(1, -1)\n```", "```py\narray([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]])\n```", "```py\nmatrix.reshape(12)\n```", "```py\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\n# Transpose matrix\nmatrix.T\n```", "```py\narray([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])\n```", "```py\n# Transpose vector\nnp.array([1, 2, 3, 4, 5, 6]).T\n```", "```py\narray([1, 2, 3, 4, 5, 6])\n```", "```py\n# Transpose row vector\nnp.array([[1, 2, 3, 4, 5, 6]]).T\n```", "```py\narray([[1],\n       [2],\n       [3],\n       [4],\n       [5],\n       [6]])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9]])\n\n# Flatten matrix\nmatrix.flatten()\n```", "```py\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\nmatrix.reshape(1, -1)\n```", "```py\narray([[1, 2, 3, 4, 5, 6, 7, 8, 9]])\n```", "```py\n# Create one matrix\nmatrix_a = np.array([[1, 2],\n                     [3, 4]])\n\n# Create a second matrix\nmatrix_b = np.array([[5, 6],\n                     [7, 8]])\n\n# Create a list of matrices\nmatrix_list = [matrix_a, matrix_b]\n\n# Flatten the entire list of matrices\nnp.ravel(matrix_list)\n```", "```py\narray([1, 2, 3, 4, 5, 6, 7, 8])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 1, 1],\n                   [1, 1, 10],\n                   [1, 1, 15]])\n\n# Return matrix rank\nnp.linalg.matrix_rank(matrix)\n```", "```py\n2\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 2, 3],\n                   [2, 4, 6],\n                   [3, 8, 9]])\n\n# Return diagonal elements\nmatrix.diagonal()\n```", "```py\narray([1, 4, 9])\n```", "```py\n# Return diagonal one above the main diagonal\nmatrix.diagonal(offset=1)\n```", "```py\narray([2, 6])\n```", "```py\n# Return diagonal one below the main diagonal\nmatrix.diagonal(offset=-1)\n```", "```py\narray([2, 8])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 2, 3],\n                   [2, 4, 6],\n                   [3, 8, 9]])\n\n# Return trace\nmatrix.trace()\n```", "```py\n14\n```", "```py\n# Return diagonal and sum elements\nsum(matrix.diagonal())\n```", "```py\n14\n```", "```py\n# Load library\nimport numpy as np\n\n# Create two vectors\nvector_a = np.array([1,2,3])\nvector_b = np.array([4,5,6])\n\n# Calculate dot product\nnp.dot(vector_a, vector_b)\n```", "```py\n32\n```", "```py\n# Calculate dot product\nvector_a @ vector_b\n```", "```py\n32\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix_a = np.array([[1, 1, 1],\n                     [1, 1, 1],\n                     [1, 1, 2]])\n\n# Create matrix\nmatrix_b = np.array([[1, 3, 1],\n                     [1, 3, 1],\n                     [1, 3, 8]])\n\n# Add two matrices\nnp.add(matrix_a, matrix_b)\n```", "```py\narray([[ 2,  4,  2],\n       [ 2,  4,  2],\n       [ 2,  4, 10]])\n```", "```py\n# Subtract two matrices\nnp.subtract(matrix_a, matrix_b)\n```", "```py\narray([[ 0, -2,  0],\n       [ 0, -2,  0],\n       [ 0, -2, -6]])\n```", "```py\n# Add two matrices\nmatrix_a + matrix_b\n```", "```py\narray([[ 2,  4,  2],\n       [ 2,  4,  2],\n       [ 2,  4, 10]])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix_a = np.array([[1, 1],\n                     [1, 2]])\n\n# Create matrix\nmatrix_b = np.array([[1, 3],\n                     [1, 2]])\n\n# Multiply two matrices\nnp.dot(matrix_a, matrix_b)\n```", "```py\narray([[2, 5],\n       [3, 7]])\n```", "```py\n# Multiply two matrices\nmatrix_a @ matrix_b\n```", "```py\narray([[2, 5],\n       [3, 7]])\n```", "```py\n# Multiply two matrices element-wise\nmatrix_a * matrix_b\n```", "```py\narray([[1, 3],\n       [1, 4]])\n```", "```py\n# Load library\nimport numpy as np\n\n# Create matrix\nmatrix = np.array([[1, 4],\n                   [2, 5]])\n\n# Calculate inverse of matrix\nnp.linalg.inv(matrix)\n```", "```py\narray([[-1.66666667,  1.33333333],\n       [ 0.66666667, -0.33333333]])\n```", "```py\n# Multiply matrix and its inverse\nmatrix @ np.linalg.inv(matrix)\n```", "```py\narray([[ 1.,  0.],\n       [ 0.,  1.]])\n```", "```py\n# Load library\nimport numpy as np\n\n# Set seed\nnp.random.seed(0)\n\n# Generate three random floats between 0.0 and 1.0\nnp.random.random(3)\n```", "```py\narray([ 0.5488135 ,  0.71518937,  0.60276338])\n```", "```py\n# Generate three random integers between 0 and 10\nnp.random.randint(0, 11, 3)\n```", "```py\narray([3, 7, 9])\n```", "```py\n# Draw three numbers from a normal distribution with mean 0.0\n# and standard deviation of 1.0\nnp.random.normal(0.0, 1.0, 3)\n```", "```py\narray([-1.42232584,  1.52006949, -0.29139398])\n```", "```py\n# Draw three numbers from a logistic distribution with mean 0.0 and scale of 1.0\nnp.random.logistic(0.0, 1.0, 3)\n```", "```py\narray([-0.98118713, -0.08939902,  1.46416405])\n```", "```py\n# Draw three numbers greater than or equal to 1.0 and less than 2.0\nnp.random.uniform(1.0, 2.0, 3)\n```", "```py\narray([ 1.47997717,  1.3927848 ,  1.83607876])\n```"]