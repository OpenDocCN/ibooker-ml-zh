["```py\n>>> y_predict = dt.predict(X_test)\n>>> tp = (\n...     (y_test == 1) & (y_test == y_predict)\n... ).sum()  # 123\n>>> tn = (\n...     (y_test == 0) & (y_test == y_predict)\n... ).sum()  # 199\n>>> fp = (\n...     (y_test == 0) & (y_test != y_predict)\n... ).sum()  # 25\n>>> fn = (\n...     (y_test == 1) & (y_test != y_predict)\n... ).sum()  # 46\n```", "```py\n>>> from sklearn.metrics import confusion_matrix\n>>> y_predict = dt.predict(X_test)\n>>> pd.DataFrame(\n...     confusion_matrix(y_test, y_predict),\n...     columns=[\n...         \"Predict died\",\n...         \"Predict Survive\",\n...     ],\n...     index=[\"True Death\", \"True Survive\"],\n... )\n Predict died  Predict Survive\nTrue Death             199               25\nTrue Survive            46              123\n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from yellowbrick.classifier import (\n...     ConfusionMatrix,\n... )\n>>> mapping = {0: \"died\", 1: \"survived\"}\n>>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> cm_viz = ConfusionMatrix(\n...     dt,\n...     classes=[\"died\", \"survived\"],\n...     label_encoder=mapping,\n... )\n>>> cm_viz.score(X_test, y_test)\n>>> cm_viz.poof()\n>>> fig.savefig(\"images/mlpr_1202.png\", dpi=300)\n```", "```py\n>>> (tp + tn) / (tp + tn + fp + fn)\n0.8142493638676844\n```", "```py\n>>> from sklearn.metrics import accuracy_score\n>>> y_predict = dt.predict(X_test)\n>>> accuracy_score(y_test, y_predict)\n0.8142493638676844\n```", "```py\n>>> tp / (tp + fn)\n0.7159763313609467\n\n>>> from sklearn.metrics import recall_score\n>>> y_predict = dt.predict(X_test)\n>>> recall_score(y_test, y_predict)\n0.7159763313609467\n```", "```py\n>>> tp / (tp + fp)\n0.8287671232876712\n\n>>> from sklearn.metrics import precision_score\n>>> y_predict = dt.predict(X_test)\n>>> precision_score(y_test, y_predict)\n0.8287671232876712\n```", "```py\n>>> pre = tp / (tp + fp)\n>>> rec = tp / (tp + fn)\n>>> (2 * pre * rec) / (pre + rec)\n0.7682539682539683\n\n>>> from sklearn.metrics import f1_score\n>>> y_predict = dt.predict(X_test)\n>>> f1_score(y_test, y_predict)\n0.7682539682539683\n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from yellowbrick.classifier import (\n...     ClassificationReport,\n... )\n>>> fig, ax = plt.subplots(figsize=(6, 3))\n>>> cm_viz = ClassificationReport(\n...     dt,\n...     classes=[\"died\", \"survived\"],\n...     label_encoder=mapping,\n... )\n>>> cm_viz.score(X_test, y_test)\n>>> cm_viz.poof()\n>>> fig.savefig(\"images/mlpr_1203.png\", dpi=300)\n```", "```py\n>>> from sklearn.metrics import roc_auc_score\n>>> y_predict = dt.predict(X_test)\n>>> roc_auc_score(y_test, y_predict)\n0.8706304346418559\n```", "```py\n>>> from yellowbrick.classifier import ROCAUC\n>>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> roc_viz = ROCAUC(dt)\n>>> roc_viz.score(X_test, y_test)\n0.8706304346418559\n>>> roc_viz.poof()\n>>> fig.savefig(\"images/mlpr_1204.png\", dpi=300)\n```", "```py\n>>> from sklearn.metrics import (\n...     average_precision_score,\n... )\n>>> y_predict = dt.predict(X_test)\n>>> average_precision_score(y_test, y_predict)\n0.7155150490642249\n```", "```py\n>>> from yellowbrick.classifier import (\n...     PrecisionRecallCurve,\n... )\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> viz = PrecisionRecallCurve(\n...     DecisionTreeClassifier(max_depth=3)\n... )\n>>> viz.fit(X_train, y_train)\n>>> print(viz.score(X_test, y_test))\n>>> viz.poof()\n>>> fig.savefig(\"images/mlpr_1205.png\", dpi=300)\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> y_probas = dt.predict_proba(X_test)\n>>> scikitplot.metrics.plot_cumulative_gain(\n...     y_test, y_probas, ax=ax\n... )\n>>> fig.savefig(\n...     \"images/mlpr_1206.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> y_probas = dt.predict_proba(X_test)\n>>> scikitplot.metrics.plot_lift_curve(\n...     y_test, y_probas, ax=ax\n... )\n>>> fig.savefig(\n...     \"images/mlpr_1207.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> from yellowbrick.classifier import ClassBalance\n>>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> cb_viz = ClassBalance(\n...     labels=[\"Died\", \"Survived\"]\n... )\n>>> cb_viz.fit(y_test)\n>>> cb_viz.poof()\n>>> fig.savefig(\"images/mlpr_1208.png\", dpi=300)\n```", "```py\n>>> from yellowbrick.classifier import (\n...     ClassPredictionError,\n... )\n>>> fig, ax = plt.subplots(figsize=(6, 3))\n>>> cpe_viz = ClassPredictionError(\n...     dt, classes=[\"died\", \"survived\"]\n... )\n>>> cpe_viz.score(X_test, y_test)\n>>> cpe_viz.poof()\n>>> fig.savefig(\"images/mlpr_1209.png\", dpi=300)\n```", "```py\n>>> from yellowbrick.classifier import (\n...     DiscriminationThreshold,\n... )\n>>> fig, ax = plt.subplots(figsize=(6, 5))\n>>> dt_viz = DiscriminationThreshold(dt)\n>>> dt_viz.fit(X, y)\n>>> dt_viz.poof()\n>>> fig.savefig(\"images/mlpr_1210.png\", dpi=300)\n```"]