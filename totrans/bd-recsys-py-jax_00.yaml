- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How did you come to find this book? Did you see an ad for it on a website? Maybe
    a friend or mentor suggested it; or perhaps you saw a post on social media that
    referenced it. Could it be that you found it sitting on a shelf in a bookstore—a
    bookstore that your trusty maps app led you to? However you came to find it, you’ve
    almost certainly come to this book via a recommendation system.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and designing systems that provide suggestions to users is among
    the most popular and most essential applications of machine learning (ML) to any
    business. Whether you want to help your users find the best clothing to match
    their tastes, the most appealing items to buy from an online store, videos to
    enrich and entertain them, maximally engaging content to surface from their networks,
    or the news highlights they need to know on that day, recommendation systems provide
    the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modern recommendation system designs are as diverse as the domains they serve.
    These systems consist of the computer software architectures to implement and
    execute product goals, in addition to the algorithmic components of ranking. Methods
    for ranking recommendations can come from traditional statistical learning algorithms,
    linear-algebraic inspirations, geometric considerations, and, of course, gradient-based
    methods. Just as the algorithmic methods are diverse, so too are the modeling
    and evaluation considerations for recommending: personalized ranking, search recommendations,
    sequence modeling, and the scoring for all of these are now need-to-know for the
    ML engineer working with recommendation systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The abbreviation RecSys is often used by practitioners to describe the field
    of recommendation systems. Therefore, in this book, we use RecSys when referring
    to the field, and recommendation system when referring to what we build.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re an ML practitioner, you are probably aware of recommendation systems,
    and you may know one or two of the simplest modeling approaches and be able to
    speak intelligently about the relevant data structures and model architectures;
    however, RecSys frequently falls outside the core curriculum of data science and
    ML. Many senior data scientists with years of experience in the industry know
    little about actually building a recommendation system and may feel intimidated
    when the topic comes up. Despite drawing on similar foundations and skills as
    other ML problems, RecSys has a vibrant community with a fast-moving focus that
    can make it easy to relegate building recommendation systems to *other* data scientists
    who have already invested the time, or are willing to stay on top of the latest
    information.
  prefs: []
  type: TYPE_NORMAL
- en: The reason this book exists, is to break through those perceived barriers. Understanding
    recommendation systems at a practical level is not only useful for business cases
    requiring content to be served to users, but the underlying ideas of RecSys often
    bridge gaps between an incredibly diverse set of other types of ML. Take, for
    example, an article recommendation system that may utilize natural language processing
    (NLP) to find representations of the articles, sequential modeling to promote
    longer engagement, and contextual components to allow user queries to guide results.
    If you’re approaching the field from a purely academic interest, no matter what
    aspects of mathematics you’re interested in, sooner or later, there appears a
    link or application in RecSys!
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if connections to other fields, applications of nearly all of mathematics,
    or the obvious business utility *aren’t* enough to get you interested in RecSys,
    the stunning cutting-edge technology might: RecSys is at and beyond the forefront
    of ML at all times. One benefit of having obvious revenue impact is that companies
    and practitioners need to always be pushing the boundaries of what is possible
    and how they go about it. The most advanced deep learning architectures and best
    code infrastructures are brought to bear on this field. That’s hardly a surprise
    when you consider that at the heart of four of the five letters in FAANG—which
    stands for Meta (formerly Facebook), Apple, Amazon, Netflix, and Google—lies one
    or many recommendation systems.^([1](preface01.html#id328))'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a practitioner, you’ll need to understand how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Take your data and business problem and frame it as a RecSys problem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify the essential data to get started building a RecSys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine the appropriate models for your RecSys problem and how should you
    evaluate them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement, train, test, and deploy the aforementioned models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track metrics to ensure that your system is working as planned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incrementally improve your system as you learn more about your users, products,
    and business case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book illustrates the core concepts and examples necessary to complete these
    steps, whatever the industry or scale. We’ll guide you through the math, ideas,
    and implementation details for building recommendation systems—whether it’s your
    first or your fiftieth. We’ll show you how to build these systems with Python
    and JAX.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not yet familiar, JAX is a Python framework from Google that seeks
    to make autodifferentiation and functional programming paradigms first-class objects.
    Additionally, it uses a NumPy API style especially convenient for ML practitioners
    from a variety of backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: We will show code examples and architecture models that capture the essential
    concepts necessary and provide the way to scale these systems to production applications.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The included code snippets reference notebooks that will run on moderate-size
    and, in most cases, free resources. To facilitate easy experimentation and exploration
    we provide the code via Google Colab notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [ESRecsys on GitHub](https://github.com/BBischof/ESRecsys/).
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “*Building Recommendation
    Systems in Python and JAX* by Bryan Bischof and Hector Yee. Copyright 2024 Bryan
    Bischof and Resonant Intelligence LLC, 978-1-492-09799-0.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-889-8969 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-7019 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*support@oreilly.com*](mailto:support@oreilly.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://www.oreilly.com/about/contact.html*](https://www.oreilly.com/about/contact.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/build_rec_sys_python_jax*](https://oreil.ly/build_rec_sys_python_jax).
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*https://oreilly.com*](https://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*https://youtube.com/oreillymedia*](https://youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hector would like to thank his husband, Donald, for his loving support during
    the writing of this book and for the snacks his sister Serena sends all the time.
    He would also like to dedicate this book to his relatives who have passed. A big
    thank you goes to the Google reviewers Ed Chi, Courtney Hohne, Sally Goldman,
    Richa Nigam, Mingliang Jiang, and Anselm Levskaya. Thanks to Bryan Hughes for
    reviewing the Wikipedia code.
  prefs: []
  type: TYPE_NORMAL
- en: Bryan would like to thank his colleagues from Stitch Fix, where he learned many
    of the key ideas in this book—in particular, Ian Horn’s patient guidance on transfer
    learning, Dr. Molly Davies’s mentorship on experimentation and effect estimates,
    Mark Weiss’s deep partnership on understanding the relationship between availability
    and recommendations, Dr. Reza Sohrabi’s introduction to transformers, Dr. Xi Chen’s
    encouragement on GNNs for recs, and Dr. Leland McInnes for his careful advice
    on dimension reduction and approximate nearest neighbors. Bryan benefitted a lot
    from conversations with Dr. Natalia Gardiol, Dr. Daniel Fleischman, Dr. Andrew
    Ho, Jason Liu, Dr. Dan Marthaler, Dr. Chris Moody, Oz Raza, Dr. Anna Schneider,
    Ujjwal Sarin, Agnieszka Szefer, Dr. Daniel Tasse, Diyang Tang, Zach Winston, and
    others he has almost certainly forgotten. Outside of his incredible Stitch Fix
    colleagues, he especially wants to thank Dr. Eric Bunch, Dr. Lee Goerl, Dr. Will
    Chernoff, Leo Rosenberg, and Janu Verma for collaboration over the years. Dr.
    Brian Amadio as an excellent colleague and originally suggested that he write
    this book. Dr. Even Oldridge for encouraging him to actually try it. Eugene Yan
    and Karl Higley—neither of whom he’s met but has been significantly inspired by.
    He’d like to thank Dr. Zhongzhu Lin and Dr. Alexander Rosenberg, who both had
    formative impacts on his career. Cianna Salvatora, who assisted in early literature
    review, and Valentina Besprozvannykh, who greatly assisted in reading early draft
    notes and providing guidance.
  prefs: []
  type: TYPE_NORMAL
- en: Both authors thank Tobias Zwingmann, Ted Dunning, Vicki Boykis, Eric Schles,
    Shaked Zychlinski, and Will Kurt, who spend much time giving careful technical
    feedback on book manuscripts—without which this book would have been incomprehensible.
    Rebecca Novack, who harangued us into signing up for this project. And Jill Leonard,
    who removed nearly 100 erroneous instances of the word *utilize* from the manuscript,
    and who offered an incredible amount of patient partnership on the book text.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](preface01.html#id328-marker)) Some may quibble that Apple also has core
    recommendation systems at the heart of its company. While it’s certainly true
    that the App Store forms a crucial strategic product for the company, we remain
    conservative in our four-out-of-five assessment and say that recommendation systems
    are not Apple’s primary revenue-generating capability.
  prefs: []
  type: TYPE_NORMAL
