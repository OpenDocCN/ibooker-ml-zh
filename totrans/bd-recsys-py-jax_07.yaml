- en: Part II. Retrieval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*How do we get all the data in the right place to train a recommendation system?
    How do we build and deploy systems for real-time inference?*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Reading research papers about recommendation systems will often give the impression
    that they’re built via a bunch of math equations, and all the really hard work
    of using recommendation systems is in connecting these equations to the features
    of your problem. More realistically, the first several steps of building a production
    recommendation system fall under systems engineering. Understanding how your data
    will make it into your system, be manipulated into the correct structure, and
    then be available in each of the relevant steps of the training flow often constitutes
    the bulk of the initial recommendation system’s work. But even beyond this initial
    phase, ensuring that all the necessary components are fast enough and robust enough
    for production environments requires yet another significant investment in platform
    infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Often you’ll build a component responsible for processing the various types
    of data and storing them in a convenient format. Next, you’ll construct a model
    that takes that data and encodes it in a latent space or other representation
    model. Finally, you’ll need to transform an input request into the representation
    as a query in this space. These steps usually take the form of jobs in a workflow
    management platform or services deployed as endpoints. The next few chapters will
    walk you through the relevant technologies and concepts necessary to build and
    deploy these systems—and the awareness of important aspects of reliability, scalability,
    and efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be thinking, “I’m a data scientist! I don’t need to know all this!”
    But you should know that RecSys has an inconvenient duality: model architecture
    changes often affect the systems architecture. Interested in trying out those
    fancy transformers? Your deployment strategy is going to need a new design. Maybe
    your clever feature embeddings can solve the cold-start problem! Those feature
    embeddings will need to serve your encoding layers and integrate with your new
    NoSQL feature store. Don’t panic! This part of the book is a walk through the
    Big Data Zoo.'
  prefs: []
  type: TYPE_NORMAL
