["```py\n# Load libraries\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import make_regression\n\n# Generate features matrix, target vector\nfeatures, target = make_regression(n_samples = 100,\n                                   n_features = 3,\n                                   n_informative = 2,\n                                   n_targets = 1,\n                                   noise = 0.2,\n                                   coef = False,\n                                   random_state = 1)\n\n# Create linear regression\nregression = LinearRegression()\n\n# Fit the linear regression\nmodel = regression.fit(features, target)\n```", "```py\n# View the intercept\nmodel.intercept_\n```", "```py\n-0.009650118178816669\n```", "```py\n# View the feature coefficients\nmodel.coef_\n```", "```py\narray([1.95531234e-02, 4.42087450e+01, 5.81494563e+01])\n```", "```py\n# First value in the target vector\ntarget[0]\n```", "```py\n-20.870747595269407\n```", "```py\n# Predict the target value of the first observation\nmodel.predict(features)[0]\n```", "```py\n-20.861927709296808\n```", "```py\n# Print the score of the model on the training data\nprint(model.score(features, target))\n```", "```py\n0.9999901732607787\n```", "```py\n# Load libraries\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.datasets import make_regression\n\n# Generate features matrix, target vector\nfeatures, target = make_regression(n_samples = 100,\n                                   n_features = 2,\n                                   n_informative = 2,\n                                   n_targets = 1,\n                                   noise = 0.2,\n                                   coef = False,\n                                   random_state = 1)\n\n# Create interaction term\ninteraction = PolynomialFeatures(\n    degree=3, include_bias=False, interaction_only=True)\nfeatures_interaction = interaction.fit_transform(features)\n\n# Create linear regression\nregression = LinearRegression()\n\n# Fit the linear regression\nmodel = regression.fit(features_interaction, target)\n```", "```py\n# View the feature values for first observation\nfeatures[0]\n```", "```py\narray([0.0465673 , 0.80186103])\n```", "```py\n# Import library\nimport numpy as np\n\n# For each observation, multiply the values of the first and second feature\ninteraction_term = np.multiply(features[:, 0], features[:, 1])\n```", "```py\n# View interaction term for first observation\ninteraction_term[0]\n```", "```py\n0.037340501965846186\n```", "```py\n# View the values of the first observation\nfeatures_interaction[0]\n```", "```py\narray([0.0465673 , 0.80186103, 0.0373405 ])\n```", "```py\n# Load library\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.datasets import make_regression\n\n# Generate features matrix, target vector\nfeatures, target = make_regression(n_samples = 100,\n                                   n_features = 3,\n                                   n_informative = 2,\n                                   n_targets = 1,\n                                   noise = 0.2,\n                                   coef = False,\n                                   random_state = 1)\n\n# Create polynomial features x^2 and x^3\npolynomial = PolynomialFeatures(degree=3, include_bias=False)\nfeatures_polynomial = polynomial.fit_transform(features)\n\n# Create linear regression\nregression = LinearRegression()\n\n# Fit the linear regression\nmodel = regression.fit(features_polynomial, target)\n```", "```py\n# View first observation\nfeatures[0]\n```", "```py\narray([-0.61175641])\n```", "```py\n# View first observation raised to the second power, x^2\nfeatures[0]**2\n```", "```py\narray([0.37424591])\n```", "```py\n# View first observation raised to the third power, x^3\nfeatures[0]**3\n```", "```py\narray([-0.22894734])\n```", "```py\n# View the first observation's values for x, x^2, and x^3\nfeatures_polynomial[0]\n```", "```py\narray([-0.61175641,  0.37424591, -0.22894734])\n```", "```py\n# Load libraries\nfrom sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_regression\n\n# Generate features matrix, target vector\nfeatures, target = make_regression(n_samples = 100,\n                                   n_features = 3,\n                                   n_informative = 2,\n                                   n_targets = 1,\n                                   noise = 0.2,\n                                   coef = False,\n                                   random_state = 1)\n\n# Standardize features\nscaler = StandardScaler()\nfeatures_standardized = scaler.fit_transform(features)\n\n# Create ridge regression with an alpha value\nregression = Ridge(alpha=0.5)\n\n# Fit the linear regression\nmodel = regression.fit(features_standardized, target)\n```", "```py\n# Load library\nfrom sklearn.linear_model import RidgeCV\n\n# Create ridge regression with three alpha values\nregr_cv = RidgeCV(alphas=[0.1, 1.0, 10.0])\n\n# Fit the linear regression\nmodel_cv = regr_cv.fit(features_standardized, target)\n\n# View coefficients\nmodel_cv.coef_\n```", "```py\narray([1.29223201e-02, 4.40972291e+01, 5.38979372e+01])\n```", "```py\n# View alpha\nmodel_cv.alpha_\n```", "```py\n0.1\n```", "```py\n# Load library\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_regression\n\n# Generate features matrix, target vector\nfeatures, target = make_regression(n_samples = 100,\n                                   n_features = 3,\n                                   n_informative = 2,\n                                   n_targets = 1,\n                                   noise = 0.2,\n                                   coef = False,\n                                   random_state = 1)\n\n# Standardize features\nscaler = StandardScaler()\nfeatures_standardized = scaler.fit_transform(features)\n\n# Create lasso regression with alpha value\nregression = Lasso(alpha=0.5)\n\n# Fit the linear regression\nmodel = regression.fit(features_standardized, target)\n```", "```py\n# View coefficients\nmodel.coef_\n```", "```py\narray([-0\\.        , 43.58618393, 53.39523724])\n```", "```py\n# Create lasso regression with a high alpha\nregression_a10 = Lasso(alpha=10)\nmodel_a10 = regression_a10.fit(features_standardized, target)\nmodel_a10.coef_\n```", "```py\narray([-0\\.        , 32.92181899, 42.73086731])\n```"]