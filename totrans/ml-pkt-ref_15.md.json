["```py\n>>> rfr = RandomForestRegressor(\n...     random_state=42, n_estimators=100\n... )\n>>> rfr.fit(bos_X_train, bos_y_train)\n```", "```py\n>>> from sklearn import metrics\n>>> rfr.score(bos_X_test, bos_y_test)\n0.8721182042634867\n\n>>> metrics.r2_score(bos_y_test, bos_y_test_pred)\n0.8721182042634867\n```", "```py\n>>> metrics.explained_variance_score(\n...     bos_y_test, bos_y_test_pred\n... )\n0.8724890451227875\n```", "```py\n>>> metrics.mean_absolute_error(\n...     bos_y_test, bos_y_test_pred\n... )\n2.0839802631578945\n```", "```py\n>>> metrics.mean_squared_error(\n...     bos_y_test, bos_y_test_pred\n... )\n9.52886846710526\n```", "```py\n>>> metrics.mean_squared_log_error(\n...     bos_y_test, bos_y_test_pred\n... )\n0.02128263061776433\n```", "```py\n>>> from yellowbrick.regressor import ResidualsPlot\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> rpv = ResidualsPlot(rfr)\n>>> rpv.fit(bos_X_train, bos_y_train)\n>>> rpv.score(bos_X_test, bos_y_test)\n>>> rpv.poof()\n>>> fig.savefig(\"images/mlpr_1501.png\", dpi=300)\n```", "```py\n>>> import statsmodels.stats.api as sms\n>>> hb = sms.het_breuschpagan(resids, bos_X_test)\n>>> labels = [\n...     \"Lagrange multiplier statistic\",\n...     \"p-value\",\n...     \"f-value\",\n...     \"f p-value\",\n... ]\n>>> for name, num in zip(name, hb):\n...     print(f\"{name}: {num:.2}\")\nLagrange multiplier statistic: 3.6e+01\np-value: 0.00036\nf-value: 3.3\nf p-value: 0.00022\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> resids = bos_y_test - rfr.predict(bos_X_test)\n>>> pd.Series(resids, name=\"residuals\").plot.hist(\n...     bins=20, ax=ax, title=\"Residual Histogram\"\n... )\n>>> fig.savefig(\"images/mlpr_1502.png\", dpi=300)\n```", "```py\n>>> from scipy import stats\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> _ = stats.probplot(resids, plot=ax)\n>>> fig.savefig(\"images/mlpr_1503.png\", dpi=300)\n```", "```py\n>>> stats.kstest(resids, cdf=\"norm\")\nKstestResult(statistic=0.1962230021010155, pvalue=1.3283596864921421e-05)\n```", "```py\n>>> from yellowbrick.regressor import (\n...     PredictionError,\n... )\n>>> fig, ax = plt.subplots(figsize=(6, 6))\n>>> pev = PredictionError(rfr)\n>>> pev.fit(bos_X_train, bos_y_train)\n>>> pev.score(bos_X_test, bos_y_test)\n>>> pev.poof()\n>>> fig.savefig(\"images/mlpr_1504.png\", dpi=300)\n```"]