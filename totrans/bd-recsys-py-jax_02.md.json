["```py\ndef get_trivial_recs() -> Optional[List[str]]:\n   item_id = random.randint(0, MAX_ITEM_INDEX)\n\n   if get_availability(item_id):\n       return [item_id]\n   return None\n```", "```py\ndef get_item_popularities() -> Optional[Dict[str, int]]:\n    ...\n        # Dict of pairs: (item-identifier, count times item chosen)\n        return item_choice_counts\n    return None\n\ndef get_most_popular_recs(max_num_recs: int) -> Optional[List[str]]:\n    items_popularity_dict = get_item_popularities()\n    if items_popularity_dict:\n        sorted_items = sorted(\n            items_popularity_dict.items(),\n            key=lambda item: item[1]),\n            reverse=True,\n        )\n        return [i[0] for i in sorted_items][:max_num_recs]\n    return None\n```", "```py\nimport jax.numpy as jnp\nimport numpy as np\n\nx = jnp.array([1.0, 2.0, 3.0], dtype=jnp.float32)\n\nprint(x)\n[1. 2. 3.]\n\nprint(x.shape)\n(3,)\n\nprint(x[0])\n1.0\n\nx[0] = 4.0\nTypeError: '<class 'jaxlib.xla_extension.ArrayImpl'>'\nobject does not support item assignment. JAX arrays are immutable.\n```", "```py\nx = jnp.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=jnp.int32)\n\n# Print the whole matrix.\nprint(x)\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n\n# Print the first row.\nprint(x[0])\n[1 2 3]\n\n# Print the last row.\nprint(x[-1])\n[7 8 9]\n\n# Print the second column.\nprint(x[:, 1])\n[2 5 8]\n\n# Print every other element\nprint(x[::2, ::2])\n[[1 3]\n [7 9]]\n```", "```py\nx = jnp.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=jnp.int32)\n\n# Scalar broadcasting.\ny = 2 * x\nprint(y)\n[[ 2  4  6]\n [ 8 10 12]\n [14 16 18]]\n\n# Vector broadcasting. Axes with shape 1 are duplicated.\nvec = jnp.reshape(jnp.array([0.5, 1.0, 2.0]), [3, 1])\ny = vec * x\nprint(y)\n[[ 0.5  1.   1.5]\n [ 4.   5.   6. ]\n [14.  16.  18. ]]\n\nvec = jnp.reshape(vec, [1, 3])\ny = vec * x\nprint(y)\n[[ 0.5  2.   6. ]\n [ 2.   5.  12. ]\n [ 3.5  8.  18. ]]\n```", "```py\nimport jax.random as random\n\nkey = random.PRNGKey(0)\nx = random.uniform(key, shape=[3, 3])\nprint(x)\n[[0.35490513 0.60419905 0.4275843 ]\n [0.23061597 0.6735498  0.43953657]\n [0.25099766 0.27730572 0.7678207 ]]\n\nkey, subkey = random.split(key)\nx = random.uniform(key, shape=[3, 3])\nprint(x)\n[[0.0045197  0.5135027  0.8613342 ]\n [0.06939673 0.93825936 0.85599923]\n [0.706004   0.50679076 0.6072922 ]]\n\ny = random.uniform(subkey, shape=[3, 3])\nprint(y)\n[[0.34896135 0.48210478 0.02053976]\n [0.53161216 0.48158717 0.78698325]\n [0.07476437 0.04522789 0.3543167 ]]\n```", "```py\nimport jax\n\nx = random.uniform(key, shape=[2048, 2048]) - 0.5\n\ndef my_function(x):\n  x = x @ x\n  return jnp.maximum(0.0, x)\n\n%timeit my_function(x).block_until_ready()\n302 ms ± 9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\nmy_function_jitted = jax.jit(my_function)\n\n%timeit my_function_jitted(x).block_until_ready()\n294 ms ± 5.45 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```"]