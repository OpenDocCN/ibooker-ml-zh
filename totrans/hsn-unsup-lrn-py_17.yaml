- en: Chapter 13\. Time Series Clustering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章. 时间序列聚类
- en: So far in this book, we have worked mostly with *cross-sectional data*, in which
    we have observations for entities at a single point in time. This includes the
    credit card dataset with transactions that happened over two days and the MNIST
    dataset with images of digits. For these datasets, we applied unsupervised learning
    to learn the underlying structure in the data and to group similar transactions
    and images together without using any labels.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们主要处理*横断面数据*，即我们在单个时间点上观察实体的数据。这包括信用卡数据集，记录了两天内的交易，以及 MNIST 数据集，其中包含数字图像。对于这些数据集，我们应用了无监督学习来学习数据的潜在结构，并将相似的交易和图像分组在一起，而不使用任何标签。
- en: Unsupervised learning is also very valuable for work with *time series data*,
    in which we have observations for a single entity at different time intervals.
    We need to develop a solution that can learn the underlying structure of data
    across time, not just for a particular moment in time. If we develop such a solution,
    we can identify similar time series patterns and group them together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无监督学习对处理*时间序列数据*也非常有价值，其中我们在不同时间间隔内观察单个实体。我们需要开发一种能够跨时间学习数据的潜在结构的解决方案，而不仅仅是针对特定时间点。如果我们开发了这样的解决方案，我们就可以识别出类似的时间序列模式并将它们分组在一起。
- en: This is very impactful in fields such as finance, medicine, robotics, astronomy,
    biology, meteorology, etc., since professionals in these fields spend a lot of
    time analyzing data to classify current events based on how similar they are to
    past events. By grouping current events together with similar past events, these
    professionals are able to more confidently decide on the right course of action
    to take.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这在金融、医学、机器人学、天文学、生物学、气象学等领域具有非常大的影响，因为这些领域的专业人员花费大量时间分析数据，根据当前事件与过去事件的相似性来分类当前事件。通过将当前事件与类似的过去事件分组在一起，这些专业人员能够更自信地决定采取正确的行动。
- en: In this chapter, we will work on clustering time series data based on pattern
    similarity. Clustering time series data is a purely unsupervised approach and
    does not require annotation of data for training, although annotated data is necessary
    for validating the results as with all other unsupervised learning experiments.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将根据模式相似性对时间序列数据进行聚类。时间序列数据的聚类是一种纯无监督方法，不需要对数据进行训练注释，尽管对于验证结果，像所有其他无监督学习实验一样，需要注释数据。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注记
- en: There is a third group of data that combines cross-sectional and time series
    data. This is known as *panel* or *longitudinal* data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种数据组合，结合了横断面和时间序列数据。这被称为*面板*或*纵向*数据。
- en: ECG Data
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECG 数据
- en: To make the time series clustering problem more tangible, let’s introduce a
    specific real-world problem. Imagine we were working in healthcare and had to
    analyze electrocardiogram (EKG/ECG) readings. ECG machines record the electrical
    activity of the heart over a period of time using electrodes placed over the skin.
    The ECG measures activity over approximately 10 seconds, and the recorded metrics
    help detect any cardiac problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使时间序列聚类问题更具体化，让我们引入一个特定的现实世界问题。想象一下，我们在医疗保健领域工作，需要分析心电图（EKG/ECG）读数。ECG 机器使用放置在皮肤上的电极，在一段时间内记录心脏的电活动。ECG
    在大约 10 秒钟内测量活动，并记录的指标有助于检测任何心脏问题。
- en: Most ECG readings record normal heartbeat activity, but the abnormal readings
    are the ones healthcare professionals must identify to react preemptively before
    any adverse cardiac event—such as cardiac arrest—occurs. The ECG produces a line
    graph with peaks and valleys so the task of classifying a reading as normal or
    abnormal is a straightforward pattern recognition task, well suited for machine
    learning.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 ECG 读数记录的是正常的心跳活动，但异常读数是医疗专业人员必须识别的，以在任何不良心脏事件（如心脏骤停）发生之前采取预防性措施。ECG 产生带有峰和谷的折线图，因此将读数分类为正常或异常是一项简单的模式识别任务，非常适合机器学习。
- en: Real-world ECG readings are not so cleanly displayed, making classification
    of the images into these various buckets difficult and error-prone.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界的 ECG 读数并不是如此清晰显示，这使得将图像分类到这些不同桶中变得困难且容易出错。
- en: For example, variations in the *amplitude* of the waves (the height of the center
    line to the peak or trough), the *period* (the distance from one peak to the next),
    the *phase shift* (horizontal shifting), and the *vertical shift* are challenges
    for any machine-driven classification system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，波的*振幅*变化（中心线到峰值或谷值的高度）、*周期*（从一个峰值到下一个的距离）、*相位移*（水平移动）和*垂直移*都是任何机器驱动分类系统的挑战。
- en: Approach to Time Series Clustering
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列聚类方法
- en: Any approach to time series clustering will require us to handle these types
    of distortions. As you may recall, clustering relies on distance measures to determine
    how close in space data is to other data so that similar data can be grouped together
    into distinct and homogeneous clusters.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任何时间序列聚类方法都需要处理这些类型的扭曲。正如您可能记得的那样，聚类依赖于距离度量，以确定数据在空间中与其他数据的接近程度，从而将相似的数据组合成不同且同质的簇。
- en: Clustering time series data works similarly, but we need a distance measure
    that is scale- and shift-invariant so that similar time series data is grouped
    together regardless of trivial differences in amplitude, period, phase shift,
    and vertical shift.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据的聚类工作方式类似，但我们需要一个距离度量，该度量是尺度和位移不变的，以便将类似的时间序列数据组合在一起，而不考虑幅度、周期、相位移和垂直移的微小差异。
- en: k-Shape
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: k-Shape
- en: One of the state-of-the-art approaches to time series clustering that meets
    this criteria is *k-shape*, which was first introduced at ACM SIGMOD in 2015 by
    John Paparrizos and Luis Gravano.^([1](ch13.html#idm140637524834352))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 满足这一标准的时间序列聚类的先进方法之一是*k-shape*，它由John Paparrizos和Luis Gravano于2015年首次在ACM SIGMOD上介绍^([1](ch13.html#idm140637524834352))。
- en: '*k*-shape uses a distance measure that is invariant to scaling and shifting
    to preserve the shapes of time series sequences while comparing them. Specifically,
    *k*-shape uses a normalized version of cross-correlation to compute cluster centroids
    and then, in every iteration, updates the assignment of time series to these clusters.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*k*-shape使用一种距离度量，该度量对缩放和位移不变，以保持比较时间序列序列的形状。具体来说，*k*-shape使用标准化的交叉相关来计算簇质心，并在每次迭代中更新时间序列分配到这些簇。'
- en: In addition to being invariant to scaling and shifting, *k*-shape is domain-independent
    and scalable, requiring minimal parameter tuning. Its iterative refinement procedure
    scales linearly in the number of sequences. These characteristics have made it
    one of the most powerful time series clustering algorithms available today.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对缩放和位移不变之外，*k*-shape还是领域无关且可扩展的，需要最少的参数调整。其迭代改进过程在序列数量上线性扩展。这些特性使其成为当今最强大的时间序列聚类算法之一。
- en: 'By this point, it should be clear that *k*-shape operates similarly to *k*-means:
    both algorithms use an iterative approach to assign data to groups based on the
    distance between the data and the centroid of the nearest group. The critical
    difference is in how *k*-shape calculates distances—it uses shaped-based distance
    that relies on cross-correlations.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，应该清楚*k*-shape的运行方式与*k*-means类似：两种算法都使用迭代方法根据数据与最近群组的质心之间的距离来分配数据。关键的区别在于*k*-shape计算距离的方式——它使用基于形状的距离，依赖于交叉相关性。
- en: Time Series Clustering Using k-Shape on ECGFiveDays
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用*k-shape*对ECGFiveDays进行时间序列聚类
- en: Let’s build a time series clustering model using *k*-shape.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用*k*-shape构建一个时间序列聚类模型。
- en: In this chapter, we will rely on data from the UCR time series collection. Because
    the file size exceeds one hundred megabytes, it is not accessible on GitHub. You
    will need to download the files from the [UCR Time Series website](http://bit.ly/2CXPcfq).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将依赖于UCR时间序列收集的数据。由于文件大小超过一百兆字节，在GitHub上无法访问。您需要从[UCR时间序列网站](http://bit.ly/2CXPcfq)下载这些文件。
- en: This is the largest public collection of class-labeled time series datasets,
    numbering—85 in total. These datasets are from multiple domains, so we can test
    how well our solution does across domains. Each time series belongs to only one
    class, so we also have labels to validate the results of our time series clustering.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最大的公共类标记时间序列数据集收藏，总计有85个。这些数据集来自多个领域，因此我们可以测试我们的解决方案在不同领域的表现。每个时间序列只属于一个类别，因此我们也有标签来验证时间序列聚类的结果。
- en: Data Preparation
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据准备
- en: 'Let’s begin by loading the necessary libraries:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始加载必要的库：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will use the *tslearn* package to access the Python-based *k*-shape algorithm.
    tslearn has a similar framework as Scikit-learn but is geared toward work with
    time series data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 *tslearn* 包来访问基于 Python 的 *k*-shape 算法。tslearn 的框架与 Scikit-learn 类似，但专门用于处理时间序列数据。
- en: 'Next, let’s load the training and test data from the `ECGFiveDays` dataset,
    which was downloaded from the UCR Time Series archive. The first column in this
    matrix has the class labels, while the rest of the columns are the values of the
    time series data. We will store the data as `X_train`, `y_train`, `X_test`, and
    `y_test`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们从 UCR 时间序列存档下载的 `ECGFiveDays` 数据集中加载训练和测试数据。此矩阵的第一列是类别标签，其余列是时间序列数据的值。我们将数据存储为
    `X_train`、`y_train`、`X_test` 和 `y_test`：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following code shows the number of time series, the number of unique classes,
    and the length of each time series:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码显示了时间序列的数量、唯一类别的数量以及每个时间序列的长度：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are 23 time series and 2 unique classes, and each time series has a length
    of 136\. [Figure 13-1](#ecg_five_days_class_1_0_first_two_examples) shows a few
    examples of each class; now we know what these ECG readings look like:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有 23 个时间序列和 2 个唯一类别，每个时间序列长度为 136\. [Figure 13-1](#ecg_five_days_class_1_0_first_two_examples)
    显示了每个类别的几个示例；现在我们知道这些 ECG 读数是什么样的了：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![ECG Five Days Class 1.0 - First Two Examples](assets/hulp_1301.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![ECG Five Days Class 1.0 - First Two Examples](assets/hulp_1301.png)'
- en: Figure 13-1\. ECGFiveDays class 1.0—first two examples
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-1\. ECGFiveDays 类 1.0—第一组示例
- en: '![ECG Five Days Class 1.0 - Second Two Examples](assets/hulp_1302.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![ECG Five Days Class 1.0 - Second Two Examples](assets/hulp_1302.png)'
- en: Figure 13-2\. ECGFiveDays class 1.0—second two examples
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-2\. ECGFiveDays 类 1.0—第二组示例
- en: 'Here is the code to plot results from `Class 2.0`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是绘制 `Class 2.0` 结果的代码：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![ECG Five Days Class 2.0 - First Two Examples](assets/hulp_1303.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![ECG Five Days Class 2.0 - First Two Examples](assets/hulp_1303.png)'
- en: Figure 13-3\. ECGFiveDays class 2.0—first two examples
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-3\. ECGFiveDays 类 2.0—第一组示例
- en: '![ECG Five Days Class 2.0 - Second Two Examples](assets/hulp_1304.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![ECG Five Days Class 2.0 - Second Two Examples](assets/hulp_1304.png)'
- en: Figure 13-4\. ECGFiveDays class 2.0—second two examples
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-4\. ECGFiveDays 类 2.0—第二组示例
- en: To the naked, untrained eye, the examples from class 1.0 and class 2.0 seem
    indistinguishable, but these observations have been annotated by domain experts.
    The plots are noisy with distortions. There are also differences in amplitude,
    period, phase shift, and vertical shift that make classification a challenge.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未经训练的肉眼来说，来自类 1.0 和类 2.0 的示例看起来无法区分，但这些观察结果已由领域专家注释。这些图表因噪声和失真而复杂。振幅、周期、相移和垂直移位的差异也使得分类成为一项挑战。
- en: 'Let’s prepare the data for the *k*-shape algorithm. We will normalize the data
    to have a mean of zero and standard deviation of one:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备 *k*-shape 算法的数据。我们将对数据进行归一化，使其均值为零，标准差为一：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Training and Evaluation
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练和评估
- en: Next, we will call the *k*-shape algorithm and set the number of clusters as
    2, the max iterations to perform as one hundred, and the number of rounds of training
    as one hundred:^([2](ch13.html#idm140637523748448))
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将调用 *k*-shape 算法，并将集群数量设置为 2，最大迭代次数设置为一百，训练轮数设置为一百：^([2](ch13.html#idm140637523748448))
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To measure the goodness of the time series clustering, we will use the *adjusted
    Rand index*, a measure of the similarity between two data clusterings adjusted
    for the chance grouping of elements. This is related to the accuracy measure.^([3](ch13.html#idm140637523728768))
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了衡量时间序列聚类的好坏，我们将使用 *adjusted Rand index*，这是一种校正后的元素随机分组机制相似度测量方法。这与准确度测量相关。^([3](ch13.html#idm140637523728768))
- en: Intuitively, the Rand index measures the number of agreements in cluster assignments
    between the predicted clusterings and the true clusterings. If the model has an
    adjusted Rand index with a value close to 0.0, it is purely randomly assigning
    clusters; if the model has an adjusted Rand index with a value close to 1.0, the
    predicted clusterings match the true clusterings exactly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 直观地，兰德指数衡量了预测聚类和真实聚类分配之间的一致性。如果模型的调整兰德指数接近 0.0，则表示纯随机分配聚类；如果模型的调整兰德指数接近 1.0，则表示预测聚类完全与真实聚类匹配。
- en: We will use the Scikit-learn implementation of the adjusted Rand index called
    the *adjusted_rand_score*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Scikit-learn 中的调整兰德指数实现，称为 *adjusted_rand_score*。
- en: 'Let’s generate clustering predictions and then calculate the adjusted Rand
    index:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们生成聚类预测，然后计算调整兰德指数：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Based on this run, the adjusted Rand index is 0.668\. If you perform this training
    and prediction several times, you will notice the adjusted Rand index will vary
    a bit but remains well above 0.0 at all times:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此次运行，调整兰德指数为0.668\. 如果您多次进行此训练和预测，您会注意到调整兰德指数会有所变化，但始终保持在0.0以上：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s predict on the test set and calculate the adjusted Rand index for it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在测试集上进行预测，并计算其调整兰德指数：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The adjusted Rand index is considerably lower on the test set, barely above
    0\. The cluster predictions are nearly chance assignments—the time series are
    being grouped based on similarity with little success:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 测试集上的调整兰德指数明显较低，勉强超过0\. 聚类预测几乎是随机分配——时间序列基于相似性进行分组，但成功率很低：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If we had a much larger training set to train our *k*-shape-based time series
    clustering model, we would expect better performance on the test set.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个更大的训练集来训练基于*k*-shape的时间序列聚类模型，我们预计在测试集上会有更好的表现。
- en: Time Series Clustering Using k-Shape on ECG5000
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ECG5000进行时间序列聚类
- en: Instead of the `ECGFiveDays` dataset, which has only 23 observations in the
    training set and 861 in the test set, let’s use a much larger dataset of ECG readings.
    The `ECG5000` dataset (also available on the UCR Time Series archive) has five
    thousand ECG readings (i.e., time series) in total across the train and test sets.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用仅有23个观测值的`ECGFiveDays`数据集，而是使用一个更大的心电图读数数据集。`ECG5000`数据集（也可以在UCR时间序列存档中找到），总共有五千个心电图读数（即时间序列），分布在训练集和测试集中。
- en: Data Preparation
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据准备
- en: 'We will load in the datasets and make our own train and test split, with 80%
    of the five thousand readings in the custom train set and the remaining 20% in
    the custom test set. With this much larger training set, we should be able to
    develop a time series clustering model that has much better performance, both
    on the train set and, most importantly, on the test set:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载数据集并进行自定义的训练集和测试集划分，其中80%的五千个读数在自定义训练集中，剩余的20%在自定义测试集中。有了这个更大的训练集，我们应该能够开发出一个时间序列聚类模型，其在训练集和测试集上都有更好的性能：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s explore this dataset:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一下这个数据集：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following code displays the basic summary statistics. There are four thousand
    readings in the training set, which are grouped into five distinct classes, and
    each time series has a length of 140:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码显示了基本的摘要统计信息。在训练集中有四千个读数，分为五个不同的类别，每个时间序列的长度为140：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let’s also consider how many of the readings belong to each of these classes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也考虑一下这些类别的读数数量。
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The distribution is shown in [Figure 13-5](#ecg_5000_class_1_0). Most of the
    readings fall in class 1, followed by class 2\. Significantly fewer readings belong
    to clases 3, 4, and 5.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 分布显示在[图 13-5](#ecg_5000_class_1_0)中。大多数读数属于第一类，其次是第二类。第三、第四和第五类的读数显著较少。
- en: Let’s take the average time series reading from each class to get a better sense
    of how the various classes look.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们取每个类别的平均时间序列读数，以更好地了解各类别的外观。
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Class 1 ([Figure 13-5](#ecg_5000_class_1_0)) has a sharp trough followed by
    a sharp peak and stabilization. This is the most common type of reading.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第一类（[图 13-5](#ecg_5000_class_1_0)）有一个明显的低谷，随后是一个尖锐的峰值和稳定期。这是最常见的读数类型。
- en: '![ECG 5000 Class 1.0](assets/hulp_1305.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![ECG 5000 第一类 1.0](assets/hulp_1305.png)'
- en: Figure 13-5\. ECG5000 class 1.0
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-5\. ECG5000 第一类 1.0
- en: Class 2 ([Figure 13-6](#ecg_5000_class_2_0)) has a sharp trough followed by
    a recovery and then an even sharper and lower trough with a partial recovery.
    This is the second most common type of reading.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第二类（[图 13-6](#ecg_5000_class_2_0)）有一个明显的低谷，随后恢复，然后是一个更加尖锐和更低的低谷，并带有部分恢复。这是第二常见的读数类型。
- en: '![ECG 5000 Class 2.0](assets/hulp_1306.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![ECG 5000 第二类 2.0](assets/hulp_1306.png)'
- en: Figure 13-6\. ECG5000 class 2.0
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-6\. ECG5000 第二类 2.0
- en: Class 3 ([Figure 13-7](#ecg_5000_class_3_0)) has a sharp trough followed by
    a recovery and then an even sharper and lower trough with no recovery. There are
    a few examples of these in the dataset.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 第三类（[图 13-7](#ecg_5000_class_3_0)）有一个明显的低谷，随后恢复，然后是一个更加尖锐和更低的低谷，并没有恢复。数据集中有一些这样的例子。
- en: '![ECG 5000 Class 3.0](assets/hulp_1307.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![ECG 5000 第三类 3.0](assets/hulp_1307.png)'
- en: Figure 13-7\. ECG5000 class 3.0
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-7\. ECG5000 第三类 3.0
- en: Class 4 ([Figure 13-8](#ecg_5000_class_4_0)) has a sharp trough followed by
    a recovery and then a shallow trough and stabilization. There are a few examples
    of these in the dataset.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第四类（[图 13-8](#ecg_5000_class_4_0)）有一个明显的低谷，随后恢复，然后是一个较浅的低谷和稳定。数据集中有一些这样的例子。
- en: '![ECG 5000 Class 4.0](assets/hulp_1308.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Figure 13-8\. ECG5000 class 4.0
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Class 5 ([Figure 13-9](#ecg_5000_class_5_0)) has a sharp trough followed by
    an uneven recovery, a peak, and then an unsteady decline to a shallow trough.
    There are very few examples of these in the dataset.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![ECG 5000 Class 5.0](assets/hulp_1309.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: Figure 13-9\. ECG5000 class 5.0
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Training and Evaluation
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As before, let’s normalize the data to have a mean of zero and standard deviation
    of one. Then, we will fit the *k*-shape algorithm, setting the number of clusters
    to five this time. Everything else remains the same:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s evaluate the results on the training set:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following code shows the adjusted Rand index on the training set. It is
    considerably stronger at 0.75:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s evaluate the results on the test set, too:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The adjusted Rand index on the test set is much higher, too. It is 0.72:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: By increasing the training set to four thousand time series (from 23), we have
    a considerably better-performing time series clustering model.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explore the predicted clusters some more to see just how homogeneous
    they are. For each predicted cluster, we will evaluate the distribution of true
    labels. If the clusters are well-defined and homogeneous, most of the readings
    in each cluster should have the same true label:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following code displays the homogeneity of the clusters:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The majority of the readings within each predicted cluster belong to just one
    true label class. This highlights just how well defined and homogeneous the *k*-shape-derived
    clusters are.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Time Series Clustering Using k-Means on ECG5000
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the sake of completeness, let’s compare the results of *k*-shape with results
    from *k*-means. We will use the *tslearn* library to perform the training and
    evaluate using the adjusted Rand index as before.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set the number of clusters as five, the number of max iterations for
    a single run as one hundred, the number of independent runs as one hundred, the
    metric distance as Euclidean, and the random state as 2019:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The *TimeSeriesKMean* algorithm runs even faster than *k*-shape using the Euclidean
    distance metric. But the results are not as good:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The adjusted Rand index on the training set is 0.506:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The adjusted Rand index on the test set is 0.486.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Time Series Clustering Using Hierarchical DBSCAN on ECG5000
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, let’s apply *hierarchical DBSCAN*, which we explored earlier in the
    book, and evaluate its performance.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'We will run *HDBSCAN* with its default parameters and evaluate performance
    using the adjusted Rand index:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The adjusted Rand index on the training set is an impressive 0.769:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The adjusted Rand index on the training set is an impressive 0.769.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s evaluate on the test set:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The adjusted Rand index on the training set is an equally impressive 0.720:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Comparing the Time Series Clustering Algorithms
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HDBSCAN and *k*-shape performed similarly well on the ECG5000 dataset, while
    *k*-means performed worse. However, we cannot draw strong conclusions by evaluating
    the performance of these three clustering algorithms on a single time series dataset.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: HDBSCAN 和 *k*-shape 在ECG5000数据集上表现相似，而 *k*-means 的表现较差。然而，仅通过评估这三种聚类算法在单个时间序列数据集上的表现，我们无法得出强有力的结论。
- en: Let’s run a larger experiment to see how these three clustering algorithms stack
    up against one another.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一个更大的实验，看看这三种聚类算法在彼此之间的表现如何。
- en: 'First, we will load all the directories and files in the UCR Time Series Classification
    folder so we can iterate through them during the experiment. There are 85 datasets
    in total:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将加载UCR时间序列分类文件夹中的所有目录和文件，以便在实验期间对它们进行迭代。总共有85个数据集：
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Next, let’s recycle the code for each of the three clustering algorithms and
    use the list of datasets we just prepared to run a full experiment. We will store
    the training and test adjusted Rand indices by dataset and measure the time it
    takes each clustering algorithm to complete the entire experiment of 85 datasets.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为三种聚类算法中的每一种重复使用代码，并使用我们刚刚准备的数据集列表来运行完整实验。我们将按数据集存储训练和测试的调整后兰德指数，并测量每种聚类算法完成85个数据集的整个实验所需的时间。
- en: Full Run with k-Shape
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: k-Shape 的完整运行
- en: The first experiment uses *k*-shape.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个实验使用了 *k*-shape。
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It takes approximately an hour to run the *k*-shape algorithm. We’ve stored
    the adjusted Rand indices and will use these to compare *k*-shape with *k*-means
    and HBDSCAN soon.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*k*-shape 算法大约需要一个小时的运行时间。我们已经存储了调整后的兰德指数，并将用这些指数来比较 *k*-shape 和 *k*-means
    以及 HDBSCAN 的表现。'
- en: Note
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The time we measured for *k*-shape is based on the hyperparameters we set for
    the experiment as well as the local hardware specifications for the machine on
    which the experiments were run. Different hyperparameters and hardware specifications
    could result in dramatically different experiment times.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 *k*-shape 的测量时间基于我们设置的实验超参数以及机器的本地硬件规格。不同的超参数和硬件规格可能导致实验时间显著不同。
- en: Full Run with k-Means
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: k-Means 的完整运行
- en: 'Next up is *k*-means:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 *k*-means：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'It takes less than five minutes for *k*-means to run through all 85 datasets:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*k*-means 在所有85个数据集上运行不到五分钟：'
- en: Full Run with HDBSCAN
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HDBSCAN 的完整运行
- en: 'Finally, we have HBDSCAN:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了 HBDSCAN：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: It takes less than 10 minutes for HBDSCAN to run through all 85 datasets.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: HBDSCAN 在所有85个数据集上运行不到10分钟。
- en: Comparing All Three Time Series Clustering Approaches
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较所有三种时间序列聚类方法
- en: Now let’s compare all three clustering algorithms to see which fared the best.
    One approach is to calculate the average adjusted Rand indices on the training
    and test sets, respectively, for each of the clustering algorithms.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们比较这三种聚类算法，看看哪一种表现最佳。一种方法是分别计算每种聚类算法在训练集和测试集上的平均调整兰德指数。
- en: 'Here are the scores for each of the algorithms:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 每种算法的得分如下：
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The results are fairly comparable, with *k*-means having the highest Rand indices,
    followed closely by *k*-shape and HDBSCAN.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 结果相当可比，*k*-means 的兰德指数最高，紧随其后的是 *k*-shape 和 HDBSCAN。
- en: 'To validate some of these findings, let’s count how many times each algorithm
    placed first, second, or third across all the 85 datasets:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证这些发现，让我们统计每种算法在所有85个数据集中分别获得第一、第二或第三名的次数：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*k*-shape had the most first place finishes, followed by HDBSCAN. *k*-means
    had the most second place finishes, performing neither the best but also not the
    worst on the majority of the datasets ([Table 13-1](#comparison_summary)).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*k*-shape 在大多数数据集上获得了最多的第一名，其次是 HDBSCAN。*k*-means 在大多数数据集上获得了第二名，表现既不是最好的也不是最差的（[表13-1](#comparison_summary)）。'
- en: Table 13-1\. Comparison summary
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 表13-1\. 比较总结
- en: '|  | kShape | kMeans | hbdscan |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '|  | kShape | kMeans | hbdscan |'
- en: '| --- | --- | --- | --- |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| firstPlace | 31.0 | 24.0 | 29.0 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| firstPlace | 31.0 | 24.0 | 29.0 |'
- en: '| secondPlace | 19.0 | 41.0 | 26.0 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| secondPlace | 19.0 | 41.0 | 26.0 |'
- en: '| thirdPlace | 35.0 | 20.0 | 30.0 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| thirdPlace | 35.0 | 20.0 | 30.0 |'
- en: Based on this comparison, it is hard to conclude that one algorithm universally
    trounces all the others. While *k*-shape has the most first place finishes, it
    is considerably slower than the other two algorithms.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些比较，很难得出一个算法能够全面击败其他算法的结论。虽然 *k*-shape 获得了最多的第一名，但它比另外两种算法慢得多。
- en: And, *k*-means and HDBSCAN both hold their own, winning first place on a healthy
    number of datasets.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，*k*-means 和 HDBSCAN 都表现出色，在大量数据集上获得了第一名。
- en: Conclusion
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we explored time series data for the first time in the book
    and demonstrated the power of unsupervised learning to group time series patterns
    based on their similarity to one another and without requiring any labels. We
    worked with three clustering algorithms in detail—*k*-shape, *k*-means, and HDBSCAN.
    While *k*-shape is regarded as the best of the bunch today, the other two algorithms
    perform quite well, too.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首次探索了时间序列数据，并展示了不需要任何标签就能根据相似性对时间序列模式进行分组的无监督学习的强大能力。我们详细讨论了三种聚类算法——*k*-shape、*k*-means和HDBSCAN。虽然*k*-shape今天被认为是最好的选择，但另外两种算法也表现不俗。
- en: Most importantly, the results from the 85 time series datasets we worked with
    highlight the importance of experimentation. As with most machine learning, no
    single algorithm trounces all other algorithms. You must constantly expand your
    breadth of knowledge and experiment to see which approaches work best for the
    problem at hand. Knowing what to apply when is the hallmark of a good data scientist.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，我们使用的85个时间序列数据集的结果突显了实验的重要性。与大多数机器学习一样，没有单一算法能够胜过所有其他算法。你必须不断扩展你的知识广度并进行实验，以找出哪种方法最适合手头的问题。知道在什么时候应用何种方法是一个优秀数据科学家的标志。
- en: Hopefully you will be better equipped to solve more of the problems you face
    going forward with the many different unsupervised learning approaches you’ve
    learned throughout this book.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 希望通过本书学习到的多种不监督学习方法，能够更好地帮助你解决未来可能遇到的各种问题。
- en: ^([1](ch13.html#idm140637524834352-marker)) The paper is publicly available
    [here](http://www.cs.columbia.edu/~jopa/kshape.html).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch13.html#idm140637524834352-marker)) 这篇论文可以在[这里](http://www.cs.columbia.edu/~jopa/kshape.html)公开获取。
- en: ^([2](ch13.html#idm140637523748448-marker)) For more on the hyperparameters,
    refer to the [official *k*-shape documentation](http://bit.ly/2Gfg0L9).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch13.html#idm140637523748448-marker)) 关于超参数的更多信息，请参考[官方*k*-shape文档](http://bit.ly/2Gfg0L9)。
- en: ^([3](ch13.html#idm140637523728768-marker)) Consult Wikipedia for more information
    on the [Rand index](https://en.wikipedia.org/wiki/Rand_index).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch13.html#idm140637523728768-marker)) 请查阅维基百科，了解更多关于[Rand指数](https://en.wikipedia.org/wiki/Rand_index)的信息。
