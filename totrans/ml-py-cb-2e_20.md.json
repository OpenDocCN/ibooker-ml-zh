["```py\n# Load library\nimport torch\n\n# Create a vector as a row\ntensor_row = torch.tensor([1, 2, 3])\n\n# Create a vector as a column\ntensor_column = torch.tensor(\n    [\n        [1],\n        [2],\n        [3]\n    ]\n)\n```", "```py\n# Import libraries\nimport numpy as np\nimport torch\n\n# Create a NumPy array\nvector_row = np.array([1, 2, 3])\n\n# Create a tensor from a NumPy array\ntensor_row = torch.from_numpy(vector_row)\n```", "```py\n# Import libraries\nimport torch\n\n# Create a tensor\ntensor = torch.tensor(\n[\n[0, 0],\n[0, 1],\n[3, 0]\n]\n)\n\n# Create a sparse tensor from a regular tensor\nsparse_tensor = tensor.to_sparse()\n```", "```py\nprint(type(tensor))\nprint(type(sparse_tensor))\n```", "```py\n<class 'torch.Tensor'>\n<class 'torch.Tensor'>\n```", "```py\n# Load library\nimport torch\n\n# Create vector tensor\nvector = torch.tensor([1, 2, 3, 4, 5, 6])\n\n# Create matrix tensor\nmatrix = torch.tensor(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n)\n\n# Select third element of vector\nvector[2]\n```", "```py\ntensor(3)\n```", "```py\n# Select second row, second column\nmatrix[1,1]\n```", "```py\ntensor(5)\n```", "```py\n# Select all elements of a vector\nvector[:]\n```", "```py\narray([1, 2, 3, 4, 5, 6])\n```", "```py\n# Select everything up to and including the third element\nvector[:3]\n```", "```py\ntensor([1, 2, 3])\n```", "```py\n# Select everything after the third element\nvector[3:]\n```", "```py\ntensor([4, 5, 6])\n```", "```py\n# Select the last element\nvector[-1]\n```", "```py\ntensor(6)\n```", "```py\n# Select the first two rows and all columns of a matrix\nmatrix[:2,:]\n```", "```py\ntensor([[1, 2, 3],\n       [4, 5, 6]])\n```", "```py\n# Select all rows and the second column\nmatrix[:,1:2]\n```", "```py\ntensor([[2],\n       [5],\n       [8]])\n```", "```py\n# Reverse the vector\nvector[::-1]\n```", "```py\nValueError: step must be greater than zero\n```", "```py\nvector.flip(dims=(-1,))\n```", "```py\ntensor([6, 5, 4, 3, 2, 1])\n```", "```py\n# Load library\nimport torch\n\n# Create a tensor\ntensor = torch.tensor([[1,2,3], [1,2,3]])\n\n# Get the shape of the tensor\ntensor.shape\n```", "```py\ntorch.Size([2, 3])\n```", "```py\n# Get the data type of items in the tensor\ntensor.dtype\n```", "```py\ntorch.int64\n```", "```py\n# Get the layout of the tensor\ntensor.layout\n```", "```py\ntorch.strided\n```", "```py\n# Get the device being used by the tensor\ntensor.device\n```", "```py\ndevice(type='cpu')\n```", "```py\n# Load library\nimport torch\n\n# Create a tensor\ntensor = torch.tensor([1, 2, 3])\n\n# Broadcast an arithmetic operation to all elements in a tensor\ntensor * 100\n```", "```py\ntensor([100, 200, 300])\n```", "```py\n# Load library\nimport torch\n\n# Create a tensor\ntorch.tensor([1,2,3])\n\n# Find the largest value\ntensor.max()\n```", "```py\ntensor(3)\n```", "```py\n# Find the smallest value\ntensor.min()\n```", "```py\ntensor(1)\n```", "```py\n# Create a multidimensional tensor\ntensor = torch.tensor([[1,2,3],[1,2,5]])\n\n# Find the largest value\ntensor.max()\n```", "```py\ntensor(5)\n```", "```py\n# Load library\nimport torch\n\n# Create 4x3 tensor\ntensor = torch.tensor([[1, 2, 3],\n                       [4, 5, 6],\n                       [7, 8, 9],\n                       [10, 11, 12]])\n\n# Reshape tensor into 2x6 tensor\ntensor.reshape(2, 6)\n```", "```py\ntensor([[ 1,  2,  3,  4,  5,  6],\n        [ 7,  8,  9, 10, 11, 12]])\n```", "```py\n# Load library\nimport torch\n\n# Create a two-dimensional tensor\ntensor = torch.tensor([[[1,2,3]]])\n\n# Transpose it\ntensor.mT\n```", "```py\ntensor([[1],\n        [2],\n        [3]])\n```", "```py\ntensor.permute(*torch.arange(tensor.ndim - 1, -1, -1))\n```", "```py\ntensor([[1],\n        [2],\n        [3]])\n```", "```py\n# Load library\nimport torch\n\n# Create tensor\ntensor = torch.tensor([[1, 2, 3],\n                       [4, 5, 6],\n                       [7, 8, 9]])\n\n# Flatten tensor\ntensor.flatten()\n```", "```py\ntensor([1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\n# Load library\nimport torch\n\n# Create one tensor\ntensor_1 = torch.tensor([1, 2, 3])\n\n# Create another tensor\ntensor_2 = torch.tensor([4, 5, 6])\n\n# Calculate the dot product of the two tensors\ntensor_1.dot(tensor_2)\n```", "```py\ntensor(32)\n```", "```py\n# Load library\nimport torch\n\n# Create one tensor\ntensor_1 = torch.tensor([1, 2, 3])\n\n# Create another tensor\ntensor_2 = torch.tensor([4, 5, 6])\n\n# Multiply the two tensors\ntensor_1 * tensor_2\n```", "```py\ntensor([ 4, 10, 18])\n```", "```py\ntensor_1+tensor_2\n```", "```py\ntensor([5, 7, 9])\n```", "```py\ntensor_1-tensor_2\n```", "```py\ntensor([-3, -3, -3])\n```", "```py\ntensor_1/tensor_2\n```", "```py\ntensor([0.2500, 0.4000, 0.5000])\n```"]