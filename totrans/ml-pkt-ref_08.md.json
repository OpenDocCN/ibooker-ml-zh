["```py\n>>> limit = 0.95\n>>> corr = agg_df.corr()\n>>> mask = np.triu(\n...     np.ones(corr.shape), k=1\n... ).astype(bool)\n>>> corr_no_diag = corr.where(mask)\n>>> coll = [\n...     c\n...     for c in corr_no_diag.columns\n...     if any(abs(corr_no_diag[c]) > threshold)\n... ]\n>>> coll\n['pclass_min', 'pclass_max', 'pclass_mean',\n 'sibsp_mean', 'parch_mean', 'fare_mean',\n 'body_max', 'body_mean', 'sex_male', 'embarked_S']\n```", "```py\n>>> rfpimp.plot_dependence_heatmap(\n...     rfpimp.feature_dependence_matrix(X_train),\n...     value_fontsize=12,\n...     label_fontsize=14,\n...     figsize=(8, 8),sn\n... )\n>>> fig = plt.gcf()\n>>> fig.savefig(\n...     \"images/mlpr_0801.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> cols_to_remove = [\n...     \"pclass\",\n...     \"sibsp\",\n...     \"parch\",\n...     \"embarked_Q\",\n... ]\n>>> rf3 = RandomForestClassifier(random_state=42)\n>>> rf3.fit(\n...     X_train[\n...         [\n...             c\n...             for c in X_train.columns\n...             if c not in cols_to_remove\n...         ]\n...     ],\n...     y_train,\n... )\n>>> rf3.score(\n...     X_test[\n...         [\n...             c\n...             for c in X_train.columns\n...             if c not in cols_to_remove\n...         ]\n...     ],\n...     y_test,\n... )\n0.7684478371501272\n\n>>> rf4 = RandomForestClassifier(random_state=42)\n>>> rf4.fit(X_train, y_train)\n>>> rf4.score(X_test, y_test)\n0.7659033078880407\n```", "```py\n>>> from sklearn import linear_model\n>>> model = linear_model.LassoLarsCV(\n...     cv=10, max_n_alphas=10\n... ).fit(X_train, y_train)\n>>> fig, ax = plt.subplots(figsize=(12, 8))\n>>> cm = iter(\n...     plt.get_cmap(\"tab20\")(\n...         np.linspace(0, 1, X.shape[1])\n...     )\n... )\n>>> for i in range(X.shape[1]):\n...     c = next(cm)\n...     ax.plot(\n...         model.alphas_,\n...         model.coef_path_.T[:, i],\n...         c=c,\n...         alpha=0.8,\n...         label=X.columns[i],\n...     )\n>>> ax.axvline(\n...     model.alpha_,\n...     linestyle=\"-\",\n...     c=\"k\",\n...     label=\"alphaCV\",\n... )\n>>> plt.ylabel(\"Regression Coefficients\")\n>>> ax.legend(X.columns, bbox_to_anchor=(1, 1))\n>>> plt.xlabel(\"alpha\")\n>>> plt.title(\n...     \"Regression Coefficients Progression for Lasso Paths\"\n... )\n>>> fig.savefig(\n...     \"images/mlpr_0802.png\",\n...     dpi=300,\n...     bbox_inches=\"tight\",\n... )\n```", "```py\n>>> from yellowbrick.features import RFECV\n>>> fig, ax = plt.subplots(figsize=(6, 4))\n>>> rfe = RFECV(\n...     ensemble.RandomForestClassifier(\n...         n_estimators=100\n...     ),\n...     cv=5,\n... )\n>>> rfe.fit(X, y)\n\n>>> rfe.rfe_estimator_.ranking_\narray([1, 1, 2, 3, 1, 1, 5, 4])\n\n>>> rfe.rfe_estimator_.n_features_\n4\n\n>>> rfe.rfe_estimator_.support_\narray([ True,  True, False, False,  True,\n True, False, False])\n\n>>> rfe.poof()\n>>> fig.savefig(\"images/mlpr_0803.png\", dpi=300)\n```", "```py\n>>> from sklearn.feature_selection import RFE\n>>> model = ensemble.RandomForestClassifier(\n...     n_estimators=100\n... )\n>>> rfe = RFE(model, 4)\n>>> rfe.fit(X, y)\n>>> agg_X.columns[rfe.support_]\nIndex(['pclass', 'age', 'fare', 'sex_male'], dtype='object')\n```", "```py\n>>> from sklearn import feature_selection\n\n>>> mic = feature_selection.mutual_info_classif(\n...     X, y\n... )\n>>> fig, ax = plt.subplots(figsize=(10, 8))\n>>> (\n...     pd.DataFrame(\n...         {\"feature\": X.columns, \"vimp\": mic}\n...     )\n...     .set_index(\"feature\")\n...     .plot.barh(ax=ax)\n... )\n>>> fig.savefig(\"images/mlpr_0804.png\")\n```"]