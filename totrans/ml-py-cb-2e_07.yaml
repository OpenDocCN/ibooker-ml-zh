- en: Chapter 7\. Handling Dates and Times
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 处理日期和时间
- en: 7.0 Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.0 引言
- en: Dates and times (datetimes), such as the time of a particular sale or the date
    of a public health statistic, are frequently encountered during preprocessing
    for machine learning. *Longitudinal data* (or *time series data*) is data that’s
    collected repeatedly for the same variables over points in time. In this chapter,
    we will build a toolbox of strategies for handling time series data, including
    tackling time zones and creating lagged time features. Specifically, we will focus
    on the time series tools in the pandas library, which centralizes the functionality
    of many other general libraries such as `datetime`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 处理日期和时间（datetime），例如特定销售的时间或公共卫生统计的日期，在机器学习预处理中经常遇到。*纵向数据*（或*时间序列数据*）是重复收集同一变量的数据，随时间点变化。在本章中，我们将构建处理时间序列数据的策略工具箱，包括处理时区和创建滞后时间特征。具体来说，我们将关注
    pandas 库中的时间序列工具，该工具集集中了许多其他通用库（如 `datetime`）的功能。
- en: 7.1 Converting Strings to Dates
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.1 字符串转换为日期
- en: Problem
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Given a vector of strings representing dates and times, you want to transform
    them into time series data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个表示日期和时间的字符串向量，你想要将它们转换为时间序列数据。
- en: Solution
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use pandas’ `to_datetime` with the format of the date and/or time specified
    in the `format` parameter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pandas 的 `to_datetime`，并指定日期和/或时间的格式在 `format` 参数中：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We might also want to add an argument to the `errors` parameter to handle problems:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可能想要向 `errors` 参数添加一个参数来处理问题：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If `errors="coerce"`, then any problem that occurs will not raise an error (the
    default behavior) but instead will set the value causing the error to `NaT` (a
    missing value). This allows you to deal with outliers by filling them with null
    values, as opposed to troubleshooting errors for individual records in the data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `errors="coerce"`，则任何发生的问题不会引发错误（默认行为），而是将导致错误的值设置为 `NaT`（缺失值）。这允许你通过将其填充为
    null 值来处理异常值，而不是为数据中的每个记录进行故障排除。
- en: Discussion
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'When dates and times come as strings, we need to convert them into a data type
    Python can understand. While there are a number of Python tools for converting
    strings to datetimes, following our use of pandas in other recipes we can use
    `to_datetime` to conduct the transformation. One obstacle to using strings to
    represent dates and times is that the format of the strings can vary significantly
    between data sources. For example, one vector of dates might represent March 23,
    2015 as “03-23-15” while another might use “3|23|2015”. We can use the `format`
    parameter to specify the exact format of the string. Here are some common date
    and time formatting codes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当日期和时间以字符串形式提供时，我们需要将它们转换为 Python 能够理解的数据类型。虽然有许多用于将字符串转换为日期时间的 Python 工具，但在其他示例中使用
    pandas 后，我们可以使用 `to_datetime` 进行转换。使用字符串表示日期和时间的一个障碍是，字符串的格式在数据源之间可能有很大的变化。例如，一个日期向量可能将
    2015 年 3 月 23 日表示为“03-23-15”，而另一个可能使用“3|23|2015”。我们可以使用 `format` 参数来指定字符串的确切格式。以下是一些常见的日期和时间格式代码：
- en: '| Code | Description | Example |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `%Y` | Full year | `2001` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `%Y` | 完整年份 | `2001` |'
- en: '| `%m` | Month w/ zero padding | `04` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `%m` | 带零填充的月份 | `04` |'
- en: '| `%d` | Day of the month w/ zero padding | `09` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | 带零填充的日期 | `09` |'
- en: '| `%I` | Hour (12hr clock) w/ zero padding | `02` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `%I` | 带零填充的小时（12小时制） | `02` |'
- en: '| `%p` | AM or PM | `AM` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `%p` | 上午或下午 | `AM` |'
- en: '| `%M` | Minute w/ zero padding | `05` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `%M` | 带零填充的分钟数 | `05` |'
- en: '| `%S` | Second w/ zero padding | `09` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `%S` | 带零填充的秒数 | `09` |'
- en: See Also
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Python strftime Cheatsheet (complete list of Python string time codes)](https://oreil.ly/4-tN6)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python strftime 速查表（Python 字符串时间代码的完整列表）](https://oreil.ly/4-tN6)'
- en: 7.2 Handling Time Zones
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.2 处理时区
- en: Problem
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have time series data and want to add or change time zone information.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你有时间序列数据，想要添加或更改时区信息。
- en: Solution
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Unless specified, pandas objects have no time zone. We can add a time zone
    using `tz` during creation:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除非指定，否则 pandas 对象没有时区。我们可以在创建时使用 `tz` 添加时区：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can add a time zone to a previously created datetime using `tz_localize`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `tz_localize` 为先前创建的日期时间添加时区：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We also can convert to a different time zone:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以转换为不同的时区：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, the pandas `Series` objects can apply `tz_localize` and `tz_convert`
    to every element:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，pandas 的 `Series` 对象可以对每个元素应用 `tz_localize` 和 `tz_convert`：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Discussion
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'pandas supports two sets of strings representing timezones; however, I suggest
    using the `pytz` library strings. We can see all the strings used to represent
    time zones by importing `all_timezones`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: pandas支持两组表示时区的字符串；然而，建议使用`pytz`库的字符串。我们可以通过导入`all_timezones`查看表示时区的所有字符串：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 7.3 Selecting Dates and Times
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.3 选择日期和时间
- en: Problem
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a vector of dates and you want to select one or more.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一个日期向量，想要选择一个或多个。
- en: Solution
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use two boolean conditions as the start and end dates:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个布尔条件作为开始和结束日期：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|  | date |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|  | 日期 |'
- en: '| --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 8762 | 2002-01-01 02:00:00 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 8762 | 2002-01-01 02:00:00 |'
- en: '| 8763 | 2002-01-01 03:00:00 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 8763 | 2002-01-01 03:00:00 |'
- en: '| 8764 | 2002-01-01 04:00:00 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 8764 | 2002-01-01 04:00:00 |'
- en: 'Alternatively, we can set the date column as the DataFrame’s index and then
    slice using `loc`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以将日期列设置为DataFrame的索引，然后使用`loc`进行切片：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| date | date |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 日期 |'
- en: '| --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2002-01-01 01:00:00 | 2002-01-01 01:00:00 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 2002-01-01 01:00:00 | 2002-01-01 01:00:00 |'
- en: '| 2002-01-01 02:00:00 | 2002-01-01 02:00:00 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 2002-01-01 02:00:00 | 2002-01-01 02:00:00 |'
- en: '| 2002-01-01 03:00:00 | 2002-01-01 03:00:00 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 2002-01-01 03:00:00 | 2002-01-01 03:00:00 |'
- en: '| 2002-01-01 04:00:00 | 2002-01-01 04:00:00 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 2002-01-01 04:00:00 | 2002-01-01 04:00:00 |'
- en: Discussion
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Whether we use boolean conditions or index slicing is situation dependent. If
    we wanted to do some complex time series manipulation, it might be worth the overhead
    of setting the date column as the index of the DataFrame, but if we wanted to
    do some simple data wrangling, the boolean conditions might be easier.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 是否使用布尔条件或索引切片取决于具体情况。如果我们想要进行一些复杂的时间序列操作，将日期列设置为DataFrame的索引可能值得开销，但如果我们只想进行简单的数据处理，布尔条件可能更容易。
- en: 7.4 Breaking Up Date Data into Multiple Features
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.4 将日期数据拆分为多个特征
- en: Problem
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a column of dates and times and you want to create features for year,
    month, day, hour, and minute.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一个包含日期和时间的列，并且希望创建年、月、日、小时和分钟的特征。
- en: Solution
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the time properties in pandas `Series.dt`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas `Series.dt`中的时间属性：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|  | date | year | month | day | hour | minute |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|  | 日期 | 年 | 月 | 日 | 小时 | 分钟 |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 2001-01-07 | 2001 | 1 | 7 | 0 | 0 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2001-01-07 | 2001 | 1 | 7 | 0 | 0 |'
- en: '| 1 | 2001-01-14 | 2001 | 1 | 14 | 0 | 0 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2001-01-14 | 2001 | 1 | 14 | 0 | 0 |'
- en: '| 2 | 2001-01-21 | 2001 | 1 | 21 | 0 | 0 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 2001-01-21 | 2001 | 1 | 21 | 0 | 0 |'
- en: Discussion
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Sometimes it can be useful to break up a column of dates into components. For
    example, we might want a feature that includes just the year of the observation
    or we might want to consider only the month of some observations so we can compare
    them regardless of year.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有时将日期列分解为各个组成部分会很有用。例如，我们可能希望有一个特征仅包括观察年份，或者我们可能只想考虑某些观测的月份，以便无论年份如何都可以比较它们。
- en: 7.5 Calculating the Difference Between Dates
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.5 计算日期之间的差异
- en: Problem
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have two datetime features and want to calculate the time between them for
    each observation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您有两个日期时间特征，想要计算每个观测值之间的时间间隔。
- en: Solution
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Subtract the two date features using pandas:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas减去两个日期特征：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Often we will want to remove the `days` output and keep only the numerical
    value:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常希望删除`days`的输出，仅保留数值：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Discussion
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: There are times when the feature we want is the change (delta) between two points
    in time. For example, we might have the dates a customer checks in and checks
    out of a hotel, but the feature we want is the duration of the customer’s stay.
    pandas makes this calculation easy using the `TimeDelta` data type.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要的特征是两个时间点之间的变化（delta）。例如，我们可能有客户入住和退房的日期，但我们想要的特征是客户住店的持续时间。pandas使用`TimeDelta`数据类型使得这种计算变得简单。
- en: See Also
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[pandas documentation: Time Deltas](https://oreil.ly/fbgp-)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pandas文档：时间差](https://oreil.ly/fbgp-)'
- en: 7.6 Encoding Days of the Week
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.6 编码星期几
- en: Problem
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a vector of dates and want to know the day of the week for each date.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一个日期向量，想知道每个日期的星期几。
- en: Solution
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the pandas `Series.dt` method `day_name()`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas `Series.dt`方法的`day_name()`：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we want the output to be a numerical value and therefore more usable as
    a machine learning feature, we can use `weekday` where the days of the week are
    represented as integers (Monday is 0):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望输出为数值形式，因此更适合作为机器学习特征使用，可以使用`weekday`，其中星期几表示为整数（星期一为0）。
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Discussion
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Knowing the weekday can be helpful if, for instance, we wanted to compare total
    sales on Sundays for the past three years. pandas makes creating a feature vector
    containing weekday information easy.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要比较过去三年每个星期日的总销售额，知道星期几可能很有帮助。pandas使得创建包含星期信息的特征向量变得很容易。
- en: See Also
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[pandas Series datetimelike properties](https://oreil.ly/3Au86)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pandas Series日期时间特性](https://oreil.ly/3Au86)'
- en: 7.7 Creating a Lagged Feature
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.7 创建滞后特征
- en: Problem
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a feature that is lagged *n* time periods.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要创建一个滞后*n*个时间段的特征。
- en: Solution
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the pandas `shift` method:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas的`shift`方法：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|  | dates | stock_price | previous_days_stock_price |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '|  | 日期 | 股票价格 | 前几天的股票价格 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 0 | 2001-01-01 | 1.1 | NaN |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2001-01-01 | 1.1 | NaN |'
- en: '| 1 | 2001-01-02 | 2.2 | 1.1 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2001-01-02 | 2.2 | 1.1 |'
- en: '| 2 | 2001-01-03 | 3.3 | 2.2 |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 2001-01-03 | 3.3 | 2.2 |'
- en: '| 3 | 2001-01-04 | 4.4 | 3.3 |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 2001-01-04 | 4.4 | 3.3 |'
- en: '| 4 | 2001-01-05 | 5.5 | 4.4 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 2001-01-05 | 5.5 | 4.4 |'
- en: Discussion
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Very often data is based on regularly spaced time periods (e.g., every day,
    every hour, every three hours) and we are interested in using values in the past
    to make predictions (often called *lagging* a feature). For example, we might
    want to predict a stock’s price using the price it was the day before. With pandas
    we can use `shift` to lag values by one row, creating a new feature containing
    past values.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 数据往往基于定期间隔的时间段（例如每天、每小时、每三小时），我们有兴趣使用过去的值来进行预测（通常称为*滞后*一个特征）。例如，我们可能想要使用前一天的价格来预测股票的价格。使用pandas，我们可以使用`shift`将值按一行滞后，创建一个包含过去值的新特征。
- en: In our solution, the first row for `previous_days_stock_price` is a missing
    value because there is no previous `stock_price` value.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的解决方案中，`previous_days_stock_price`的第一行是一个缺失值，因为没有先前的`stock_price`值。
- en: 7.8 Using Rolling Time Windows
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.8 使用滚动时间窗口
- en: Problem
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Given time series data, you want to calculate a statistic for a rolling time.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 给定时间序列数据，你想要计算一个滚动时间的统计量。
- en: Solution
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the pandas DataFrame `rolling` method:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas DataFrame `rolling`方法：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|  | Stock_Price |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '|  | 股票价格 |'
- en: '| --- | --- |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2010-01-31 | NaN |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 2010-01-31 | NaN |'
- en: '| 2010-02-28 | 1.5 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 2010-02-28 | 1.5 |'
- en: '| 2010-03-31 | 2.5 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 2010-03-31 | 2.5 |'
- en: '| 2010-04-30 | 3.5 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 2010-04-30 | 3.5 |'
- en: '| 2010-05-31 | 4.5 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 2010-05-31 | 4.5 |'
- en: Discussion
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '*Rolling* (also called *moving*) *time windows* are conceptually simple but
    can be difficult to understand at first. Imagine we have monthly observations
    for a stock’s price. It is often useful to have a time window of a certain number
    of months and then move over the observations calculating a statistic for all
    observations in the time window.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*滚动*（也称为*移动*）*时间窗口*在概念上很简单，但一开始可能难以理解。假设我们有一个股票价格的月度观察数据。经常有用的是设定一个特定月数的时间窗口，然后在观察数据上移动，计算时间窗口内所有观察数据的统计量。'
- en: 'For example, if we have a time window of three months and we want a rolling
    mean, we would calculate:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个三个月的时间窗口，并且想要一个滚动均值，我们可以计算：
- en: '`mean(January, February, March)`'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mean(一月, 二月, 三月)`'
- en: '`mean(February, March, April)`'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mean(二月, 三月, 四月)`'
- en: '`mean(March, April, May)`'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mean(三月, 四月, 五月)`'
- en: etc.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等等
- en: 'Another way to put it: our three-month time window “walks” over the observations,
    calculating the window’s mean at each step.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种表达方式：我们的三个月时间窗口“漫步”过观测值，在每一步计算窗口的平均值。
- en: The pandas `rolling` method allows us to specify the size of the window by using
    `window` and then quickly calculate some common statistics, including the max
    value (`max()`), mean value (`mean()`), count of values (`count()`), and rolling
    correlation (`corr()`).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: pandas的`rolling`方法允许我们通过使用`window`指定窗口大小，然后快速计算一些常见统计量，包括最大值（`max()`）、均值（`mean()`）、值的数量（`count()`）和滚动相关性（`corr()`）。
- en: Rolling means are often used to smooth time series data because using the mean
    of the entire time window dampens the effect of short-term fluctuations.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动均值通常用于平滑时间序列数据，因为使用整个时间窗口的均值可以抑制短期波动的影响。
- en: See Also
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[pandas documentation: Rolling Windows](https://oreil.ly/a5gZQ)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pandas文档：滚动窗口](https://oreil.ly/a5gZQ)'
- en: '[What Are Moving Average or Smoothing Techniques?](https://oreil.ly/aoOSe)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是移动平均或平滑技术？](https://oreil.ly/aoOSe)'
- en: 7.9 Handling Missing Data in Time Series
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.9 处理时间序列中的缺失数据
- en: Problem
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have missing values in time series data.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你在时间序列数据中有缺失值。
- en: Solution
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'In addition to the missing data strategies previously discussed, when we have
    time series data we can use interpolation to fill gaps caused by missing values:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面讨论的缺失数据策略之外，当我们有时间序列数据时，我们可以使用插值来填补由缺失值引起的间隙：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|  | Sales |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '|  | 销售 |'
- en: '| --- | --- |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2010-01-31 | 1.0 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 2010-01-31 | 1.0 |'
- en: '| 2010-02-28 | 2.0 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 2010-02-28 | 2.0 |'
- en: '| 2010-03-31 | 3.0 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 2010-03-31 | 3.0 |'
- en: '| 2010-04-30 | 4.0 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 2010-04-30 | 4.0 |'
- en: '| 2010-05-31 | 5.0 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 2010-05-31 | 5.0 |'
- en: 'Alternatively, we can replace missing values with the last known value (i.e.,
    forward filling):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以用最后一个已知值替换缺失值（即向前填充）：
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|  | Sales |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '|  | 销售 |'
- en: '| --- | --- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2010-01-31 | 1.0 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 2010-01-31 | 1.0 |'
- en: '| 2010-02-28 | 2.0 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 2010-02-28 | 2.0 |'
- en: '| 2010-03-31 | 2.0 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 2010-03-31 | 2.0 |'
- en: '| 2010-04-30 | 2.0 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 2010-04-30 | 2.0 |'
- en: '| 2010-05-31 | 5.0 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 2010-05-31 | 5.0 |'
- en: 'We can also replace missing values with the latest known value (i.e., backfilling):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以用最新的已知值替换缺失值（即向后填充）：
- en: '[PRE29]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|  | Sales |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '|  | 销售 |'
- en: '| --- | --- |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2010-01-31 | 1.0 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 2010-01-31 | 1.0 |'
- en: '| 2010-02-28 | 2.0 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 2010-02-28 | 2.0 |'
- en: '| 2010-03-31 | 5.0 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 2010-03-31 | 5.0 |'
- en: '| 2010-04-30 | 5.0 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 2010-04-30 | 5.0 |'
- en: '| 2010-05-31 | 5.0 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 2010-05-31 | 5.0 |'
- en: Discussion
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '*Interpolation* is a technique for filling gaps caused by missing values by,
    in effect, drawing a line or curve between the known values bordering the gap
    and using that line or curve to predict reasonable values. Interpolation can be
    particularly useful when the time intervals are constant, the data is not prone
    to noisy fluctuations, and the gaps caused by missing values are small. For example,
    in our solution, a gap of two missing values was bordered by `2.0` and `5.0`.
    By fitting a line starting at `2.0` and ending at `5.0`, we can make reasonable
    guesses for the two missing values between `3.0` and `4.0`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*插值*是一种填补由缺失值引起的间隙的技术，实质上是在已知值之间绘制一条直线或曲线，并使用该线或曲线来预测合理的值。当时间间隔恒定、数据不易受到嘈杂波动影响、缺失值引起的间隙较小时，插值尤为有用。例如，在我们的解决方案中，两个缺失值之间的间隙由
    `2.0` 和 `5.0` 所界定。通过在 `2.0` 和 `5.0` 之间拟合一条直线，我们可以推测出 `3.0` 到 `4.0` 之间的两个缺失值的合理值。'
- en: 'If we believe the line between the two known points is nonlinear, we can use
    `interpolate`’s `method` parameter to specify the interpolation method:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们认为两个已知点之间的线是非线性的，我们可以使用 `interpolate` 的 `method` 参数来指定插值方法：
- en: '[PRE30]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|  | Sales |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '|  | 销售 |'
- en: '| --- | --- |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2010-01-31 | 1.000000 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 2010-01-31 | 1.000000 |'
- en: '| 2010-02-28 | 2.000000 |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 2010-02-28 | 2.000000 |'
- en: '| 2010-03-31 | 3.059808 |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 2010-03-31 | 3.059808 |'
- en: '| 2010-04-30 | 4.038069 |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 2010-04-30 | 4.038069 |'
- en: '| 2010-05-31 | 5.000000 |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 2010-05-31 | 5.000000 |'
- en: 'Finally, we may have large gaps of missing values but do not want to interpolate
    values across the entire gap. In these cases we can use `limit` to restrict the
    number of interpolated values and `limit_direction` to set whether to interpolate
    values forward from the last known value before the gap or vice versa:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可能有大量的缺失值间隙，但不希望在整个间隙内插值。在这些情况下，我们可以使用 `limit` 限制插值值的数量，并使用 `limit_direction`
    来设置是从间隙前的最后已知值向前插值，还是反之：
- en: '[PRE31]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|  | Sales |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '|  | 销售 |'
- en: '| --- | --- |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2010-01-31 | 1.0 |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 2010-01-31 | 1.0 |'
- en: '| 2010-02-28 | 2.0 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 2010-02-28 | 2.0 |'
- en: '| 2010-03-31 | 3.0 |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 2010-03-31 | 3.0 |'
- en: '| 2010-04-30 | NaN |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 2010-04-30 | NaN |'
- en: '| 2010-05-31 | 5.0 |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 2010-05-31 | 5.0 |'
- en: Backfilling and forward filling are forms of naive interpolation, where we draw
    a flat line from a known value and use it to fill in missing values. One (minor)
    advantage back filling and forward filling have over interpolation is that they
    don’t require known values on *both* sides of missing values.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 向后填充和向前填充是一种朴素插值的形式，其中我们从已知值开始绘制一条平直线，并用它来填充缺失值。与插值相比，向后填充和向前填充的一个（轻微）优势在于它们不需要在缺失值的*两侧*都有已知值。
