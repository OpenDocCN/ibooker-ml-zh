["```py\n# Load libraries\nimport numpy as np\nimport pandas as pd\n\n# Create strings\ndate_strings = np.array(['03-04-2005 11:35 PM',\n                         '23-05-2010 12:01 AM',\n                         '04-09-2009 09:09 PM'])\n\n# Convert to datetimes\n[pd.to_datetime(date, format='%d-%m-%Y %I:%M %p') for date in date_strings]\n```", "```py\n[Timestamp('2005-04-03 23:35:00'),\n Timestamp('2010-05-23 00:01:00'),\n Timestamp('2009-09-04 21:09:00')]\n```", "```py\n# Convert to datetimes\n[pd.to_datetime(date, format=\"%d-%m-%Y %I:%M %p\", errors=\"coerce\")\nfor date in date_strings]\n```", "```py\n[Timestamp('2005-04-03 23:35:00'),\n Timestamp('2010-05-23 00:01:00'),\n Timestamp('2009-09-04 21:09:00')]\n```", "```py\n# Load library\nimport pandas as pd\n\n# Create datetime\npd.Timestamp('2017-05-01 06:00:00', tz='Europe/London')\n```", "```py\nTimestamp('2017-05-01 06:00:00+0100', tz='Europe/London')\n```", "```py\n# Create datetime\ndate = pd.Timestamp('2017-05-01 06:00:00')\n\n# Set time zone\ndate_in_london = date.tz_localize('Europe/London')\n\n# Show datetime\ndate_in_london\n```", "```py\nTimestamp('2017-05-01 06:00:00+0100', tz='Europe/London')\n```", "```py\n# Change time zone\ndate_in_london.tz_convert('Africa/Abidjan')\n```", "```py\nTimestamp('2017-05-01 05:00:00+0000', tz='Africa/Abidjan')\n```", "```py\n# Create three dates\ndates = pd.Series(pd.date_range('2/2/2002', periods=3, freq='M'))\n\n# Set time zone\ndates.dt.tz_localize('Africa/Abidjan')\n```", "```py\n0   2002-02-28 00:00:00+00:00\n1   2002-03-31 00:00:00+00:00\n2   2002-04-30 00:00:00+00:00\ndtype: datetime64[ns, Africa/Abidjan]\n```", "```py\n# Load library\nfrom pytz import all_timezones\n\n# Show two time zones\nall_timezones[0:2]\n```", "```py\n['Africa/Abidjan', 'Africa/Accra']\n```", "```py\n# Load library\nimport pandas as pd\n\n# Create data frame\ndataframe = pd.DataFrame()\n\n# Create datetimes\ndataframe['date'] = pd.date_range('1/1/2001', periods=100000, freq='H')\n\n# Select observations between two datetimes\ndataframe[(dataframe['date'] > '2002-1-1 01:00:00') &\n          (dataframe['date'] <= '2002-1-1 04:00:00')]\n```", "```py\n# Set index\ndataframe = dataframe.set_index(dataframe['date'])\n\n# Select observations between two datetimes\ndataframe.loc['2002-1-1 01:00:00':'2002-1-1 04:00:00']\n```", "```py\n# Load library\nimport pandas as pd\n\n# Create data frame\ndataframe = pd.DataFrame()\n\n# Create five dates\ndataframe['date'] = pd.date_range('1/1/2001', periods=150, freq='W')\n\n# Create features for year, month, day, hour, and minute\ndataframe['year'] = dataframe['date'].dt.year\ndataframe['month'] = dataframe['date'].dt.month\ndataframe['day'] = dataframe['date'].dt.day\ndataframe['hour'] = dataframe['date'].dt.hour\ndataframe['minute'] = dataframe['date'].dt.minute\n\n# Show three rows\ndataframe.head(3)\n```", "```py\n# Load library\nimport pandas as pd\n\n# Create data frame\ndataframe = pd.DataFrame()\n\n# Create two datetime features\ndataframe['Arrived'] = [pd.Timestamp('01-01-2017'), pd.Timestamp('01-04-2017')]\ndataframe['Left'] = [pd.Timestamp('01-01-2017'), pd.Timestamp('01-06-2017')]\n\n# Calculate duration between features\ndataframe['Left'] - dataframe['Arrived']\n```", "```py\n0   0 days\n1   2 days\ndtype: timedelta64[ns]\n```", "```py\n# Calculate duration between features\npd.Series(delta.days for delta in (dataframe['Left'] - dataframe['Arrived']))\n```", "```py\n0    0\n1    2\ndtype: int64\n```", "```py\n# Load library\nimport pandas as pd\n\n# Create dates\ndates = pd.Series(pd.date_range(\"2/2/2002\", periods=3, freq=\"M\"))\n\n# Show days of the week\ndates.dt.day_name()\n```", "```py\n0    Thursday\n1      Sunday\n2     Tuesday\ndtype: object\n```", "```py\n# Show days of the week\ndates.dt.weekday\n```", "```py\n0    3\n1    6\n2    1\ndtype: int64\n```", "```py\n# Load library\nimport pandas as pd\n\n# Create data frame\ndataframe = pd.DataFrame()\n\n# Create data\ndataframe[\"dates\"] = pd.date_range(\"1/1/2001\", periods=5, freq=\"D\")\ndataframe[\"stock_price\"] = [1.1,2.2,3.3,4.4,5.5]\n\n# Lagged values by one row\ndataframe[\"previous_days_stock_price\"] = dataframe[\"stock_price\"].shift(1)\n\n# Show data frame\ndataframe\n```", "```py\n# Load library\nimport pandas as pd\n\n# Create datetimes\ntime_index = pd.date_range(\"01/01/2010\", periods=5, freq=\"M\")\n\n# Create data frame, set index\ndataframe = pd.DataFrame(index=time_index)\n\n# Create feature\ndataframe[\"Stock_Price\"] = [1,2,3,4,5]\n\n# Calculate rolling mean\ndataframe.rolling(window=2).mean()\n```", "```py\n# Load libraries\nimport pandas as pd\nimport numpy as np\n\n# Create date\ntime_index = pd.date_range(\"01/01/2010\", periods=5, freq=\"M\")\n\n# Create data frame, set index\ndataframe = pd.DataFrame(index=time_index)\n\n# Create feature with a gap of missing values\ndataframe[\"Sales\"] = [1.0,2.0,np.nan,np.nan,5.0]\n\n# Interpolate missing values\ndataframe.interpolate()\n```", "```py\n# Forward fill\ndataframe.ffill()\n```", "```py\n# Backfill\ndataframe.bfill()\n```", "```py\n# Interpolate missing values\ndataframe.interpolate(method=\"quadratic\")\n```", "```py\n# Interpolate missing values\ndataframe.interpolate(limit=1, limit_direction=\"forward\")\n```"]