- en: Chapter 5\. Cleaning Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 清理数据
- en: We can use generic tools like pandas and specialized tools like pyjanitor to
    help with cleaning data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用通用工具如 pandas 和专业工具如 pyjanitor 来帮助清理数据。
- en: Column Names
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列名
- en: 'When using pandas, having Python-friendly column names makes attribute access
    possible. The pyjanitor `clean_names` function will return a DataFrame with columns
    in lowercase and spaces replaced by underscores:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 pandas 时，使用 Python 友好的列名可以进行属性访问。pyjanitor 的 `clean_names` 函数将返回一个列名为小写并用下划线替换空格的
    DataFrame：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: I recommend updating columns using index assignment, the `.assign` method, `.loc`
    or `.iloc` assignment. I also recommend not using attribute assignment to update
    columns in pandas. Due to the risk of overwriting existing methods with the same
    name as a column, attribute assignment is not guaranteed to work.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议使用索引赋值、`.assign` 方法、`.loc` 或 `.iloc` 赋值来更新列。我还建议不要使用属性赋值来更新 pandas 中的列。由于可能会覆盖同名列的现有方法，属性赋值不能保证可靠地工作。
- en: 'The pyjanitor library is handy, but doesn’t allow us to strip whitespace around
    columns. We can use pandas to have more fine-grained control of the column renaming:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: pyjanitor 库很方便，但不能去除列周围的空白。我们可以使用 pandas 更精细地控制列的重命名：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Replacing Missing Values
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换缺失值
- en: 'The `coalesce` function in pyjanitor takes a DataFrame and a list of columns
    to consider. This is similar to functionality found in Excel and SQL databases.
    It returns the first nonnull value for each row:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: pyjanitor 中的 `coalesce` 函数接受一个 DataFrame 和一个要考虑的列列表。这类似于 Excel 和 SQL 数据库中的功能。它返回每行的第一个非空值：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we want to fill missing values with a particular value, we can use the DataFrame
    `.fillna` method:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要用特定值填充缺失值，可以使用 DataFrame 的 `.fillna` 方法：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'or the pyjanitor `fill_empty` function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 或者 pyjanitor 的 `fill_empty` 函数：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Often, we will use finer-grained imputations in pandas, scikit-learn, or fancyimpute
    to perform per-column null replacement.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 经常情况下，我们会使用更精细的方法在 pandas、scikit-learn 或 fancyimpute 中执行每列的空值替换。
- en: 'As a sanity check before creating models, you can use pandas to ensure that
    you have dealt with all missing values. The following code returns a single boolean
    if there is any cell that is missing in a DataFrame:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建模型之前，可以使用 pandas 来进行健全性检查，确保处理了所有的缺失值。以下代码在 DataFrame 中返回一个布尔值，用于检查是否有任何缺失的单元格：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
