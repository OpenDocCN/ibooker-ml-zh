- en: Chapter 5\. Cleaning Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use generic tools like pandas and specialized tools like pyjanitor to
    help with cleaning data.
  prefs: []
  type: TYPE_NORMAL
- en: Column Names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using pandas, having Python-friendly column names makes attribute access
    possible. The pyjanitor `clean_names` function will return a DataFrame with columns
    in lowercase and spaces replaced by underscores:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: I recommend updating columns using index assignment, the `.assign` method, `.loc`
    or `.iloc` assignment. I also recommend not using attribute assignment to update
    columns in pandas. Due to the risk of overwriting existing methods with the same
    name as a column, attribute assignment is not guaranteed to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pyjanitor library is handy, but doesnâ€™t allow us to strip whitespace around
    columns. We can use pandas to have more fine-grained control of the column renaming:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Replacing Missing Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `coalesce` function in pyjanitor takes a DataFrame and a list of columns
    to consider. This is similar to functionality found in Excel and SQL databases.
    It returns the first nonnull value for each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to fill missing values with a particular value, we can use the DataFrame
    `.fillna` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'or the pyjanitor `fill_empty` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Often, we will use finer-grained imputations in pandas, scikit-learn, or fancyimpute
    to perform per-column null replacement.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a sanity check before creating models, you can use pandas to ensure that
    you have dealt with all missing values. The following code returns a single boolean
    if there is any cell that is missing in a DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
