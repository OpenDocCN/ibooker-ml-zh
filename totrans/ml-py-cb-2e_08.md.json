["```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image as grayscale\nimage = cv2.imread(\"images/plane.jpg\", cv2.IMREAD_GRAYSCALE)\n```", "```py\n# Show image\nplt.imshow(image, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Show data type\ntype(image)\n```", "```py\nnumpy.ndarray\n```", "```py\n# Show image data\nimage\n```", "```py\narray([[140, 136, 146, ..., 132, 139, 134],\n       [144, 136, 149, ..., 142, 124, 126],\n       [152, 139, 144, ..., 121, 127, 134],\n       ...,\n       [156, 146, 144, ..., 157, 154, 151],\n       [146, 150, 147, ..., 156, 158, 157],\n       [143, 138, 147, ..., 156, 157, 157]], dtype=uint8)\n```", "```py\n# Show dimensions\nimage.shape\n```", "```py\n(2270, 3600)\n```", "```py\n# Show first pixel\nimage[0,0]\n```", "```py\n140\n```", "```py\n# Load image in color\nimage_bgr = cv2.imread(\"images/plane.jpg\", cv2.IMREAD_COLOR)\n\n# Show pixel\nimage_bgr[0,0]\n```", "```py\narray([195, 144, 111], dtype=uint8)\n```", "```py\n# Convert to RGB\nimage_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)\n\n# Show image\nplt.imshow(image_rgb), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image as grayscale\nimage = cv2.imread(\"images/plane.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Save image\ncv2.imwrite(\"images/plane_new.jpg\", image)\n```", "```py\nTrue\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image as grayscale\nimage = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Resize image to 50 pixels by 50 pixels\nimage_50x50 = cv2.resize(image, (50, 50))\n\n# View image\nplt.imshow(image_50x50, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image in grayscale\nimage = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Select first half of the columns and all rows\nimage_cropped = image[:,:128]\n\n# Show image\nplt.imshow(image_cropped, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image as grayscale\nimage = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Blur image\nimage_blurry = cv2.blur(image, (5,5))\n\n# Show image\nplt.imshow(image_blurry, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Blur image\nimage_very_blurry = cv2.blur(image, (100,100))\n\n# Show image\nplt.imshow(image_very_blurry, cmap=\"gray\"), plt.xticks([]), plt.yticks([])\nplt.show()\n```", "```py\n# Create kernel\nkernel = np.ones((5,5)) / 25.0\n\n# Show kernel\nkernel\n```", "```py\narray([[ 0.04,  0.04,  0.04,  0.04,  0.04],\n       [ 0.04,  0.04,  0.04,  0.04,  0.04],\n       [ 0.04,  0.04,  0.04,  0.04,  0.04],\n       [ 0.04,  0.04,  0.04,  0.04,  0.04],\n       [ 0.04,  0.04,  0.04,  0.04,  0.04]])\n```", "```py\n# Apply kernel\nimage_kernel = cv2.filter2D(image, -1, kernel)\n\n# Show image\nplt.imshow(image_kernel, cmap=\"gray\"), plt.xticks([]), plt.yticks([])\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image as grayscale\nimage = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Create kernel\nkernel = np.array([[0, -1, 0],\n                   [-1, 5,-1],\n                   [0, -1, 0]])\n\n# Sharpen image\nimage_sharp = cv2.filter2D(image, -1, kernel)\n\n# Show image\nplt.imshow(image_sharp, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image\nimage = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Enhance image\nimage_enhanced = cv2.equalizeHist(image)\n\n# Show image\nplt.imshow(image_enhanced, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load image\nimage_bgr = cv2.imread(\"images/plane.jpg\")\n\n# Convert to YUV\nimage_yuv = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2YUV)\n\n# Apply histogram equalization\nimage_yuv[:, :, 0] = cv2.equalizeHist(image_yuv[:, :, 0])\n\n# Convert to RGB\nimage_rgb = cv2.cvtColor(image_yuv, cv2.COLOR_YUV2RGB)\n\n# Show image\nplt.imshow(image_rgb), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image\nimage_bgr = cv2.imread('images/plane_256x256.jpg')\n\n# Convert BGR to HSV\nimage_hsv = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2HSV)\n\n# Define range of blue values in HSV\nlower_blue = np.array([50,100,50])\nupper_blue = np.array([130,255,255])\n\n# Create mask\nmask = cv2.inRange(image_hsv, lower_blue, upper_blue)\n\n# Mask image\nimage_bgr_masked = cv2.bitwise_and(image_bgr, image_bgr, mask=mask)\n\n# Convert BGR to RGB\nimage_rgb = cv2.cvtColor(image_bgr_masked, cv2.COLOR_BGR2RGB)\n\n# Show image\nplt.imshow(image_rgb), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Show image\nplt.imshow(mask, cmap='gray'), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image as grayscale\nimage_grey = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Apply adaptive thresholding\nmax_output_value = 255\nneighborhood_size = 99\nsubtract_from_mean = 10\nimage_binarized = cv2.adaptiveThreshold(image_grey,\n                                        max_output_value,\n                                        cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\n                                        cv2.THRESH_BINARY,\n                                        neighborhood_size,\n                                        subtract_from_mean)\n\n# Show image\nplt.imshow(image_binarized, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Apply cv2.ADAPTIVE_THRESH_MEAN_C\nimage_mean_threshold = cv2.adaptiveThreshold(image_grey,\n                                             max_output_value,\n                                             cv2.ADAPTIVE_THRESH_MEAN_C,\n                                             cv2.THRESH_BINARY,\n                                             neighborhood_size,\n                                             subtract_from_mean)\n\n# Show image\nplt.imshow(image_mean_threshold, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load library\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image and convert to RGB\nimage_bgr = cv2.imread('images/plane_256x256.jpg')\nimage_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)\n\n# Rectangle values: start x, start y, width, height\nrectangle = (0, 56, 256, 150)\n\n# Create initial mask\nmask = np.zeros(image_rgb.shape[:2], np.uint8)\n\n# Create temporary arrays used by grabCut\nbgdModel = np.zeros((1, 65), np.float64)\nfgdModel = np.zeros((1, 65), np.float64)\n\n# Run grabCut\ncv2.grabCut(image_rgb, # Our image\n            mask, # The Mask\n            rectangle, # Our rectangle\n            bgdModel, # Temporary array for background\n            fgdModel, # Temporary array for background\n            5, # Number of iterations\n            cv2.GC_INIT_WITH_RECT) # Initiative using our rectangle\n\n# Create mask where sure and likely backgrounds set to 0, otherwise 1\nmask_2 = np.where((mask==2) | (mask==0), 0, 1).astype('uint8')\n\n# Multiply image with new mask to subtract background\nimage_rgb_nobg = image_rgb * mask_2[:, :, np.newaxis]\n\n# Show image\nplt.imshow(image_rgb_nobg), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Show mask\nplt.imshow(mask, cmap='gray'), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Show mask\nplt.imshow(mask_2, cmap='gray'), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image as grayscale\nimage_gray = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Calculate median intensity\nmedian_intensity = np.median(image_gray)\n\n# Set thresholds to be one standard deviation above and below median intensity\nlower_threshold = int(max(0, (1.0 - 0.33) * median_intensity))\nupper_threshold = int(min(255, (1.0 + 0.33) * median_intensity))\n\n# Apply Canny edge detector\nimage_canny = cv2.Canny(image_gray, lower_threshold, upper_threshold)\n\n# Show image\nplt.imshow(image_canny, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image\nimage_bgr = cv2.imread(\"images/plane_256x256.jpg\")\nimage_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)\nimage_gray = np.float32(image_gray)\n\n# Set corner detector parameters\nblock_size = 2\naperture = 29\nfree_parameter = 0.04\n\n# Detect corners\ndetector_responses = cv2.cornerHarris(image_gray,\n                                      block_size,\n                                      aperture,\n                                      free_parameter)\n\n# Large corner markers\ndetector_responses = cv2.dilate(detector_responses, None)\n\n# Only keep detector responses greater than threshold, mark as white\nthreshold = 0.02\nimage_bgr[detector_responses >\n          threshold *\n          detector_responses.max()] = [255,255,255]\n\n# Convert to grayscale\nimage_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)\n\n# Show image\nplt.imshow(image_gray, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Show potential corners\nplt.imshow(detector_responses, cmap='gray'), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load images\nimage_bgr = cv2.imread('images/plane_256x256.jpg')\nimage_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)\n\n# Number of corners to detect\ncorners_to_detect = 10\nminimum_quality_score = 0.05\nminimum_distance = 25\n\n# Detect corners\ncorners = cv2.goodFeaturesToTrack(image_gray,\n                                  corners_to_detect,\n                                  minimum_quality_score,\n                                  minimum_distance)\ncorners = np.int16(corners)\n\n# Draw white circle at each corner\nfor corner in corners:\n    x, y = corner[0]\n    cv2.circle(image_bgr, (x,y), 10, (255,255,255), -1)\n\n# Convert to grayscale\nimage_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)\n\n# Show image\nplt.imshow(image_rgb, cmap='gray'), plt.axis(\"off\")\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Load image as grayscale\nimage = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Resize image to 10 pixels by 10 pixels\nimage_10x10 = cv2.resize(image, (10, 10))\n\n# Convert image data to one-dimensional vector\nimage_10x10.flatten()\n```", "```py\narray([133, 130, 130, 129, 130, 129, 129, 128, 128, 127, 135, 131, 131,\n       131, 130, 130, 129, 128, 128, 128, 134, 132, 131, 131, 130, 129,\n       129, 128, 130, 133, 132, 158, 130, 133, 130,  46,  97,  26, 132,\n       143, 141,  36,  54,  91,   9,   9,  49, 144, 179,  41, 142,  95,\n        32,  36,  29,  43, 113, 141, 179, 187, 141, 124,  26,  25, 132,\n       135, 151, 175, 174, 184, 143, 151,  38, 133, 134, 139, 174, 177,\n       169, 174, 155, 141, 135, 137, 137, 152, 169, 168, 168, 179, 152,\n       139, 136, 135, 137, 143, 159, 166, 171, 175], dtype=uint8)\n```", "```py\nplt.imshow(image_10x10, cmap=\"gray\"), plt.axis(\"off\")\nplt.show()\n```", "```py\nimage_10x10.shape\n```", "```py\n(10, 10)\n```", "```py\nimage_10x10.flatten().shape\n```", "```py\n(100,)\n```", "```py\n# Load image in color\nimage_color = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_COLOR)\n\n# Resize image to 10 pixels by 10 pixels\nimage_color_10x10 = cv2.resize(image_color, (10, 10))\n\n# Convert image data to one-dimensional vector, show dimensions\nimage_color_10x10.flatten().shape\n```", "```py\n(300,)\n```", "```py\n# Load image in grayscale\nimage_256x256_gray = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_GRAYSCALE)\n\n# Convert image data to one-dimensional vector, show dimensions\nimage_256x256_gray.flatten().shape\n```", "```py\n(65536,)\n```", "```py\n# Load image in color\nimage_256x256_color = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_COLOR)\n\n# Convert image data to one-dimensional vector, show dimensions\nimage_256x256_color.flatten().shape\n```", "```py\n(196608,)\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nnp.random.seed(0)\n\n# Load image\nimage_bgr = cv2.imread(\"images/plane_256x256.jpg\", cv2.IMREAD_COLOR)\n\n# Convert to RGB\nimage_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)\n\n# Create a list for feature values\nfeatures = []\n\n# Calculate the histogram for each color channel\ncolors = (\"r\",\"g\",\"b\")\n\n# For each channel: calculate histogram and add to feature value list\nfor i, channel in enumerate(colors):\n    histogram = cv2.calcHist([image_rgb], # Image\n                        [i], # Index of channel\n                        None, # No mask\n                        [256], # Histogram size\n                        [0,256]) # Range\n    features.extend(histogram)\n\n# Create a vector for an observation's feature values\nobservation = np.array(features).flatten()\n\n# Show the observation's value for the first five features\nobservation[0:5]\n```", "```py\narray([ 1008.,   217.,   184.,   165.,   116.], dtype=float32)\n```", "```py\n# Show RGB channel values\nimage_rgb[0,0]\n```", "```py\narray([107, 163, 212], dtype=uint8)\n```", "```py\n# Import pandas\nimport pandas as pd\n\n# Create some data\ndata = pd.Series([1, 1, 2, 2, 3, 3, 3, 4, 5])\n\n# Show the histogram\ndata.hist(grid=False)\nplt.show()\n```", "```py\n# Calculate the histogram for each color channel\ncolors = (\"r\",\"g\",\"b\")\n\n# For each channel: calculate histogram, make plot\nfor i, channel in enumerate(colors):\n    histogram = cv2.calcHist([image_rgb], # Image\n                        [i], # Index of channel\n                        None, # No mask\n                        [256], # Histogram size\n                        [0,256]) # Range\n    plt.plot(histogram, color = channel)\n    plt.xlim([0,256])\n\n# Show plot\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport numpy as np\nimport torch\nfrom torchvision import transforms\nimport torchvision.models as models\n\n# Load image\nimage_bgr = cv2.imread(\"images/plane.jpg\", cv2.IMREAD_COLOR)\n\n# Convert to pytorch data type\nconvert_tensor = transforms.ToTensor()\npytorch_image = convert_tensor(np.array(image_rgb))\n\n# Load the pretrained model\nmodel = models.resnet18(pretrained=True)\n\n# Select the specific layer of the model we want output from\nlayer = model._modules.get('avgpool')\n\n# Set model to evaluation mode\nmodel.eval()\n\n# Infer the embedding with the no_grad option\nwith torch.no_grad():\n    embedding = model(pytorch_image.unsqueeze(0))\n\nprint(embedding.shape)\n```", "```py\ntorch.Size([1, 1000])\n```", "```py\n# Load libraries\nimport cv2\nimport tensorflow as tf\nimport tensorflow_hub as hub\n\n# Load image\nimage_bgr = cv2.imread(\"images/plane.jpg\", cv2.IMREAD_COLOR)\nimage_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)\n\n# Convert to tensorflow data type\ntf_image = tf.image.convert_image_dtype([image_rgb], tf.float32)\n\n# Create the model and get embeddings using the inception V1 model\nembedding_model = hub.KerasLayer(\n    \"https://tfhub.dev/google/imagenet/inception_v1/feature_vector/5\"\n)\nembeddings = embedding_model(tf_image)\n\n# Print the shape of the embedding\nprint(embeddings.shape)\n```", "```py\n(1, 1024)\n```", "```py\n# Import libraries\nimport cv2\nfrom matplotlib import pyplot as plt\n\n# first run:\n# mkdir models && cd models\n# wget https://tinyurl.com/mrc6jwhp\nface_cascade = cv2.CascadeClassifier()\nface_cascade.load(\n    cv2.samples.findFile(\n        \"models/haarcascade_frontalface_default.xml\"\n    )\n)\n\n# Load image\nimage_bgr = cv2.imread(\"images/kyle_pic.jpg\", cv2.IMREAD_COLOR)\nimage_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)\n\n# Detect faces and draw a rectangle\nfaces = face_cascade.detectMultiScale(image_rgb)\nfor (x,y,w,h) in faces:\n    cv2.rectangle(image_rgb, (x, y),\n                      (x + h, y + w),\n                      (0, 255, 0), 5)\n\n# Show the image\nplt.subplot(1, 1, 1)\nplt.imshow(image_rgb)\nplt.show()\n```", "```py\n# Load libraries\nimport cv2\nimport json\nimport numpy as np\nimport torch\nfrom torchvision import transforms\nfrom torchvision.models import resnet18\nimport urllib.request\n\n# Get imagenet classes\nwith urllib.request.urlopen(\n    \"https://raw.githubusercontent.com/raghakot/keras-vis/master/resources/\"\n    ):\n    imagenet_class_index = json.load(url)\n\n# Instantiate pretrained model\nmodel = resnet18(pretrained=True)\n\n# Load image\nimage_bgr = cv2.imread(\"images/plane.jpg\", cv2.IMREAD_COLOR)\nimage_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)\n\n# Convert to pytorch data type\nconvert_tensor = transforms.ToTensor()\npytorch_image = convert_tensor(np.array(image_rgb))\n\n# Set model to evaluation mode\nmodel.eval()\n\n# Make a prediction\nprediction = model(pytorch_image.unsqueeze(0))\n\n# Get the index of the highest predicted probability\n_, index = torch.max(prediction, 1)\n\n# Convert that to a percentage value\npercentage = torch.nn.functional.softmax(prediction, dim=1)[0] * 100\n\n# Print the name of the item at the index along with the percent confidence\nprint(imagenet_class_index[str(index.tolist()[0])][1],\n    percentage[index.tolist()[0]].item())\n```", "```py\nairship 6.0569939613342285\n```"]