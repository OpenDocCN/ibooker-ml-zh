["```py\nfrom jax import random\nkey = random.PRNGKey(0)\n\ndef get_item_popularities() -> Optional[Dict[str, int]]:\n    ...\n        # Dict of pairs: (item-identifier, count item chosen)\n        return item_choice_counts\n    return None\n\ndef get_most_popular_recs_ep_greedy(\n    max_num_recs: int,\n    epsilon: float\n) -> Optional[List[str]]:\n    assert epsilon<1.0\n    assert epsilon>0\n\n    items_popularity_dict = get_item_popularities()\n    if items_popularity_dict:\n        sorted_items = sorted(\n            items_popularity_dict.items(),\n            key=lambda item: item[1]),\n            reverse=True,\n        )\n        top_items = [i[0] for i in sorted_items]\n        recommendations = []\n        for i in range(max_num_recs): # we wish to return max_num_recs\n            if random.uniform(key)>epsilon: # if greater than epsilon, exploit\n                recommendations.append(top_items.pop(0))\n            else: # otherwise, explore\n                explore_choice = random.randint(1,len(top_items))\n                recommendations.append(top_items.pop(explore_choice))\n        return recommendations\n\n    return None\n```"]