- en: Chapter 2\. Hello Kubeflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 你好，Kubeflow
- en: Welcome to your first steps into the exciting world of Kubeflow!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到激动人心的Kubeflow世界的第一步！
- en: First off, we’ll set up Kubeflow on your machine, or on a cloud provider. Then
    we’ll dive into a comprehensive example. The goal of this example is to get a
    model trained and start serving as quickly as possible. In some parts of the first
    section, it may seem like we are instructing you to mindlessly enter commands.
    While we want you to follow along, we strongly encourage you to revisit this chapter
    after you’ve finished the book to reflect on the commands you entered, and consider
    how much your understanding has grown while reading.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在您的机器上或云服务商上设置Kubeflow。然后，我们将深入一个全面的例子。这个例子的目标是尽快训练模型并开始提供服务。在第一部分的某些部分，可能会让人觉得我们只是让您机械地输入命令。虽然我们希望您跟着操作，但我们强烈建议您在完成本书后重新阅读本章，反思您输入的命令，并考虑在阅读过程中您的理解有多大提升。
- en: We’ll provide instructions for setting up and testing our example on a local
    machine and a link to instructions for performing the same on real clusters. While
    we will point you to the config files and OCI containers that are driving all
    of this, they are not the focus of this chapter; they will be covered in detail
    in subsequent chapters. The focus of this chapter is an end-to-end example that
    you can follow along with at home.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为在本地机器上设置和测试我们的示例提供说明，并提供在真实集群上执行相同操作的说明链接。虽然我们会指向驱动所有这些的配置文件和OCI容器，但它们不是本章的重点；它们将在后续章节中详细讨论。本章的重点是一个您可以在家里跟随的端到端示例。
- en: In future chapters we will dig into the “why” of everything we’re doing, we
    promise.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的章节中，我们将深入探讨我们所做一切的“为什么”。
- en: For now, just enjoy the ride.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需享受这段旅程。
- en: Getting Set Up with Kubeflow
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubeflow进行设置
- en: One of the great things about Kubeflow being built with Kubernetes is the ability
    to do our initial development and exploration locally, moving into more powerful
    and distributed tools later on. Your same pipeline can be developed locally and
    moved into a cluster.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeflow建立在Kubernetes之上的伟大之处之一是可以在本地进行初始开发和探索，随后转向更强大和分布式的工具。您的同一流水线可以在本地开发，然后迁移到集群中去。
- en: Tip
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Though you could get started with Kubeflow locally, you don’t have to. You can
    just as easily do your initial work with one of the cloud providers or on-premises
    Kubernetes clusters.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以在本地开始使用Kubeflow，但并非必须如此。您也可以选择在云提供商或本地Kubernetes集群上进行初始工作。
- en: One of the faster ways to get started with Kubeflow is using the click-to-deploy
    app on Google Cloud Platform (GCP). If you’re in a rush to get started, go ahead
    and check out [this Kubeflow documentation page](https://oreil.ly/GBbsc).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Google云平台(GCP)上的点击部署应用程序是开始使用Kubeflow的较快方法之一。如果您急于开始，请查看[此Kubeflow文档页面](https://oreil.ly/GBbsc)。
- en: Installing Kubeflow and Its Dependencies
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Kubeflow及其依赖项
- en: Before we approach the biggest requirement for Kubeflow, access to a Kubernetes
    cluster, let’s get the tools set up. Kubeflow is fairly self-contained but does
    require `kubectl`. The rest of the dependencies are inside containers, so you
    don’t have to worry about installing them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在接近Kubeflow的最大需求——访问Kubernetes集群之前，让我们先设置好工具。Kubeflow相当自包含，但确实需要`kubectl`。其余依赖项位于容器内，因此您无需担心安装它们。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Whether you use a local or a remote Kubernetes cluster, having the development
    tools installed locally will simplify your life.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用本地还是远程的Kubernetes集群，将开发工具安装在本地将简化您的生活。
- en: Regardless of your cluster, you need to install Kubeflow’s core dependency `kubectl`,
    for communicating with Kubernetes. `kubectl` is widely packaged, with the different
    installation options covered in the [Kubernetes documentation](https://oreil.ly/tUpe0).
    If you want to use a package manager to install `kubectl`, Ubuntu users can use
    snap (see [Example 2-1](#install_kubectl_snap)) and Mac users can use Homebrew
    (see [Example 2-2](#install_kubectl_homebrew)); other installation options are
    covered in the [Kubernetes documentation](https://oreil.ly/vQPYQ). `kubectl` can
    also be installed as a local binary from this [Kubernetes documentation page](https://oreil.ly/iT5Pv).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用的是哪种集群，你都需要安装 Kubeflow 的核心依赖项 `kubectl`，用于与 Kubernetes 进行通信。`kubectl` 被广泛打包，不同的安装选项在
    [Kubernetes 文档](https://oreil.ly/tUpe0) 中有详细介绍。如果你想使用软件包管理器安装 `kubectl`，Ubuntu
    用户可以使用 snap（参见 [示例 2-1](#install_kubectl_snap)），Mac 用户可以使用 Homebrew（参见 [示例 2-2](#install_kubectl_homebrew)）；其他安装选项也在
    [Kubernetes 文档](https://oreil.ly/vQPYQ) 中有涵盖。`kubectl` 也可以作为一个本地二进制文件从这个 [Kubernetes
    文档页面](https://oreil.ly/iT5Pv) 安装。
- en: Example 2-1\. Install kubectl with snap
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-1\. 使用 snap 安装 kubectl
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Example 2-2\. Install kubectl with Homebrew
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-2\. 使用 Homebrew 安装 kubectl
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once you have the minimum dependencies installed, you can now install Kubeflow
    from [this GitHub repo](https://oreil.ly/WTHLZ), as in [Example 2-3](#install_kf).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了最低限度的依赖项，你现在可以从 [这个 GitHub 仓库](https://oreil.ly/WTHLZ) 安装 Kubeflow，就像在
    [示例 2-3](#install_kf) 中描述的那样。
- en: Example 2-3\. Install Kubeflow
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-3\. 安装 Kubeflow
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should now have Kubeflow installed on your machine. To make sure it’s installed,
    run `kfctl version` and check that it returns the expected version. Now let’s
    cover some optional tools that you can install to ease your future Kubeflowing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经在你的机器上安装了 Kubeflow。为了确保它已安装成功，请运行 `kfctl version` 并检查其返回的版本是否符合预期。现在让我们介绍一些可选的工具，可以帮助你简化未来使用
    Kubeflow 的过程。
- en: Setting Up Local Kubernetes
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置本地 Kubernetes
- en: Being able to have the same software running locally and in production is one
    of the great advantages of Kubeflow. To support this, you will need a local version
    of Kubernetes installed. While there are several options, we find Minikube the
    simplest. Minikube is a local version of Kubernetes that allows you to use your
    local computer to simulate a cluster. Two other common options for a local version
    of Kubeflow are `microk8s`, supported on many Linux platforms, and `MiniKF`, which
    uses Vagrant to launch a VM to run Kubernetes with Kubeflow.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在本地和生产环境中运行相同的软件是 Kubeflow 的一个巨大优势之一。为了支持这一点，你需要安装一个本地版本的 Kubernetes。虽然有几种选择，但我们发现
    Minikube 是最简单的。Minikube 是一个本地版本的 Kubernetes，允许你在本地计算机上模拟一个集群。另外两个常见的本地 Kubeflow
    版本选择是 `microk8s`，支持多种 Linux 平台，以及使用 Vagrant 启动 VM 的 `MiniKF`，用于在 Kubernetes 上运行
    Kubeflow。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: A local Kubernetes cluster is not strictly required, but many data scientists
    and developers find it helpful to have a local cluster to test with.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，不是必须安装本地 Kubernetes 集群，但许多数据科学家和开发人员发现拥有一个本地集群进行测试非常有帮助。
- en: Minikube
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Minikube
- en: Minikube is a local version of Kubernetes that can run Kubeflow. There are installation
    guides for Minikube on the [main Kubernetes documentation page](https://oreil.ly/lNeon)
    as well as the [Kubeflow-specific page](https://oreil.ly/B17Wp).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 是一个可以运行 Kubeflow 的本地 Kubernetes 版本。Minikube 的安装指南可以在 [主 Kubernetes
    文档页面](https://oreil.ly/lNeon) 和 [Kubeflow 专用页面](https://oreil.ly/B17Wp) 找到。
- en: The most common failure in the automatic setup of Minikube is missing a hypervisor
    or Docker. Regardless of your OS, you should be able to use [VirtualBox](https://oreil.ly/h1uoS);
    however, other options like KVM2 on Linux, Hyper-V on Windows, and HyperKit on
    macOS all work as well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 自动设置中最常见的失败是缺少虚拟化程序或 Docker。无论你使用的是哪种操作系统，你都可以使用 [VirtualBox](https://oreil.ly/h1uoS)；不过，其他选项如
    Linux 上的 KVM2、Windows 上的 Hyper-V，以及 macOS 上的 HyperKit 也同样适用。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'When starting Minikube make sure to give it plenty of memory and disk space,
    e.g., `minikube start --cpus 16 --memory 12g --disk-size 15g`. Note: you don’t
    need 16 CPU cores to run this; this is just the number of virtual CPUs Minikube
    will use.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动 Minikube 时，请确保为其分配足够的内存和磁盘空间，例如，`minikube start --cpus 16 --memory 12g --disk-size
    15g`。注意：你并不需要 16 个 CPU 核心来运行它；这只是 Minikube 将使用的虚拟 CPU 数量。
- en: Setting Up Your Kubeflow Development Environment
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置你的 Kubeflow 开发环境
- en: Kubeflow’s pipeline system is built in Python, and having the SDK installed
    locally will allow you to build pipelines faster. However, if you can’t install
    software locally, you can still use Kubeflow’s Jupyter environment to build your
    pipelines.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeflow的流水线系统是用Python构建的，本地安装SDK可以让您更快地构建流水线。然而，如果您无法在本地安装软件，仍可以使用Kubeflow的Jupyter环境来构建您的流水线。
- en: Setting up the Pipeline SDK
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置Pipeline SDK
- en: To begin setting up the Pipeline SDK you will need to have [Python](https://oreil.ly/IbfY2)
    installed. Many people find it useful to create isolated virtual environments
    for their different projects; see how in [Example 2-4](#make_venv).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始设置Pipeline SDK，您需要安装[Python](https://oreil.ly/IbfY2)。许多人发现为其不同项目创建隔离的虚拟环境非常有用；请参阅[示例 2-4](#make_venv)了解如何操作。
- en: Example 2-4\. Create a virtual environment
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-4\. 创建虚拟环境
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now you can use the pip command to install the Kubeflow Pipelines package and
    its requirements, as in [Example 2-5](#install_sdk).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用pip命令安装Kubeflow Pipelines包及其要求，如[示例 2-5](#install_sdk)所示。
- en: Example 2-5\. Install Kubeflow Pipeline SDK
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-5\. 安装Kubeflow Pipeline SDK
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you use a virtual environment you will need to activate it whenever you want
    to use the Pipeline SDK.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用虚拟环境，您需要在每次使用Pipeline SDK时激活它。
- en: In addition to the SDK, Kubeflow ships a number of components. Checking out
    a fixed version of the standard components, as in [Example 2-6](#install_kf_pl_sdk),
    allows us to create more reliable pipelines.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了SDK外，Kubeflow还提供了许多组件。检出标准组件的固定版本，例如[示例 2-6](#install_kf_pl_sdk)，可以创建更可靠的流水线。
- en: Example 2-6\. Clone the Kubeflow Pipelines repo
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-6\. 克隆Kubeflow Pipelines存储库
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Setting up Docker
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置Docker
- en: '[Docker](https://www.docker.com) is an important part of the minimum requirements,
    allowing you to customize and add libraries and other functionality to your own
    custom containers. We’ll cover more on Docker in [Chapter 3](ch03.xhtml#kubeflow_design_beyond_basics).
    Docker can be installed from the standard package managers in Linux or with Homebrew
    on macOS.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[Docker](https://www.docker.com)是最低要求的重要组成部分，允许您定制和添加库和其他功能到您自己的自定义容器中。我们将在[第3章](ch03.xhtml#kubeflow_design_beyond_basics)详细介绍Docker。在Linux中，您可以通过标准软件包管理器或在macOS上使用Homebrew来安装Docker。'
- en: In addition to installing Docker, you will want a place to store the container
    images, called a container registry. The container registry will be accessed by
    your Kubeflow cluster. The company behind Docker offers [Docker Hub](https://hub.docker.com)
    and RedHat offers [Quay](https://quay.io), a cloud neutral platform you can use.
    Alternatively, you can also use your cloud provider’s container registry.^([1](ch02.xhtml#idm45831180911944))
    A cloud vendor’s specific container registry often offers greater security on
    images stored there and can configure your Kubernetes cluster automatically with
    the permissions required to fetch those images. In our examples, we’ll assume
    that you’ve set your container registry via an environment variable `$CONTAINER_REGISTRY`,
    in your shell.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安装Docker外，您还需要一个存储容器映像的地方，称为容器注册表。容器注册表将被您的Kubeflow集群访问。Docker背后的公司提供[Docker
    Hub](https://hub.docker.com)，RedHat提供[Quay](https://quay.io)，这是一个云中立的平台，您可以使用。或者，您还可以使用您的云提供商的容器注册表。^[1](ch02.xhtml#idm45831180911944)
    云供应商特定的容器注册表通常提供更高的图像存储安全性，并可以自动配置您的Kubernetes集群以获取这些图像所需的权限。在我们的示例中，我们假设您通过环境变量`$CONTAINER_REGISTRY`设置了您的容器注册表。
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you use a registry that isn’t on the Google Cloud Platform, you will need
    to configure Kubeflow Pipelines container builder to have access to your registry
    by following the [Kaniko configuration guide](https://oreil.ly/88Ep-).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的注册表不在Google Cloud Platform上，您需要按照[Kaniko配置指南](https://oreil.ly/88Ep-)配置Kubeflow
    Pipelines容器构建器，以便访问您的注册表。
- en: To make sure your Docker installation is properly configured, you can write
    a one-line `Dc` and push it to your registry. For the `Dockerfile` we’ll use the
    `FROM` command to indicate we are based on top of Kubeflow’s TensorFlow notebook
    container image, as in [Example 2-7](#trivial_docker) (we’ll talk more about this
    in [Chapter 9](ch09.xhtml#beyond_tf)). When you push a container, you need to
    specify the `tag`, which determines the image name, version, and where it is stored—as
    shown in [Example 2-8](#trivial_build_and_push).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Docker 安装已正确配置，你可以编写一行命令 `Dc` 并将其推送到你的注册表中。对于 `Dockerfile`，我们将使用 `FROM`
    命令来指示我们基于 Kubeflow 的 TensorFlow 笔记本容器镜像构建，就像在 [示例 2-7](#trivial_docker) 中展示的一样（我们将在
    [第9章](ch09.xhtml#beyond_tf) 中详细讨论这个）。当你推送一个容器时，需要指定 `tag`，它确定了镜像名称、版本以及存储位置，就像在
    [示例 2-8](#trivial_build_and_push) 中展示的一样。
- en: Example 2-7\. Specify the new container is built on top of Kubeflow’s container
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-7\. 指定新容器是基于 Kubeflow 的容器
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Example 2-8\. Build the new container and push to a registry for use
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-8\. 构建新容器并推送到注册表以供使用
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this setup, you’re now ready to start customizing the containers and components
    in Kubeflow to meet your needs. We’ll do a deeper dive into building containers
    from scratch in [Chapter 9](ch09.xhtml#beyond_tf). As we move forward in future
    chapters we’ll use this pattern to add tools when needed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，你现在可以开始定制 Kubeflow 中的容器和组件以满足你的需求。我们将在 [第9章](ch09.xhtml#beyond_tf) 中深入讨论如何从头开始构建容器。随着我们在未来章节的深入，我们将使用这种模式在需要时添加工具。
- en: Editing YAML
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑 YAML
- en: While Kubeflow abstracts the details of Kubernetes away from us to a large degree,
    there are still times when looking at or modifying the configuration is useful.
    Most of Kubernetes configuration is represented in YAML, so having tools set up
    to easily look at and edit YAMLs will be beneficial. Most integrated development
    environments (IDEs) offer some sort of tooling for editing YAML, but you may have
    to install these separately.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Kubeflow 在很大程度上抽象了 Kubernetes 的细节，但在查看或修改配置时仍然有用。大部分 Kubernetes 配置都以 YAML
    形式表示，因此设置工具以便轻松查看和编辑 YAML 将是有益的。大多数集成开发环境（IDE）都提供了某种用于编辑 YAML 的工具，但你可能需要单独安装这些工具。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: For IntelliJ there is a [YAML plugin](https://oreil.ly/Awmeq). For emacs there
    are many modes available for YAML editing, including [yaml-mode](https://oreil.ly/lWZE5)
    (which is installable from [Milkypostman’s Emacs Lisp Package Archive (MELPA)](https://melpa.org)).
    Atom has syntax highlighting available as a package [YAML](https://oreil.ly/z47Sa).
    If you use a different IDE, don’t throw it away just for better YAML editing before
    you explore the plugin available. Regardless of IDE you can also use the [YAMLlint
    website](http://www.yamllint.com) to check your YAML.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 IntelliJ，有一个 [YAML 插件](https://oreil.ly/Awmeq)。对于 emacs，有许多可用于 YAML 编辑的模式，包括
    [yaml-mode](https://oreil.ly/lWZE5)（可以从 [Milkypostman’s Emacs Lisp Package Archive
    (MELPA)](https://melpa.org) 安装）。Atom 作为一个包括语法高亮的插件 [YAML](https://oreil.ly/z47Sa)。如果你使用不同的
    IDE，在探索可用的插件之前，不要因为更好的 YAML 编辑而抛弃它。无论使用何种 IDE，你也可以使用 [YAMLlint 网站](http://www.yamllint.com)
    来检查你的 YAML 文件。
- en: Creating Our First Kubeflow Project
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的第一个 Kubeflow 项目
- en: First, we need to make a Kubeflow project to work in. To create a Kubeflow deployment
    we use the `kfctl` program.^([2](ch02.xhtml#idm45831180809144)) When using Kubeflow
    you need to specify a manifest file that configures what is built and how there
    are various manifests for different cloud providers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个 Kubeflow 项目来工作。要创建 Kubeflow 部署，我们使用 `kfctl` 程序。^([2](ch02.xhtml#idm45831180809144))
    在使用 Kubeflow 时，你需要指定一个配置文件清单，配置构建内容以及构建方式，不同的云服务提供商有不同的清单文件。
- en: We’ll start with an example project using a vanilla configuration, as seen in
    [Example 2-9](#create_example_project). In this project we’ll build a simple end-to-end
    pipeline for our MNIST example. We chose this example because it’s the standard
    “hello world” of machine learning.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用基本配置的示例项目开始，就像在 [示例 2-9](#create_example_project) 中展示的那样。在这个项目中，我们将为我们的
    MNIST 示例构建一个简单的端到端流水线。我们选择这个示例，因为它是机器学习中的标准“Hello World”。
- en: Example 2-9\. Create first example project
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-9\. 创建第一个示例项目
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 2-9](#create_example_project) assumes you’re using an existing Kubernetes
    cluster (like local Minikube). While your running `kfctl apply` you will see lots
    of status messages and maybe even some error messages. Provided it prints out
    a 0 at the end you can safely ignore most errors as they are automatically retried.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-9](#create_example_project) 假设你正在使用一个现有的 Kubernetes 集群（如本地 Minikube）。当你运行
    `kfctl apply` 时，你将看到很多状态消息，甚至可能会看到一些错误消息。只要它最后输出 0，你可以安全地忽略大多数错误，因为它们会自动重试。'
- en: Warning
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This deployment process can take up to *30 minutes*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部署过程可能需要*30分钟*。
- en: If you’ve decided to go straight ahead with a cloud provider, [the Kubeflow
    installation guide](https://oreil.ly/EMRVV) has information on how to get started.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定直接使用云服务提供商，请参阅[Kubeflow安装指南](https://oreil.ly/EMRVV)了解如何开始。
- en: Warning
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The Kubeflow user interface can come up before Kubeflow is fully deployed, and
    accessing it then can mean you won’t have a proper namespace. To make sure Kubeflow
    is ready, run `kubectl get pods --all-namespaces -w` and wait for all of the pods
    to become RUNNING or COMPLETED. If you see pods being preempted, make sure you
    launched a cluster with enough RAM and disk space. If you can’t launch a large
    enough cluster locally, consider a cloud provider. (Ilan and Holden are currently
    working on a blog post on this topic.)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubeflow 完全部署之前，Kubeflow 用户界面可能会出现，并在这时访问可能意味着您没有正确的命名空间。为确保 Kubeflow 准备就绪，请运行
    `kubectl get pods --all-namespaces -w` 并等待所有的 pod 变为 RUNNING 或 COMPLETED。如果您看到
    pod 被抢占，请确保您启动了足够的 RAM 和磁盘空间的集群。如果您无法在本地启动足够大的集群，请考虑使用云服务提供商。（Ilan 和 Holden 目前正在撰写有关此主题的博客文章。）
- en: Training and Deploying a Model
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练和部署模型
- en: In traditional machine learning texts, the training phase is the one that is
    given the most attention, with a few simple examples on deployment, and very little
    treatment of model management. Throughout this book, we assume that you are a
    data scientist who knows how to select the correct model/algorithm or work with
    someone who does. We focus on the deployment and model management more than traditional
    ML texts.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的机器学习文本中，训练阶段通常受到最多关注，只有一些简单的部署示例，而对模型管理的处理非常少。本书假设您是一名了解如何选择正确模型/算法或与了解此领域的人合作的数据科学家。我们比传统的机器学习文本更注重部署和模型管理。
- en: Training and Monitoring Progress
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练和监控进度
- en: The next step is to train the model using a Kubeflow Pipeline. We will use a
    precreated training container^([3](ch02.xhtml#idm45831180703352)) that downloads
    the training data and trains the model. For [Example 2-10](#create_training_workflow),
    we have a prebuilt workflow in `train_pipeline.py` that trains a `RandomForestClassifier`
    in [the ch2 folder on this book’s GitHub example repo](https://oreil.ly/Kubeflow_for_ML).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是使用 Kubeflow Pipeline 训练模型。我们将使用一个预先创建的训练容器^([3](ch02.xhtml#idm45831180703352))来下载训练数据并训练模型。对于[示例
    2-10](#create_training_workflow)，我们在 `train_pipeline.py` 中有一个预先构建的工作流，在[本书 GitHub
    示例存储库的 ch2 文件夹中](https://oreil.ly/Kubeflow_for_ML)训练一个 `RandomForestClassifier`。
- en: Example 2-10\. Create training workflow example
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-10\. 创建训练工作流示例
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you run into problems here, you should check out the [Kubeflow troubleshooting
    guide](https://oreil.ly/nvNnC).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在这里遇到问题，您应该查看[Kubeflow 故障排除指南](https://oreil.ly/nvNnC)。
- en: 'The Kubeflow UI, as seen in [Figure 2-1](#img-kubeflow-ui), is accessed in
    a few different ways. For local deployments a quick port forward is the simplest
    way to get started: just run `kubectl port-forward svc/istio-ingressgateway -n
    istio-system 7777:80` and then go to `localhost:7777`. If you have deployed on
    GCP you should go to `https://<deployment_name>.endpoints.<project_name>.cloud.goog`.
    Otherwise, you can get the address of the gateway service by running `kubectl
    get ingress -n istio-system`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeflow 用户界面，如[图 2-1](#img-kubeflow-ui)所示，可以通过几种不同的方式访问。对于本地部署，快速端口转发是最简单的开始方式：只需运行
    `kubectl port-forward svc/istio-ingressgateway -n istio-system 7777:80` 然后访问 `localhost:7777`。如果您在
    GCP 上部署了 Kubeflow，您应该访问 `https://<deployment_name>.endpoints.<project_name>.cloud.goog`。否则，您可以通过运行
    `kubectl get ingress -n istio-system` 来获取网关服务的地址。
- en: '![kubeflow-ui](Images/kfml_0201.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![kubeflow-ui](Images/kfml_0201.png)'
- en: Figure 2-1\. Kubeflow web UI
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. Kubeflow Web 用户界面
- en: Click pipelines, or add `_/pipeline/` to the root URL and you should see the
    Pipelines web UI, as in [Figure 2-2](#img-argo).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击流水线，或者在根 URL 中添加 `_/pipeline/`，您应该能够看到流水线 Web 用户界面，就像[图 2-2](#img-argo)所示。
- en: '![argo-ui](Images/kfml_0202.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![argo-ui](Images/kfml_0202.png)'
- en: Figure 2-2\. Pipelines web UI
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2\. 流水线 Web 用户界面
- en: From here we can upload our pipeline. Once we’ve uploaded the pipeline we can
    use the same web UI to create a run of the pipeline. After you click the uploaded
    pipeline you’ll be able to create a run, as shown in [Figure 2-3](#img-pipeline-detail).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以上传我们的流水线。一旦上传了流水线，我们可以使用同样的 Web 用户界面来创建流水线的运行。点击上传的流水线后，您将能够创建一个运行，如[图
    2-3](#img-pipeline-detail)所示。
- en: '![pipeline-detail](Images/kfml_0203.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![pipeline-detail](Images/kfml_0203.png)'
- en: Figure 2-3\. Pipeline detail page
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-3\. 流水线详细页面
- en: Test Query
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试查询
- en: Finally, let’s query our model and monitor the results. A “sanity check” is
    a simple test to ensure our model is making predictions that are theoretically
    reasonable. For example—we’re attempting to guess what digit was written. If our
    model comes back with answers like `77`, `orange Kool-Aid`, or `ERROR`, those
    would all fail the sanity check. We expect to see digits between 0 and 9\. Sanity
    checking models before putting them into production is always a wise choice.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们查询我们的模型并监控结果。 "理智检查"是一个简单的测试，用于确保我们的模型做出的预测在理论上是合理的。例如 - 我们试图猜测写的是什么数字。如果我们的模型返回像`77`，`橙色果味饮料`或`错误`这样的答案，那都不会通过理智检查。我们希望看到的是0到9之间的数字。在投入生产之前对模型进行理智检查总是一个明智的选择。
- en: The web UI and model serving are exposed through the same Istio gateway. So,
    the model will be available at *http://<WEBUI_URL>/seldon<mnist-classifier/api<v0.1/predictions*.
    If you’re using Google IAP, you may find the iap_curl project helpful for making
    requests.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Web UI和模型服务通过相同的Istio网关公开。因此，该模型将在*http://<WEBUI_URL>/seldon<mnist-classifier/api<v0.1/predictions*处可用。如果您使用Google
    IAP，您可能会发现iap_curl项目有助于发出请求。
- en: There is a Python [script available](https://oreil.ly/Kubeflow_for_MLch02) for
    pulling an image from the MNIST dataset, turning it into a vector, displaying
    the image, and sending it to the model. Turning the image into a vector is normally
    part of the preprediction transformation; we’ll cover more of this in [Chapter 8](ch08.xhtml#inference_ch).
    [Example 2-11](#model_serving) is a fairly clear Python example of how one can
    query the model. The model returns a JSON of the 10 digits and the probability
    of whether the submitted vector represents a specific digit. Specifically, we
    need an image of a handwritten digit that we can turn into an array of values.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个Python[脚本可用](https://oreil.ly/Kubeflow_for_MLch02)，用于从MNIST数据集中提取图像，将其转换为向量，显示图像，并将其发送到模型。将图像转换为向量通常是预测转换的一部分；我们将在[第8章](ch08.xhtml#inference_ch)中介绍更多内容。[例子2-11](#model_serving)是一个相当清晰的Python示例，演示了如何查询模型。该模型返回了10个数字和提交的向量表示特定数字的概率的JSON。具体来说，我们需要一张手写数字的图像，我们可以将其转换为一系列值。
- en: Example 2-11\. Model query example
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例2-11\. 模型查询示例
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For example, see the handwritten *3* in [Figure 2-4](#handwritten_3).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查看[图2-4](#handwritten_3)中手写的*3*。
- en: '![kfml 0204](Images/kfml_0204.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![kfml 0204](Images/kfml_0204.png)'
- en: Figure 2-4\. Handwritten *3*
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-4\. 手写 *3*
- en: 'This returns the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下内容：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can see that even though we wrote a pretty clear *3*, the model’s best guess
    was a tie between *1* and *7*. That being said, `RandomForestClassifier` is a
    bad model for handwriting recognition—so this isn’t a surprising result. We used
    `RandomForestClassifier` for two reasons: first, to illustrate model explainability
    in [Chapter 8](ch08.xhtml#inference_ch), and second, so you can experiment with
    a more reasonable model and compare performance.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，即使我们写的是一个相当清晰的 *3*，但模型最佳猜测是 *1*和 *7*。也就是说，`RandomForestClassifier`对手写识别来说是一个糟糕的模型
    - 所以这并不是一个令人惊讶的结果。我们之所以使用`RandomForestClassifier`有两个原因：首先，为了在[第8章](ch08.xhtml#inference_ch)中说明模型的可解释性，其次，让您尝试一个更合理的模型并比较性能。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: While we’ve deployed our end-to-end example here without any real validation,
    you should always validate before real production.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在此处部署了端到端示例，但您应该始终在真实生产之前进行验证。
- en: Going Beyond a Local Deployment
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越本地部署
- en: Some of you have been trying this out on a local Kubernetes deployment. One
    of the powers of Kubeflow is the ability to scale using Kubernetes. Kubernetes
    can run on a single machine or many computers, and some environments can dynamically
    add more resources as needed. While Kubernetes is an industry standard, there
    are variations in Kubeflow’s setup steps required depending on your provider.
    [Kubeflow’s getting started guide](https://oreil.ly/eq6rC) has installation instructions
    for GCP, AWS, Azure, IBM Cloud, and OpenShift. Once Kubeflow is installed on your
    Kubernetes cluster, you can try this same example again and see how the same code
    can run, or take our word for it and move on to more interesting problems.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的一些人一直在本地Kubernetes部署上尝试这个。Kubeflow的一大优势是能够利用Kubernetes进行扩展。Kubernetes可以在单台计算机或许多计算机上运行，并且一些环境可以根据需要动态添加更多资源。尽管Kubernetes是一个行业标准，但根据您的提供商不同，Kubeflow的设置步骤可能会有所不同。[Kubeflow入门指南](https://oreil.ly/eq6rC)提供了GCP、AWS、Azure、IBM
    Cloud和OpenShift的安装说明。一旦Kubeflow安装在您的Kubernetes集群上，您可以再次尝试相同的示例，看看相同的代码如何运行，或者相信我们并转向更有趣的问题。
- en: Tip
  id: totrans-104
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: When deploying on cloud providers, Kubeflow can create more than just Kubernetes
    resources that should be deleted too. For example, on Google you can delete the
    ancillary services by going to the deployment manager.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在云提供商上部署时，Kubeflow 可以创建不仅仅是 Kubernetes 资源，也应该删除的其他资源。例如，在 Google 上，您可以通过访问部署管理器来删除辅助服务。
- en: Conclusion
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you got your first real taste of Kubeflow. You now have your
    development environment properly configured and a Kubeflow deployment you can
    use throughout the rest of this book. We covered a simple end-to-end example with
    the standard MNIST, allowing you to see the different core components of Kubeflow
    in action. We introduced the pipeline, which ties all of Kubeflow together, and
    you used it to train your model. In [Chapter 3](ch03.xhtml#kubeflow_design_beyond_basics)
    we will explore Kubeflow’s design and set up some optional components. Understanding
    the design will help you choose the right components.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您第一次真正体验了 Kubeflow。您现在已经正确配置了开发环境，并且拥有了一个可以在本书其余部分中使用的 Kubeflow 部署。我们介绍了一个简单的端到端示例，使用标准的
    MNIST 数据集，让您看到了 Kubeflow 不同核心组件的实际运行情况。我们介绍了流水线，它将所有 Kubeflow 组件联系在一起，并且您使用它来训练模型。在[第
    3 章](ch03.xhtml#kubeflow_design_beyond_basics)中，我们将探索 Kubeflow 的设计并设置一些可选组件。理解设计将帮助您选择合适的组件。
- en: ^([1](ch02.xhtml#idm45831180911944-marker)) Just search “cloudname” plus the
    container registry name for documentation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.xhtml#idm45831180911944-marker)) 只需搜索“cloudname”加上容器注册表名称以获取文档。
- en: ^([2](ch02.xhtml#idm45831180809144-marker)) Not to be confused with the legacy
    `kfctl.sh` script.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.xhtml#idm45831180809144-marker)) 不要将其与传统的`kfctl.sh`脚本混淆。
- en: ^([3](ch02.xhtml#idm45831180703352-marker)) The container is from [this GitHub
    repo](https://oreil.ly/f-bO3).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch02.xhtml#idm45831180703352-marker)) 该容器来源于[此 GitHub 仓库](https://oreil.ly/f-bO3)。
