- en: Chapter 13\. Creating More Advanced Synthesized Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章 创建更高级的合成数据
- en: In this chapter, we’ll return to synthesis and build upon the introduction to
    synthesizing data using Unity’s Perception that we worked through back in [Chapter 3](ch03.html#chapter-introducing-synthesis).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾合成，并在Unity的感知使用中进行深入讨论，这是我们在[第三章](ch03.html#chapter-introducing-synthesis)中进行的介绍的延续。
- en: Specifically, we’ll use randomizers to add a random element to the images generated
    from our dice, and learn how to explore the data we’re synthesizing, making use
    of the labels we added earlier.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将使用随机器人向我们的骰子生成的图像添加一个随机元素，并学习如何探索我们正在合成的数据，利用我们之前添加的标签。
- en: Adding Random Elements to the Scene
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向场景添加随机元素
- en: 'To generate useful synthetic data, we need to add random elements to the scene.
    The random elements we’re going to add are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成有用的合成数据，我们需要向场景添加随机元素。我们要添加的随机元素包括：
- en: A random *floor color*
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个随机的*地板颜色*
- en: A random *camera position*
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个随机的*摄像机位置*
- en: By randomly changing the color of the floor and the position of the camera,
    we’ll be able to generate a variety of random images of dice, which can then be
    used to train an image recognition system outside of Unity to recognize dice in
    a huge range of situations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过随机改变地板的颜色和摄像机的位置，我们能够生成各种随机的骰子图像，这些图像可以用于在Unity之外的图像识别系统中训练，以识别各种情况下的骰子。
- en: We’re going to be working with the same project we ended up with way back at
    the end of [Chapter 3](ch03.html#chapter-introducing-synthesis), so either duplicate
    it or re-create it from scratch before continuing. We duplicated it and renamed
    it “SimpleDiceWithRandomizers.”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用我们在[第三章](ch03.html#chapter-introducing-synthesis)结束时得到的同一个项目，因此在继续之前，请复制它或从头开始重新创建。我们复制了它并将其重命名为“SimpleDiceWithRandomizers”。
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Don’t forget that it needs to be a 3D URP project, which is different from the
    projects you’ve been making throughout [Part II](part02.html#part_2) for simulations.
    Refer back to [“Creating the Unity Project”](ch03.html#synthesis-creating-project)
    if you need a reminder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 切记这   记住，项目必须是一个3D URP项目，这与你在[第二部分](part02.html#part_2)中制作的仿真项目不同。如果需要提醒，请参考[“创建Unity项目”](ch03.html#synthesis-creating-project)。
- en: Randomizing the Floor Color
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机化地板颜色
- en: 'To randomize the floor color, we first need a randomizer. To add a randomizer,
    open the Unity scene and do the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要随机化地板颜色，我们首先需要一个随机器。要添加随机器，请打开Unity场景并执行以下操作：
- en: Find the Scenario component attached to the Scenario object, and click the Add
    Randomizer button shown in [Figure 13-1](#fig:addrandomiser).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到附加到Scenario对象的Scenario组件，并单击[图13-1](#fig:addrandomiser)中显示的添加随机器按钮。
- en: '![psml 1301](assets/psml_1301.png)'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 1301](assets/psml_1301.png)'
- en: Figure 13-1\. Adding a randomizer
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-1\. 添加一个随机器
- en: Choose the perception category, as shown in [Figure 13-2](#fig:perceptioncategory),
    and choose Color Randomizer, as shown in [Figure 13-3](#fig:pickcr).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择g:perceptioncategory)所示，选择感知类别，并如[图13-3](#fig:pickcr)所示，选择颜色随机器。
- en: '![psml 1302](assets/psml_1302.png)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 1302](assets/psml_1302.png)'
- en: Figure 13-2\. Choose the perception category
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-2\. 选择感知类别
- en: '![psml 1303](assets/psml_1303.png)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 1303](assets/psml_1303.png)'
- en: Figure 13-3\. Picking the color randomizer
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-3\. 选择颜色随机器
- en: 'A color randomizer needs to know which objects it should change the color of.
    To do this, we need to add a Color Randomizer Tag component to the floor plane
    (which is the object we want the color to change on):'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 颜色随机器需要知道它应该改变颜色的对象。为此，我们需要在地板平面上（我们希望改变颜色的对象）添加一个颜色随机器标签组件：
- en: Select the floor in the Hierarchy panel, and add a Color Randomizer Tag component
    to it using its Inspector.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Hierarchy面板中选择地板，并使用其Inspector添加一个颜色随机器标签组件。
- en: Verify that it’s added to the object, as shown in [Figure 13-4](#fig:colorrandomisertag).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已将其添加到对象中，如[图13-4](#fig:colorrandomisertag)所示。
- en: '![psml 1304](assets/psml_1304.png)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 1304](assets/psml_1304.png)'
- en: Figure 13-4\. A color randomizer tag
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-4\. 颜色随机器标签
- en: That’s all. To test that the randomizer is working, run the project, and check
    the filesystem locations noted in [“Testing the Scenario”](ch03.html#test-the-scenario).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些。为了测试随机器是否起作用，请运行项目，并检查[“测试场景”](ch03.html#test-the-scenario)中记录的文件系统位置。
- en: If it’s all working, you’ll find the dice pictures with a variety of colored
    backgrounds, as shown in [Figure 13-5](#fig:randombg).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你会发现骰子图片有各种不同颜色的背景，如[图13-5](#fig:randombg)所示。
- en: '![psml 1305](assets/psml_1305.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![psml 1305](assets/psml_1305.png)'
- en: Figure 13-5\. Random plane colors (you’ll see these in grayscale if you’re reading
    the print version)
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-5\. 随机平面颜色（如果您正在阅读印刷版本，则将以灰度显示）
- en: Randomizing the Camera Position
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机化摄像机位置
- en: Next we’ll add a random element to the position of the camera that captures
    the images we save.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在捕获保存图像的摄像机位置上添加一个随机元素。
- en: To randomize the camera’s position, we’ll need a randomizer that doesn’t come
    with Unity’s Perception package. To do that, we’ll code our own randomizer.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要随机化摄像机的位置，我们需要一个不随 Unity Perception 包提供的随机器。为此，我们将编写我们自己的随机器。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A randomizer is a script that’s attached to a scenario. A randomizer encapsulates
    specific randomization activities that are performed during execution of the environment.
    Each randomizer exposes certain parameters to the Inspector.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随机器是附加到场景的脚本。随机器封装了在环境执行期间执行的特定随机化活动。每个随机器向检视器公开特定参数。
- en: A new randomizer can be created by making a new script that derives from the
    `Randomizer` class, and the implementing methods from that class, as needed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过创建一个新的脚本，该脚本派生自`Randomizer`类，并根据需要实现该类中的方法来创建一个新的随机器。
- en: 'Some of the methods you can override are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以重写的一些方法包括：
- en: '`OnCreate()`, which is called when a randomizer is loaded by a scenario'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCreate()`，在场景加载随机器时调用'
- en: '`OnIterationStart()`, which is called when a scenario starts an iteration'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnIterationStart()`，在场景启动迭代时调用'
- en: '`OnIterationEnd()`, which is called when a scenario completes an iteration'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnIterationEnd()`，在场景完成迭代时调用'
- en: '`OnScenarioComplete()`, which is called when a scenario has completed'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnScenarioComplete()`，在场景完成时调用'
- en: '`OnStartRunning()`, which is called on the first frame on which a randomizer
    is enabled'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnStartRunning()`，在启用随机器的第一帧时调用'
- en: '`OnUpdate()`, which is called on every frame'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnUpdate()`，该方法在每一帧都会被调用'
- en: 'For example, here’s the code for the `ColorRandomizer` we used a moment ago,
    which was created and supplied as part of the Unity Perception package:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是我们刚才使用的`ColorRandomizer`的代码，它是作为 Unity Perception 包的一部分创建和提供的：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s crucial that each randomizer has the `[Serializable]` tag so that the Unity
    Editor can customize and save the randomizer as part of its UI. You can learn
    more about this tag in Unity’s [documentation](https://oreil.ly/fOeu4).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个随机器都必须有`[Serializable]`标签，以便 Unity 编辑器可以将其自定义并保存为其 UI 的一部分。您可以在 Unity 的[文档](https://oreil.ly/fOeu4)中了解有关此标签的更多信息。
- en: It’s important to include the `[AddRandomizerMenu]` attribute and specify a
    path for the randomizer to appear in the submenu of the Add Randomizer button.
    In this case, `[AddRandomizerMenu("Perception/Color Randomizer")]` makes it display
    as shown in [Figure 13-6](#fig:pickcr2).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要包含`[AddRandomizerMenu]`属性，并为随机器指定一个路径，使其显示为 [Figure 13-6](#fig:pickcr2)
    中所示。
- en: '![psml 1303](assets/psml_1303.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![psml 1303](assets/psml_1303.png)'
- en: Figure 13-6\. Pick color randomizer again
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-6\. 再次选择颜色随机器
- en: 'Follow these steps to make your own randomizer:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循以下步骤来创建您自己的随机器：
- en: Create a new script by right-clicking in the Project pane and choosing Create
    → C# Script.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过右键单击项目窗格中的空白处，选择创建 → C# 脚本来创建一个新的脚本。
- en: Name the new script *CamRandomizer.cs*, and open it, removing everything except
    the provided `import` lines.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新脚本命名为 *CamRandomizer.cs*，然后打开它，删除除提供的导入行以外的所有内容。
- en: 'Add the following imports:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下导入项：
- en: '[PRE1]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the aforementioned attribute (outside and above the class, not inside any
    methods) to make it appear in the submenu:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类之外并在任何方法之上添加上述属性，使其出现在子菜单中：
- en: '[PRE2]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the class, derived from `Randomizer`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加从`Randomizer`派生的类：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a place to store a reference to the scene’s camera so that you can move
    it using the randomizer:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个存储场景摄像机引用的位置，以便您可以使用随机器进行移动：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a `FloatParameter` so that the range for the camera’s `x` position can
    be defined in the Unity Editor:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`FloatParameter`，以便在 Unity 编辑器中定义摄像机`x`位置的范围：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, override the `OnIterationStart()` method mentioned earlier, use it to
    `Sample()` the `camX` parameter we just created, and position the camera:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，覆盖前面提到的`OnIterationStart()`方法，使用它来`Sample()`刚刚创建的`camX`参数，并定位摄像机：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the script written, you’ll need to add it to the scenario:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本编写完成后，您需要将其添加到场景中：
- en: Select the scenario from the Hierarchy and use the Add Randomizer button again,
    but this time find your newly created camera randomizer, as shown in [Figure 13-7](#fig:camrandomiser).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层级中选择场景，再次使用“添加随机器”按钮，但这次要找到你新创建的相机随机器，如图[13-7](#fig:camrandomiser)所示。
- en: '![psml 1307](assets/psml_1307.png)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 1307](assets/psml_1307.png)'
- en: Figure 13-7\. The newly created camera randomizer
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-7\. 新创建的相机随机器
- en: Find the settings for the camera randomizer, and set the range between `-7`
    and `7`, as shown in [Figure 13-8](#fig:camrandomisersettings).
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到相机随机器的设置，将范围设置在`-7`到`7`之间，如图[13-8](#fig:camrandomisersettings)所示。
- en: '![psml 1308](assets/psml_1308.png)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 1308](assets/psml_1308.png)'
- en: Figure 13-8\. The camera randomizer settings
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-8\. 相机随机器设置
- en: Drag the Main Camera into the camera randomizer’s camera field.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主摄像机拖入相机随机器的摄像机字段中。
- en: Test the randomizer by running the scenario. This time, the position of the
    camera as well as the floor color will be random, as shown in [Figure 13-9](#fig:randomimages2).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行场景来测试随机器。这一次，相机的位置以及地板的颜色将是随机的，如图[13-9](#fig:randomimages2)所示。
- en: '![psml 1309](assets/psml_1309.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![psml 1309](assets/psml_1309.png)'
- en: Figure 13-9\. The randomly generated images with both random color and camera
    position
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-9\. 随机生成的图像，具有随机颜色和相机位置
- en: What’s Next?
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: We’ve covered all the basic principles of synthesis with Unity over our two
    simulation-related chapters. Next, we’re going to combine all our new knowledge
    and build a dataset for training an image recognition system (again, this training
    would occur outside of Unity, and stepping through the process is beyond the scope
    of this book).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在两个与模拟相关的章节中涵盖了Unity合成的所有基本原理。接下来，我们将结合我们所有的新知识，并构建一个用于训练图像识别系统的数据集（再次强调，这种训练将在Unity之外进行，详细步骤超出本书的范围）。
