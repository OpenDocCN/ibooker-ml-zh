- en: Chapter 12\. Productizing Your App Using Firebase
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。使用Firebase将你的应用产品化
- en: So far in this book, you’ve explored using machine learning to create models,
    and you’ve looked into how to integrate them into Android or iOS apps using a
    variety of technologies. You could go low level with TensorFlow Lite, using the
    model directly, and dealing with the process of data conversion to and from the
    model. Or, for a number of common scenarios, you could take advantage of ML Kit
    to use a high-level API with an asynchronous programming methodology to make responsive
    applications easier to build. In all of these cases, though, you just built a
    very simple app that did inference in a single activity or view.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，你已经探索了如何使用机器学习创建模型，并学习了如何使用多种技术将其集成到Android或iOS应用中。你可以选择使用TensorFlow
    Lite低级API直接使用模型，并处理数据转换的过程。或者，针对多种常见场景，你可以利用ML Kit使用高级API和异步编程方法来构建更易于开发的响应式应用程序。然而，在所有这些情况下，你只是构建了一个非常简单的应用，在单个活动或视图中进行推断。
- en: When it comes to productizing an app, you, of course, have to go much further,
    and Firebase is designed to be a cross-platform solution that intends to help
    you build, grow, and earn from your app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到产品化应用时，你当然需要更进一步，而Firebase被设计为跨平台解决方案，旨在帮助你构建、增长和从你的应用中赚取收入。
- en: 'And while a full discussion of Firebase is beyond the scope of this book, there
    is an important feature in Firebase that’s available in the free (aka Spark) tier
    that you can really take advantage of: custom model hosting.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书不涵盖Firebase的全面讨论，但Firebase中有一个重要功能在免费（即Spark）层中可用，你可以真正利用它：自定义模型托管。
- en: Why Use Firebase Custom Model Hosting?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Firebase自定义模型托管？
- en: As you’ve seen throughout this book, creating an ML model to solve a problem
    for your users doesn’t have to be difficult. It’s relatively straightforward,
    thanks to tools like TensorFlow or TensorFlow Lite Model Maker that quickly train
    a model based on your data. What’s hard to do is to create the *right* model,
    on the obvious assumption that to be able to do this, you need to continually
    test and update your model with your users, validating how it performs, not just
    from a speed or accuracy perspective, but also how it impacts their use of your
    app. Does the right model lead to better engagement? Does the wrong model mean
    that users drop out of your app? Does it lead to more interaction with adverts
    or in-app purchases?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在整本书中所看到的，为用户解决问题创建ML模型并不难。得益于诸如TensorFlow或TensorFlow Lite模型制作器这样的工具，这相对来说是相当简单的，它可以根据你的数据快速训练一个模型。难的是创建*正确*的模型，显而易见的假设是，要能够做到这一点，你需要不断地测试和更新你的模型，验证它如何执行，不仅从速度或准确性的角度来看，还要看它如何影响用户使用你的应用。正确的模型是否能带来更好的参与度？错误的模型是否意味着用户会放弃你的应用？它是否会导致与广告或应用内购买的更多互动？
- en: The goal of Firebase is to help you answer all of those questions through things
    like analytics, A/B testing, remote configuration, and more.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase的目标是通过分析、A/B测试、远程配置等手段帮助你回答所有这些问题。
- en: But when using ML models, of course, in order to be able to *ask* these questions
    effectively, you need a way to get multiple models deployed and have your audience
    segmented according to these models. You’ve created v1 of a model, and it’s working
    well. You’ve learned a lot from your users about it, and have gathered new data
    to create a new model. You want to deploy that to some of your users to test it
    and have a carefully monitored rollout.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在使用ML模型时，当然，为了能够有效地*提问*这些问题，你需要一种方法来部署多个模型，并根据这些模型对你的受众进行分割。你已经创建了一个模型的v1版本，并且它运行良好。你从用户那里学到了很多关于它的信息，并收集了新数据来创建一个新模型。你希望将其部署到一些用户那里进行测试，并进行仔细监控的推出。
- en: How would you proceed with this?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你将如何继续进行？
- en: Well, that’s where custom model hosting can be the onramp to the rest of Firebase’s
    services for you as a developer using ML models. We’ll explore one scenario in
    this chapter, called “remote configuration,” and from there, if you’re interested,
    you’ll be able to expand to the rest of the services available on the platform.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，对于使用ML模型的开发者来说，Firebase自定义模型托管可以是通往Firebase平台上其余服务的入口。在本章中，我们将探讨一个场景，称为“远程配置”，如果你感兴趣，你可以从那里扩展到平台上其他可用的服务。
- en: So, in order to begin, let’s first create a scenario where we have multiple
    models, and for that, we’ll return to TensorFlow Lite Model Maker.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了开始，让我们首先创建一个场景，在这个场景中，我们有多个模型，为此，我们将返回到TensorFlow Lite模型制作器。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: While playing with the Firebase Console, you may have noticed a number of tiles
    for different APIs. These are actually for ML Kit, which we covered in earlier
    chapters! It used to be a part of Firebase before it spun out on its own, and
    links to it are still available within the console.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Firebase 控制台时，您可能会注意到不同 API 的多个瓷砖。实际上，这些是用于 ML Kit 的，我们在之前的章节中已经涵盖过！它曾经是
    Firebase 的一部分，然后独立出来，但在控制台中仍然可以找到与之相关的链接。
- en: Create Multiple Model Versions
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多个模型版本
- en: For this scenario, you can create a simple test of multiple models using TensorFlow
    Lite Model Maker. Instead of working with different datasets to see how different
    models may behave, you can also create multiple models using different underlying
    specs. As Model Maker uses transfer learning under the hood, it’s the perfect
    vehicle for creating different models, and you could theoretically deploy different
    versions to different users to see which architecture works best for your scenario.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，您可以使用 TensorFlow Lite Model Maker 创建多个模型的简单测试。不需要使用不同的数据集来查看不同模型的行为，您也可以使用不同的基础规格创建多个模型。由于
    Model Maker 在底层使用迁移学习，它是创建不同模型的理想工具，您理论上可以将不同版本部署给不同用户，以查看哪种架构最适合您的情况。
- en: 'If we return to the “flowers” example from earlier chapters, we can get our
    data, and split it into training and validation sets like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到之前章节中的“flowers”示例，我们可以获取我们的数据，并像这样将其分成训练集和验证集：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, using TensorFlow Lite Model Maker, we can create an image classifier
    and export it like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 TensorFlow Lite Model Maker，我们可以创建一个图像分类器并导出它，如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the *mm_flowers* directory you’ll now have a TensorFlow Lite model and associated
    metadata, which you can download and use in your apps as explored in [Chapter 9](ch09.html#creating_custom_models).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在*mm_flowers*目录中，现在会有一个 TensorFlow Lite 模型和相关元数据，您可以在您的应用程序中下载并使用，如第[9章](ch09.html#creating_custom_models)所探讨的。
- en: You’ll notice that you simply called `image_classifier.create` without defining
    any kind of spec. This will create an image classifier model using the EfficientNet
    model as the default underlying model type. This model architecture was chosen
    because it is recognized as a state-of-the-art image classifier that works with
    very small models, and thus is effective for mobile. You can learn more about
    EfficientNet at [*https://tfhub.dev/google/collections/efficientnet/1*](https://tfhub.dev/google/collections/efficientnet/1).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，您只需调用`image_classifier.create`而不定义任何类型的规格。这将使用 EfficientNet 模型作为默认的底层模型类型创建一个图像分类器模型。选择这种模型架构是因为它被认为是一种先进的图像分类器，适用于非常小的模型，因此非常适合移动设备。您可以在[*https://tfhub.dev/google/collections/efficientnet/1*](https://tfhub.dev/google/collections/efficientnet/1)了解更多关于
    EfficientNet 的信息。
- en: However, there’s a family of model architectures called MobileNet, which, as
    its name suggests, is perfectly suited for mobile scenarios. So, what if you *also*
    create a model that uses MobileNet as the underlying architecture, and have this
    as a second model. You can deploy the EfficientNet-based model to some of your
    users, and the MobileNet-based one to others. You can then measure the efficacy
    of these models to help you decide which one to roll out to all users.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个被称为 MobileNet 的模型架构系列，正如其名字所示，非常适合移动场景。因此，如果您*还*创建一个使用 MobileNet 作为基础架构的模型，并将其作为第二个模型，那将如何呢？您可以将基于
    EfficientNet 的模型部署给一些用户，将基于 MobileNet 的模型部署给另一些用户。然后，您可以衡量这些模型的效果，帮助您决定向所有用户推出哪个版本。
- en: 'So, to create a MobileNet model in TensorFlow Lite Model Maker, you can use
    the spec parameter to override the default, like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要在 TensorFlow Lite Model Maker 中创建一个 MobileNet 模型，您可以使用 spec 参数来覆盖默认设置，就像这样：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After the model has trained, you’ll now have *another* TFLite model, this one
    based on MobileNet, present in the *mm_flowers2* directory. Download that and
    keep it separate from the first. You’ll upload both of these to Firebase in the
    next section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型训练完成后，您现在将会得到*另一个*基于 MobileNet 的 TFLite 模型，这个模型存在于*mm_flowers2*目录中。下载它并与第一个模型分开保管。您将在下一节将它们都上传到
    Firebase。
- en: Using Firebase Model Hosting
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Firebase 模型托管
- en: Firebase Model Hosting gives you the ability to host models in Google’s infrastructure.
    These models can be downloaded and used by your app, so, if your users are connected,
    you can manage which models they use and how to download them. You’ll explore
    that in this section, but first, you’ll need to create a project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 模型托管使您能够在 Google 的基础设施中托管模型。这些模型可以被您的应用程序下载和使用，因此，如果您的用户已连接，您可以管理他们使用哪些模型以及如何下载它们。您将在本节中探索这一点，但首先，您需要创建一个项目。
- en: 'Step 1: Create a Firebase Project'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：创建 Firebase 项目
- en: To use Firebase, you’ll have to create a Firebase project using the Firebase
    Console. To get started with this, visit [*http://firebase.google.com*](http://firebase.google.com).
    You’ll be able to try a demo and watch a video about Firebase. When you’re ready,
    click “Get started.” See [Figure 12-1](#getting_started_with_firebase).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Firebase，您需要使用 Firebase 控制台创建一个 Firebase 项目。要开始使用，请访问[*http://firebase.google.com*](http://firebase.google.com)。您可以尝试演示并观看有关
    Firebase 的视频。准备好后，点击“开始”。参见[图 12-1](#getting_started_with_firebase)。
- en: '![](assets/aiml_1201.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1201.png)'
- en: Figure 12-1\. Getting started with Firebase
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-1\. 开始使用 Firebase
- en: Once you click this button, you’ll be taken to the console page with a list
    of your existing projects. If it’s your first time, you’ll just see the “Add project”
    button as shown in [Figure 12-2](#the_firebase_console).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 单击此按钮后，您将进入控制台页面，显示您现有项目的列表。如果这是您第一次使用，您将只看到“添加项目”按钮，如[图 12-2](#the_firebase_console)所示。
- en: '![](assets/aiml_1202.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1202.png)'
- en: Figure 12-2\. The Firebase Console
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-2\. Firebase 控制台
- en: Note that these screenshots were taken using the US version of the Firebase
    Console; your experience may vary slightly, but the broad concepts will be the
    same.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些截图是使用 Firebase 控制台的美国版本进行的；您的体验可能略有不同，但基本概念是相同的。
- en: Click the “Add project” button and you’ll be taken to a wizard that will guide
    you step by step through creating a project. You’ll start with the project name.
    See [Figure 12-3](#naming_your_project).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“添加项目”按钮，您将进入一个向导，逐步指导您完成项目创建过程。您将从项目名称开始。参见[图 12-3](#naming_your_project)。
- en: '![](assets/aiml_1203.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1203.png)'
- en: Figure 12-3\. Naming your project
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-3\. 给您的项目命名
- en: As you can see here, I named mine “multi-flowers,” but you can choose whatever
    name you like! Press Continue and it will ask if you want to enable Google Analytics
    for your project. I’d recommend keeping this as the default, which is to enable
    them. You can see a full list of these analytics features in [Figure 12-4](#adding_google_analytics).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我将其命名为“multi-flowers”，但您可以选择任何您喜欢的名称！点击“继续”，它将询问您是否要为项目启用 Google Analytics。我建议保持默认设置，即启用它们。您可以在[图 12-4](#adding_google_analytics)中看到这些分析功能的完整列表。
- en: The next step is to create or use a Google Analytics account as depicted in
    [Figure 12-5](#configuring_google_analytics).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建或使用 Google Analytics 帐户，如[图 12-5](#configuring_google_analytics)所示。
- en: '![](assets/aiml_1204.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1204.png)'
- en: Figure 12-4\. Adding Google Analytics
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-4\. 添加 Google Analytics
- en: '![](assets/aiml_1205.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1205.png)'
- en: Figure 12-5\. Configuring Google Analytics
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-5\. 配置 Google Analytics
- en: If you don’t have an account already, clicking on the Select an Account dropdown
    gives you the option to “Create a new account.” See [Figure 12-6](#creating_a_new_google_analytics_account).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有帐户，单击“选择帐户”下拉菜单将显示“创建新帐户”的选项。参见[图 12-6](#creating_a_new_google_analytics_account)。
- en: '![](assets/aiml_1206.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1206.png)'
- en: Figure 12-6\. Creating a new Google Analytics account
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-6\. 创建新的 Google Analytics 帐户
- en: Once you’ve done this, you can then check your settings for analytics, and after
    accepting the terms, you can create the project. See [Figure 12-7](#google_analytics_configuration_options).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您可以检查分析设置，接受条款后即可创建项目。参见[图 12-7](#google_analytics_configuration_options)。
- en: '![](assets/aiml_1207.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1207.png)'
- en: Figure 12-7\. Google Analytics configuration options
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-7\. Google Analytics 配置选项
- en: It may take a few moments, but once Firebase has done its thing and created
    your project, you’ll see something like [Figure 12-8](#firebase_finishes_creating_your_project),
    but with your project name instead of “multi-flowers.”
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要一些时间，但一旦 Firebase 完成操作并创建了您的项目，您将看到类似于[图 12-8](#firebase_finishes_creating_your_project)，但项目名称将替换为“multi-flowers”。
- en: '![](assets/aiml_1208.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1208.png)'
- en: Figure 12-8\. Firebase finishes creating your project
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-8\. Firebase 完成创建您的项目
- en: You are now ready to use Firebase with this project! In the next step, you’ll
    configure model hosting!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用此项目使用 Firebase 了！在下一步中，您将配置模型托管！
- en: 'Step 2: Use Custom Model Hosting'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2：使用自定义模型托管
- en: In the previous section, you went through the steps to create a new Firebase
    project that you can use to host multiple models. To do this, first, find the
    Machine Learning section in the Firebase Console. You should see a black toolbar
    on the righthand side of the screen containing all of the Firebase tools. One
    of them will look like a little robot head. See [Figure 12-9](#finding_the_machine_learning_entry_in_t).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您已经经历了创建新的 Firebase 项目的步骤，可以用来托管多个模型。为此，请首先找到 Firebase 控制台中的机器学习部分。您应该在屏幕右侧看到一个黑色工具栏，其中包含所有
    Firebase 工具。其中一个看起来像一个小机器人头像。参见 [图 12-9](#finding_the_machine_learning_entry_in_t)。
- en: '![](assets/aiml_1209.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1209.png)'
- en: Figure 12-9\. Finding the Machine Learning entry in the Firebase Console
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-9\. 在 Firebase 控制台中找到机器学习入口
- en: 'Select this, and you’ll see an option to “Get Started.” This will take you
    to the Machine Learning page in the Firebase Console. At the top of the screen,
    you’ll see three tabs: APIs, Custom, and AutoML. Select Custom to see the TensorFlow
    Lite model hosting screen. See [Figure 12-10](#custom_model_hosting).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项，您将看到一个“开始使用”的选项。这将带您进入 Firebase 控制台的机器学习页面。屏幕顶部会显示三个标签页：API、自定义和AutoML。选择自定义以查看
    TensorFlow Lite 模型托管屏幕。参见 [图 12-10](#custom_model_hosting)。
- en: '![](assets/aiml_1210.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1210.png)'
- en: Figure 12-10\. Custom model hosting
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-10\. 自定义模型托管
- en: In the center of the screen, you’ll see a big blue button to add a custom model.
    Click it and you’ll get taken through a set of steps to host your models. Make
    sure you have the two models from earlier on and go through these steps.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕中央，您将看到一个大蓝色按钮添加自定义模型。单击它，您将被带过一系列步骤来托管您的模型。确保您之前有两个模型，并完成这些步骤。
- en: So, for example, if you have your EfficientNet-based model, you can start uploading
    this by calling it “flowers1.” See [Figure 12-11](#starting_to_host_a_model).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，如果您有基于 EfficientNet 的模型，您可以通过称其为“flowers1”来开始上传。参见 [图 12-11](#starting_to_host_a_model)。
- en: '![](assets/aiml_1211.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1211.png)'
- en: Figure 12-11\. Starting to host a model
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-11\. 开始托管一个模型
- en: Hit Continue and then you can drag and drop the first model you created onto
    the form. After this, you’ll see a code snippet that you can use to access the
    model. You’ll use that later. Repeat this for the second model, calling it “flowers2,”
    and you’ll see something like [Figure 12-12](#hosting_multiple_models).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“继续”，然后您可以将第一个创建的模型拖放到表单上。之后，您将看到一个代码片段，您可以使用它来访问该模型。稍后会用到它。重复此过程以第二个模型，称之为“flowers2”，您将看到类似
    [图 12-12](#hosting_multiple_models) 的内容。
- en: '![](assets/aiml_1212.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1212.png)'
- en: Figure 12-12\. Hosting multiple models
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-12\. 托管多个模型
- en: Now that you have the models, you can start using them in your apps. In the
    next step, you’ll see how to integrate Firebase into an Android app, so you can
    see how to use flowers1 in your app. After that, you’ll extend with remote configuration
    so that some users get flowers1 and others get flowers2.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经拥有了模型，可以开始在您的应用程序中使用它们。在下一步中，您将看到如何将 Firebase 集成到 Android 应用程序中，以便您可以看到如何在应用程序中使用
    flowers1。之后，您将通过远程配置进行扩展，以便某些用户获得 flowers1，而其他用户获得 flowers2。
- en: 'Step 3: Create a Basic Android App'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 3：创建一个基本的 Android 应用程序
- en: In this step, you’ll create a simple Android app that will use the hosted model
    to do a basic model inference on flowers. First, use Android Studio to create
    a new app with the empty activity template. Call it “multi-flowers.” I’m not going
    to share all of the code for the app in this chapter, but you can access the full
    app in the repo if you need the code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，您将创建一个简单的 Android 应用程序，该应用程序将使用托管模型对花卉进行基本的模型推理。首先，使用 Android Studio 创建一个新的应用程序，使用空活动模板。将其命名为“multi-flowers”。本章节不会分享应用程序的所有代码，但如果您需要代码，可以在存储库中找到完整的应用程序。
- en: To complete the following example and present six different flower images, here’s
    the file you’ll need to edit (note that it’s the same as the [flowers sample](https://oreil.ly/KqJrM)
    from [Chapter 10](ch10.html#using_custom_models_in_android)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成以下示例并展示六种不同的花卉图像，请编辑以下文件（请注意，它与 [第10章](ch10.html#using_custom_models_in_android)
    的 [flowers 示例](https://oreil.ly/KqJrM) 相同）。
- en: 'Here’s a snippet, cut for brevity:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个为简洁起见切掉的片段：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You may notice that these ImageView controls refer to images such as dandelion
    and daisy. You should add these images to your app in the layout directory. You
    can get the images [from the repo](https://oreil.ly/8oqnb).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到这些 ImageView 控件引用了蒲公英和雏菊等图像。您应将这些图像添加到布局目录中的应用程序中。您可以从存储库获取这些图像 [here](https://oreil.ly/8oqnb)。
- en: If you launch the app now, it won’t do much other than display the flowers.
    Before continuing, let’s now explore how to add Firebase to it!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在启动应用程序，除了显示花朵之外，不会有太多其他操作。在继续之前，让我们来看看如何将 Firebase 添加到应用程序中！
- en: 'Step 4: Add Firebase to the App'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 4：将 Firebase 添加到应用中
- en: Android Studio includes Firebase integration that makes it easy for you to use
    Firebase features in an Android app. You can find it on the Tools menu. See [Figure 12-13](#accessing_the_firebase_tools).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 包含 Firebase 集成，使您可以轻松在 Android 应用程序中使用 Firebase 功能。您可以在工具菜单中找到它。参见[图 12-13](#accessing_the_firebase_tools)。
- en: '![](assets/aiml_1213.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![aiml_1213.png](assets/aiml_1213.png)'
- en: Figure 12-13\. Accessing the Firebase tools
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-13\. 访问 Firebase 工具
- en: Select this and you’ll be taken to the Firebase assistant pane on the righthand
    side of the screen. You’ll use this to add Firebase, as well as Firebase remote
    configuration, to your app. Using the assistant, find Remote Config. Select “Set
    up Firebase Remote Config” as shown in [Figure 12-14](#using_remote_config).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项将带您到屏幕右侧的 Firebase 助手窗格。您将使用它来添加 Firebase 和 Firebase 远程配置到您的应用程序。使用助手查找远程配置。选择“设置
    Firebase 远程配置”，如图 12-14 所示。
- en: '![](assets/aiml_1214.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![aiml_1214.png](assets/aiml_1214.png)'
- en: Figure 12-14\. Using Remote Config
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-14\. 使用远程配置
- en: The pane will change to a number of steps to follow, the first of which is to
    Connect to Firebase. Press this button. Your browser will open and navigate to
    the Firebase Console. From there, you should select the project that you created
    earlier in this chapter. You should see a screen like [Figure 12-15](#connecting_your_app_to_firebase),
    where your Firebase Android app is connected to Firebase.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 窗格将变成要遵循的一系列步骤，第一步是连接到 Firebase。按下此按钮。您的浏览器将打开并导航至 Firebase 控制台。从那里，您应该选择在本章前面创建的项目。您将看到一个类似图 12-15
    的屏幕，显示您的 Firebase Android 应用程序已连接到 Firebase。
- en: '![](assets/aiml_1215.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![aiml_1215.png](assets/aiml_1215.png)'
- en: Figure 12-15\. Connecting your app to Firebase
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-15\. 将您的应用连接到 Firebase
- en: Press the Connect button, and when it’s ready, go back to Android Studio and
    you’ll see that your app is connected. The second option in the assistant is to
    “Add Remote Config to your app.” Press the button. A dialog will pop up telling
    you the changes that are necessary to include Remote Config. It will add entries
    to your build.gradle and then synchronize your Gradle files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 点击连接按钮，当准备好时，返回 Android Studio，您将看到您的应用已连接。助手中的第二个选项是“将远程配置添加到您的应用程序。”点击按钮。会弹出一个对话框，告诉您包含远程配置所需的更改。它将向您的
    build.gradle 添加条目，然后同步您的 Gradle 文件。
- en: 'Before continuing, also add TensorFlow Lite, the Vision Task Libraries, and
    other Firebase libraries to your app-level build.gradle:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，还要将 TensorFlow Lite、Vision 任务库和其他 Firebase 库添加到您的应用级 build.gradle 文件中：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It’s as easy as that to get Firebase connected to your app!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Firebase 连接到您的应用程序就是这么简单！
- en: 'Step 5: Get the Model from Firebase Model Hosting'
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 5：从 Firebase 模型托管获取模型
- en: Earlier you uploaded the model to Firebase Model Hosting, with flowers1 being
    the name given to the EfficientNet-based model, and flowers2 the name for the
    MobileNet-based one.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前将模型上传到 Firebase 模型托管中，其中 flowers1 是基于 EfficientNet 的模型的名称，flowers2 是基于 MobileNet
    的模型的名称。
- en: The full code for this app is available at [*https://github.com/lmoroney/odmlbook/tree/main/BookSource/Chapter12/MultiFlowers*](https://github.com/lmoroney/odmlbook/tree/main/BookSource/Chapter12/MultiFlowers).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的完整代码可以在 [*https://github.com/lmoroney/odmlbook/tree/main/BookSource/Chapter12/MultiFlowers*](https://github.com/lmoroney/odmlbook/tree/main/BookSource/Chapter12/MultiFlowers)
    上找到。
- en: 'Create a function for loading the model from Firebase Model Hosting. Within
    this you should set up a `CustomModelDownloadConditions` object, like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个从 Firebase 模型托管加载模型的函数。在其中，您应该设置一个 `CustomModelDownloadConditions` 对象，如下所示：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This function is called `loadModel` in the sample app at the GitHub repo.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 存储库的示例应用程序中，此功能称为 `loadModel`。
- en: 'Once you’ve done that, you can get the model using `FirebaseModelDownloader`.
    This exposes a `getModel` method that allows you to pass in the name of the string
    representing the model (i.e., “flowers1” or “flowers2”) and how to download the
    model, based on the conditions you created earlier. It exposes an `addOnSuccessListener`,
    which will get called when the model downloads successfully:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成了上述步骤，您可以使用 `FirebaseModelDownloader` 获取模型。这会公开一个 `getModel` 方法，允许您传入表示模型的字符串名称（即“flowers1”或“flowers2”），以及根据您之前创建的条件来下载模型。它还公开了一个
    `addOnSuccessListener`，在模型成功下载时调用：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Within the `onSuccessListener` callback, you can then instantiate an `ImageClassifier`
    using the model (`ImageClassifier` comes from the TensorFlow Lite Task Library
    that you included in your *build.gradle*):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onSuccessListener`回调中，您可以实例化一个`ImageClassifier`，使用模型（`ImageClassifier`来自您在*build.gradle*中包含的
    TensorFlow Lite 任务库）：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The callback returns an instance of `CustomModel`, called model, which can be
    passed to the `ImageClassifier`’s `createFromFileAndOptions` to instantiate the
    model. To make later coding easier, we use the options to return only one result.
    Once this is done, the model is ready to go and we can make inferences using it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 回调返回一个名为`model`的`CustomModel`实例，可以将其传递给`ImageClassifier`的`createFromFileAndOptions`以实例化模型。为了使后续编码更容易，我们使用选项仅返回一个结果。完成此操作后，模型已准备就绪，我们可以使用它进行推理。
- en: 'Inference using the task APIs is pretty straightforward. We convert the image
    to a `TensorImage`, and pass this to the `classify` method of the `imageClassifier`.
    It will return a set of results, the first entry of which will contain our answer,
    and we can pull the label and score from that:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任务 API 进行推理非常简单。我们将图像转换为`TensorImage`，并将其传递给`imageClassifier`的`classify`方法。它将返回一组结果，第一个条目将包含我们的答案，我们可以从中提取标签和分数：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, when you run the app, you’ll see an inference result pop up in the `Toast`
    when the user selects a flower. The next step is to set up remote configuration
    so that different users get different models.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您运行应用程序时，您将看到当用户选择一个花朵时，推理结果将弹出`Toast`。下一步是设置远程配置，以便不同用户获取不同的模型。
- en: 'Step 6: Use Remote Configuration'
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '步骤 6: 使用远程配置'
- en: One of the (many) services in Firebase you can use to improve apps that use
    machine learning is remote configuration. Let’s now explore how to set it up so
    that some of your users will get the flowers1 model, and others will get the flowers2
    one.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 中的（众多）服务之一是远程配置，可用于改进使用机器学习的应用程序。现在让我们来看看如何设置它，以便一些用户将获得`flowers1`模型，而其他用户将获得`flowers2`模型。
- en: Start by finding the Remote Configuration section in Firebase Console. It will
    look like two diverging arrows as depicted in [Figure 12-16](#finding_the_remote_configuration_sectio).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先找到 Firebase 控制台中的远程配置部分。它看起来像两个分叉的箭头，如[Figure 12-16](#finding_the_remote_configuration_sectio)所示。
- en: '![](assets/aiml_1216.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1216.png)'
- en: Figure 12-16\. Finding the Remote Configuration section in Firebase Console
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 12-16\. 在 Firebase 控制台中找到远程配置部分
- en: Once you’ve done this, you’ll see the ability to “Add parameter,” where you
    specify a parameter key and a default value. So, for example, you could use “model_name”
    and “flowers1” respectively as in [Figure 12-17](#initializing_remote_configuration).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您将看到“添加参数”的能力，您需要在其中指定参数键和默认值。例如，您可以分别使用“model_name”和“flowers1”，如[Figure 12-17](#initializing_remote_configuration)所示。
- en: '![](assets/aiml_1217.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1217.png)'
- en: Figure 12-17\. Initializing remote configuration
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 12-17\. 初始化远程配置
- en: So now, instead of hardcoding “flowers1” as your model name, you could read
    it from remote configuration if you wanted. But that’s not really very useful.
    Where remote configuration really begins to show its power is when you select
    “Add value for condition” on the top right.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以从远程配置中读取“flowers1”作为模型名称，而不是将其硬编码到应用程序中。但这并不是非常有用的。远程配置真正显示其威力的地方在于，当您选择右上角的“为条件添加值”时。
- en: Select this, and you’ll be given a button to “Define new Condition.” Select
    that, and you’ll get a dialog for the condition. See [Figure 12-18](#defining_a_new_condition).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项后，您将看到一个“定义新条件”的按钮。选择它，您将获得条件的对话框。参见[Figure 12-18](#defining_a_new_condition)。
- en: '![](assets/aiml_1218.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1218.png)'
- en: Figure 12-18\. Defining a new condition
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 12-18\. 定义新条件
- en: Once you’ve given the condition a name, you can then select the dropdown under
    “Applies if…” to specify the condition. For example, if you want users in particular
    countries to get a different value, you can select Country/Region in the “Applied
    if…” dialog, and select the countries you want. In [Figure 12-19](#setting_up_a_condition_by_country),
    you can see that I selected two countries (Ireland and Cyprus) and named the condition
    accordingly.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 完成条件命名后，您可以选择“适用于…”下拉列表，以指定条件。例如，如果您希望特定国家/地区的用户获得不同的值，您可以在“适用于…”对话框中选择国家/地区，并选择您想要的国家。在[Figure 12-19](#setting_up_a_condition_by_country)中，您可以看到我选择了两个国家（爱尔兰和塞浦路斯），并相应地命名了条件。
- en: '![](assets/aiml_1219.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1219.png)'
- en: Figure 12-19\. Setting up a condition by country
  id: totrans-119
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 12-19\. 按国家设置条件
- en: After clicking “Create condition,” you’ll be returned to the “Add a parameter”
    dialog, where you can specify the value for the users that match that condition.
    So, for example, see [Figure 12-20](#adding_a_different_value_for_the_condit),
    where I specified that the users in the `ireland_and_cyprus_users` cohort would
    get flowers2, whereas everyone else will get flowers.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建条件”后，你将返回到“添加参数”对话框，在那里你可以指定符合该条件的用户的值。例如，请参见[图 12-20](#adding_a_different_value_for_the_condit)，我指定了ireland_and_cyprus_users队列的用户将得到flowers2，而其他人将得到flowers。
- en: '![](assets/aiml_1220.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1220.png)'
- en: Figure 12-20\. Adding a different value for the condition users
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-20\. 为条件用户添加不同的值
- en: This is a bit of a silly example for testing like this, as I don’t have *any*
    users, much less some in Ireland or Cyprus. So let’s change it up a little. Delete
    the ireland_and_cyprus_users cohort, by clicking the black “x” to the right of
    the condition as shown in [Figure 12-20](#adding_a_different_value_for_the_condit).
    Then click to add a new parameter. You may be asked to “publish the changes” and
    if so, go ahead and do so.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有些傻乎乎的测试示例，因为我没有*任何*用户，更别说在爱尔兰或塞浦路斯有用户了。所以让我们稍微改变一下。通过点击条件右边的黑色“x”来删除ireland_and_cyprus_users队列。然后点击添加一个新参数。如果需要“发布更改”，则请执行此操作。
- en: After publishing, the dialog for configuring remote configuration will look
    a little different, but that’s OK, it still works. Use the “Add parameter” button
    to add a new parameter, and call it “random_users.” Add a condition for users
    in a random percentile and specify 50%. See [Figure 12-21](#adding_random_users_in_the_fivezeroperc).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 发布后，配置远程配置的对话框看起来会有些不同，但没关系，它仍然有效。使用“添加参数”按钮添加一个新参数，并称其为“random_users”。添加一个条件，适用于随机百分位并指定50%。参见[图 12-21](#adding_random_users_in_the_fivezeroperc)。
- en: '![](assets/aiml_1221.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1221.png)'
- en: Figure 12-21\. Adding random users in the 50% percentile
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-21\. 在50%百分位数中添加随机用户
- en: For these users, ensure that their value is flowers2, and the rest are flowers1\.
    Your dialog should look like [Figure 12-22](#giving_half_your_users_flowerstwo).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些用户，请确保其值为flowers2，其余为flowers1。你的对话框应该看起来像[图 12-22](#giving_half_your_users_flowerstwo)。
- en: '![](assets/aiml_1222.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_1222.png)'
- en: Figure 12-22\. Giving half your users flowers2
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-22\. 给一半用户送花花2
- en: Make sure that the configuration is published, and then you’re ready to go to
    the next step.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 确保配置已发布，然后你可以继续下一步。
- en: 'Step 7: Read Remote Configuration in Your App'
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 7：在你的应用程序中读取远程配置
- en: Return to your app and add the following method, which will get an instance
    of remote configuration, read it, and then get the value of the model name from
    it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 返回你的应用程序并添加以下方法，它将获取远程配置的实例，读取它，然后从中获取模型名称的值。
- en: 'This will first set up a configuration object for remote configuration, which
    is just set in this case to time out after an hour. It will then use these with
    the `fetchAndActivate` method to read a variable from remote configuration. Then,
    at runtime, Firebase will determine which cohort this user is in and give them
    either flowers1 or flowers2 as the value for the remote variable:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先设置一个远程配置对象，本例中仅设置为一小时后超时。然后使用`fetchAndActivate`方法从远程配置中读取变量。然后在运行时，Firebase将确定此用户属于哪个队列，并根据远程变量为其分配flowers1或flowers2的值：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once that is done, the `loadModel()` and `initViews()` methods will be called.
    Recall earlier that you called these in the `onCreate` event, so delete them from
    that, and replace them with a call to this new method:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，将调用`loadModel()`和`initViews()`方法。回想一下，你之前在`onCreate`事件中调用了它们，所以请从那里删除它们，并用调用这个新方法替换它们：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now when you launch your app, you’ll randomly get either flowers1 or flowers2
    as the model!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你启动你的应用程序时，你将随机得到flowers1或flowers2作为模型的值！
- en: Next Steps
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一步
- en: Given that half of your users are now going to get flowers1, and the other half
    are going to get flowers2, you could, for example, add analytics to see the performance
    of inference and log it. Which users are getting faster inference? Or, you could
    also, for example, check user activity to see which users drop out of your app,
    and trace if that’s as a result of the model. Beyond analytics, you could also
    run A/B tests, use predictions based on behavior, and a whole lot more!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于现在一半的用户将会收到 flowers1，另一半将会收到 flowers2，例如，你可以添加分析来查看推断的性能并记录下来。哪些用户得到了更快的推断？或者，例如，你还可以检查用户活动，看看是哪些用户从你的应用中退出，以及是否是模型的结果。除了分析，你还可以运行
    A/B 测试，根据行为进行预测等等！
- en: While the needs of every app are different, hopefully this will give you some
    inspiration for what’s possible in growing an ML app when using Firebase. For
    some inspiration from apps that were able to use things like analytics, predictions,
    and remote configuration to grow, check out [*https://firebase.google.com/use-cases*](https://firebase.google.com/use-cases).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个应用的需求都不同，但希望这能为你在使用 Firebase 扩展 ML 应用时提供一些灵感。如果你需要从能够使用分析、预测和远程配置等功能来扩展应用的案例中获得一些启发，可以查看[*https://firebase.google.com/use-cases*](https://firebase.google.com/use-cases)。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you saw how you can use Firebase Model Hosting with a TensorFlow
    Lite model, and then explored how you could use some of the rest of the Firebase
    infrastructure, starting with remote configuration. Using this combination of
    technologies, you’ll be able to, for example, manage multiple model versions or
    types across different audiences, and explore the optimal way to get models into
    your users’ hands. We just touched the surface of what’s possible, and I’d encourage
    you to explore other options! And while we just explored Firebase in Android,
    the APIs work equally well across iOS and the web too.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了如何使用 Firebase 模型托管与 TensorFlow Lite 模型，然后探索了如何利用 Firebase 的其他基础设施，从远程配置开始。通过这些技术的结合，例如，你可以管理不同受众中的多个模型版本或类型，并探索将模型传递给用户的最佳方法。我们只是触及了可能性的表面，我鼓励你探索其他选项！尽管我们刚刚在
    Android 上探索了 Firebase，但这些 API 在 iOS 和 Web 上同样适用。
- en: Speaking of iOS, no book about on-device machine learning would be complete
    without a look at the iOS-specific technologies Core ML and Create ML, so you’ll
    explore them in [Chapter 13](ch13.html#create_ml_and_core_ml_for_simple_ios_ap)!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 提到 iOS，关于设备端机器学习的书籍如果不涉及 iOS 特有的技术 Core ML 和 Create ML，就显得不完整了，因此你将在[第13章](ch13.html#create_ml_and_core_ml_for_simple_ios_ap)中探索它们！
