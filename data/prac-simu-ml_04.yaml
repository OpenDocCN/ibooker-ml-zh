- en: Chapter 3\. Creating Your First Synthesized Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章\. 创建您的第一个合成数据
- en: This chapter introduces synthesis, the second pillar of this book, as discussed
    in [Chapter 1](ch01.html#introducing-the-tools). Here the focus is on the tools
    and process you’ll be using to synthesize data for machine learning, and how it
    ties into the work you’ve done so far for simulation as well as how it’s quite
    different.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了合成，本书的第二支柱，正如[第一章](ch01.html#introducing-the-tools)中所讨论的。这里重点介绍了用于机器学习数据合成的工具和流程，以及它与您到目前为止为模拟所做的工作如何关联，以及它与模拟工作的不同之处。
- en: By the end of this chapter, you’ll be generating the *world’s most disappointing
    synthesized data*! But you’ll be prepared to make *far more interesting data*
    in future chapters. We promise. Stick with us.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将生成*世界上最令人失望的合成数据*！但是您将准备好在未来的章节中生成*更有趣的数据*。我们承诺。请继续关注我们。
- en: As we mentioned in [“Unity”](ch01.html#ch1-tools-unity), the primary tool we’ll
    be using for our initial foray into synthesis is a Unity package called *Perception*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[“Unity”](ch01.html#ch1-tools-unity)中提到的，我们在合成的初探中将主要使用一个名为*感知*的Unity包作为工具。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'We’re not going to be doing quite as much synthesis in this book as we do simulation.
    This is simply because there’s not as much to learn: simulation is a tremendously
    wide field with many different approaches that you can take, while synthesis with
    Unity mostly boils down to the different kinds of randomizations that you want
    to perform in order to generate the data you need. We’ll teach you everything
    you need to know, but there will be fewer activities.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们在合成方面的工作量不会像模拟那样多。这仅仅是因为需要学习的内容不多：模拟是一个非常广泛的领域，有许多不同的方法可以采用，而在Unity中进行合成主要是要根据需要执行不同类型的随机化，以生成所需的数据。我们会教你一切必要的知识，但活动会比较少。
- en: Unity Perception
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity感知
- en: Unity’s Perception package turns the Unity game engine into a tool for generating
    synthetic datasets—primarily images—for use in ML workflows that are primarily
    outside of Unity.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的感知包将Unity游戏引擎转变为一个工具，用于生成用于机器学习工作流程（主要不在Unity内部的工作流程）的合成数据集，主要是图像。
- en: The Perception Framework provides an array of useful tools, ranging from dataset
    capture, to object labeling, image capture, and beyond. You can create straightforward
    object–label associations and have them fed directly to whatever part of an ML
    toolchain you require. Perception can even help you generate bounding boxes and
    semantic segmentation masks, as well as scene generation and beyond. It’s really
    powerful.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 感知框架提供了一系列有用的工具，从数据集捕获、对象标记、图像捕获等等。您可以创建直观的对象-标签关联，并直接将它们馈送到您需要的机器学习工具链的任何部分。感知甚至可以帮助您生成边界框和语义分割蒙版，以及场景生成等等。它真的非常强大。
- en: The Perception Framework is an open source project and freely available via
    [its GitHub project](https://oreil.ly/x0tKg). An example of its features is shown
    in [Figure 3-1](#fig:perception.png).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 感知框架是一个开源项目，可以通过[其GitHub项目](https://oreil.ly/x0tKg)免费获取。其功能示例显示在[图 3-1](#fig:perception.png)中。
- en: '![psml 0301](assets/psml_0301.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0301](assets/psml_0301.png)'
- en: Figure 3-1\. Unity’s Perception Framework
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. Unity的感知框架
- en: We’ll be using the Unity Perception package, which plugs into the Unity Editor
    (just like Unity ML-Agents does), for everything in this chapter, as well as later
    on in [Chapter 13](ch13.html#chapter-advanced-synthesis).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Unity感知包，它与Unity编辑器（就像Unity ML-Agents一样）配合使用，用于本章的所有内容，以及稍后在[第13章](ch13.html#chapter-advanced-synthesis)中使用。
- en: The Process
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程
- en: 'The overall workflow we’ll use for all the synthetic data we generate through
    the examples in this book is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中通过示例生成的所有合成数据的整体工作流程如下：
- en: We’ll determine a *scenario* that requires a large volume of data, typically
    for training.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将确定一个*场景*，需要大量数据，通常用于训练。
- en: We’ll create a *scene*, or a number of scenes, in Unity, laying out the objects
    that we want to be involved in our simulated data.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在Unity中创建一个*场景*，或者多个场景，布置我们希望参与我们模拟数据的对象。
- en: We’ll use *randomizers* to alter the parameters of the scene in order to vary
    data as needed.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用*随机化程序*来改变场景的参数，以根据需要变化数据。
- en: Finally, we’ll specify *ground truth* and *labels* for our data, and *generate*
    the data.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将为我们的数据指定*地面真实性*和*标签*，然后*生成*数据。
- en: Unlike for simulation, Unity isn’t the beginning and the end of the work you
    do for synthesis. In simulations, using ML-Agents you build a scene in Unity to
    act as your simulation, and the agents related to your simulation will exist and
    act in and on that scene. And, ultimately, the trained version of your agents
    (which hopefully perfect whatever task you’ve given them) are also used in that
    scene (of course, you can then take what you and they have learned and put their
    *brain* in something else, but that’s beyond the scope of this book).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与仿真不同，Unity 并非你在合成工作中的始终。在仿真中，使用 ML-Agents 你会在 Unity 中建立一个场景作为你的仿真，与你的仿真相关的代理会存在并在那个场景中行动。而且，你训练后的代理的版本（希望完善你给予它们的任务）也会在那个场景中使用（当然，你可以将你和它们学到的东西放在其他地方的“大脑”中，但这超出了本书的范围）。
- en: For synthesis, we’re just using Unity and the Perception package as a tool to
    generate lots of data. Realistically, because Unity is a visual development environment,
    the kind of data most suited to this is visual data (images). Just as with simulations,
    you’ll use Unity to build some sort of environment or world, but you’ll then use
    a Unity camera to take thousands and thousands of pictures of that world and export
    them to your filesystem. Once you’ve got the pictures, you’ll do the actual machine
    learning somewhere else, using PyTorch, TensorFlow, Create ML, or whatever training
    system you like. In this chapter, we’ll be working through the setup for generating
    data, and the first two steps of the aforementioned workflow.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于合成，我们只是使用 Unity 和 Perception 包作为生成大量数据的工具。实际上，由于 Unity 是一个视觉开发环境，最适合这种操作的数据类型是视觉数据（图像）。就像在仿真中一样，你将使用
    Unity 构建某种环境或世界，然后使用 Unity 摄像头拍摄数以千计的该世界的图像并将它们导出到你的文件系统。一旦你有了这些图片，你将在其他地方进行实际的机器学习，使用
    PyTorch、TensorFlow、Create ML 或你喜欢的任何训练系统。在本章中，我们将完成生成数据的设置以及前述工作流程的前两个步骤。
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: The ML-Agents Toolkit pipeline includes the training, and the Perception pipeline
    does the training. Got it?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ML-Agents 工具包的流程包括训练，感知流程负责训练。明白了吗？
- en: Using Unity Perception
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Unity Perception
- en: To explore Unity’s Perception package, we will work through a simple activity
    that highlights the workflow. Examples of the sorts of images we’ll be generating
    are shown in [Figure 3-2](#fig:diceexample).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索 Unity 的 Perception 包，我们将完成一个突出显示工作流的简单活动。我们将生成的图像示例显示在 [图 3-2](#fig:diceexample)
    中。
- en: '![psml 0302](assets/psml_0302.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0302](assets/psml_0302.png)'
- en: Figure 3-2\. Examples of the dice images we’ll be generating
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-2\. 我们将生成的骰子图像的示例
- en: Eventually, we’ll generate images of dice, with the camera at different angles,
    the background in different colors, and the dice in different color combinations
    (the randomizers that we mentioned in [“The Process”](#ch-intro-synthesis-theprocess)).
    We’ll do everything prior to adding the randomizers in this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们将生成骰子的图像，摄像头从不同角度拍摄，背景色彩不同，骰子的颜色组合也不同（我们在 [“过程”](#ch-intro-synthesis-theprocess)
    中提到的随机器）。在本章中，我们将在添加随机器之前完成所有操作。
- en: For now, however, we’ll be setting up a scene and preparing to add randomization.
    We won’t be adding actual randomizers yet, though. That will come later, in [Chapter 13](ch13.html#chapter-advanced-synthesis).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在我们将设置一个场景并准备添加随机化。尽管还不会添加实际的随机器，那将在 [第 13 章](ch13.html#chapter-advanced-synthesis)
    中进行。
- en: Creating the Unity Project
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Unity 项目
- en: 'As with many of our practical scenarios, the first step for creating synthetic
    data with Unity is to create a brand-new Unity project:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们许多实际场景一样，使用 Unity 创建合成数据的第一步是创建一个全新的 Unity 项目：
- en: Open the Unity Hub and create a new 3D “URP” project. As shown in [Figure 3-3](#fig:randomdice1.png),
    we’ll name ours “SimpleDice,” but the name isn’t important for the functionality.
    The choice of project template (“Universal Render Pipeline” or “URP”) is what’s
    important.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Unity Hub 并创建一个新的 3D “URP” 项目。如 [图 3-3](#fig:randomdice1.png) 所示，我们将其命名为
    “SimpleDice”，但名称对功能并不重要。项目模板选择 (“Universal Render Pipeline” 或 “URP”) 才是重要的。
- en: '![psml 0303](assets/psml_0303.png)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0303](assets/psml_0303.png)'
- en: Figure 3-3\. Creating a URP project in Unity Hub
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-3\. 在 Unity Hub 中创建一个 URP 项目
- en: Warning
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: We’re not going to create a “3D Project,” as we did in the previous chapter,
    because we need to use Unity’s Universal Render Pipeline. The Universal Render
    Pipeline (URP) is a scriptable graphics pipeline that creates a different workflow
    for game developers.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们不会像前一章那样创建“3D项目”，因为我们需要使用Unity的通用渲染管线（URP）。通用渲染管线（URP）是一个可编程的图形管线，为游戏开发人员提供了不同的工作流程。
- en: Because one of the core things we need to do as part of generating our synthetic
    data is output images, we’re going to use the URP. Perception uses an event that
    the URP generates when a frame has completed rendering, at a project-wide level,
    and we’ll be using that event to output an image.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为生成合成数据的核心工作之一是输出图像，我们将使用URP。Perception使用URP生成帧完成渲染时的事件，以项目为单位，我们将使用该事件来输出图像。
- en: Don’t want to think about it? Don’t worry about it! We just need certain features
    from a different rendering pipeline in order to use Unity Perception. And we don’t
    need those features for ML-Agents.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不想考虑？别担心！我们只需要从不同的渲染管线中获取某些功能，以便使用Unity Perception。对于ML-Agents，我们不需要这些功能。
- en: Just remember, you’ll likely want to use the URP when you’re building projects
    around Unity’s Perception features, and the easiest way to do that is to start
    from the provided URP template in the Unity Hub.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记住，当您围绕Unity的Perception功能构建项目时，您可能希望使用URP，而最简单的方法是从Unity Hub提供的URP模板开始。
- en: If you want to learn about Unity’s different rendering pipelines, head over
    to the [Unity documentation](https://oreil.ly/waDBl).
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想了解Unity的不同渲染管线，请访问[Unity文档](https://oreil.ly/waDBl)。
- en: Once the project has loaded, you’ll want to delete the example assets that are
    added by the URP template, as shown in [Figure 3-4](#fig:randomdice2). Only delete
    the parent object named “Example Assets” and the children below it. Leave the
    camera, light, and “Post-process Volume” in place.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目加载完成后，您需要删除由URP模板添加的示例资产，如[图 3-4](#fig:randomdice2)所示。仅删除名为“示例资产”的父对象及其下的子对象。保留相机、灯光和“后处理体积”。
- en: Note
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For some reason, the easiest way to create a new URP project is to create one
    that comes with a sample environment. We’re not sure why, either.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于某种原因，创建新的URP项目最简单的方法是使用带有示例环境的项目。我们也不确定为什么会这样。
- en: '![psml 0304](assets/psml_0304.png)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0304](assets/psml_0304.png)'
- en: Figure 3-4\. Deleting the example assets
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-4\. 删除示例资产
- en: Next, we want to install the Perception package. Select the Window menu → Package
    Manager, and use the Unity Package Manager to install the Perception package by
    choosing the “+” menu → “Add package from git URL” and entering **`com.unity.perception`**,
    as shown in Figures [3-5](#fig:randomdice3.png) and [3-6](#fig:randomdice4.png).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装Perception包。选择窗口菜单 → 包管理器，使用Unity包管理器通过选择“+”菜单 → “从git URL添加包”，并输入**`com.unity.perception`**进行安装，如图 [3-5](#fig:randomdice3.png)
    和 [3-6](#fig:randomdice4.png)所示。
- en: '![psml 0305](assets/psml_0305.png)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0305](assets/psml_0305.png)'
- en: Figure 3-5\. Adding a package from Git
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-5\. 从Git添加包
- en: '![psml 0306](assets/psml_0306.png)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0306](assets/psml_0306.png)'
- en: Figure 3-6\. The package name for the Unity Perception package
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-6\. Unity Perception包的包名称
- en: It might take a few moments for the package to download and install, so be patient.
    Once it’s finished downloading, you’ll see Unity import it, as shown in [Figure 3-7](#fig:randomdice5).
    You can then close the Package Manager window.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包的下载和安装可能需要一些时间，请耐心等待。下载完成后，Unity将导入该包，如[图 3-7](#fig:randomdice5)所示。然后可以关闭包管理器窗口。
- en: '![psml 0307](assets/psml_0307.png)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0307](assets/psml_0307.png)'
- en: Figure 3-7\. The Unity Perception package being loaded by Unity
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-7\. Unity Perception包由Unity加载
- en: Next, select the ForwardRenderer asset in the Project pane, as shown in [Figure 3-8](#fig:forward)
    (you’ll find it in the *Settings* folder).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在项目窗格中选择ForwardRenderer资源，如[图 3-8](#fig:forward)所示（您会在*设置*文件夹中找到它）。
- en: '![psml 0308](assets/psml_0308.png)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0308](assets/psml_0308.png)'
- en: Figure 3-8\. The ForwardRenderer asset
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-8\. ForwardRenderer资源
- en: In its Inspector, click Add Renderer Feature, and then click Ground Truth Renderer
    Feature, as shown in [Figure 3-9](#fig:groundtruthrenderer).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其检查器中，单击“添加渲染器功能”，然后单击“真实数据渲染器功能”，如[图 3-9](#fig:groundtruthrenderer)所示。
- en: '![psml 0309](assets/psml_0309.png)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0309](assets/psml_0309.png)'
- en: Figure 3-9\. Adding a ground truth renderer
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-9\. 添加真实数据渲染器
- en: Your project is largely ready to go at this point. This is a good, clean starting
    point for all your work using Unity’s Perception Framework, so we recommend pushing
    it to some sort of source control, or duplicating it, so that you have a fresh
    starting point each time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你的项目基本准备就绪了。这是使用 Unity 感知框架进行所有工作的一个良好而干净的起点，因此我们建议将其推送到某种源代码控制中，或者复制一份，以便每次都有一个新的起点。
- en: Creating a Scene
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个场景
- en: 'Sometimes it’s good to create a scene! This is one of those times. The scene
    we’re going to build is very simple: it’s some dice! The dice will be sitting
    on a plane, and we’ll take in-engine images of the dice to generate our synthetic
    data (which will be synthetic images of dice).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候创建一个场景是件好事！这就是其中一个时机。我们将要构建的场景非常简单：就是一些骰子！这些骰子将放置在一个平面上，并且我们将在引擎中拍摄骰子的图像来生成我们的合成数据（也就是骰子的合成图像）。
- en: Let’s get started!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Getting the Dice Models
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取骰子模型
- en: 'First, we’ll need the dice models we’re going to use. You could make your own
    if you wanted, but in the [book’s resources](https://oreil.ly/9WmyP), you can
    download a Unity package that contains dice models we made for you:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要用到的骰子模型。你可以自己制作，但是在[书籍资源](https://oreil.ly/9WmyP)中，你可以下载一个包含我们为你制作的骰子模型的
    Unity 资源包：
- en: Download the [*Dice.unitypackage* file](https://oreil.ly/1efRA) and import it
    into Unity by double-clicking on it, then clicking Import All in Unity.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过双击[*Dice.unitypackage* 文件](https://oreil.ly/1efRA)并在 Unity 中点击“全部导入”来下载并导入它。
- en: Once the models are imported, verify that they’re visible in the Project pane
    of the Unity Editor, as shown in [Figure 3-10](#fig:diceprefabs).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模型导入后，验证它们在 Unity 编辑器的项目面板中是否可见，如[图 3-10](#fig:diceprefabs)所示。
- en: '![psml 0310](assets/psml_0310.png)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0310](assets/psml_0310.png)'
- en: Figure 3-10\. The dice assets in the Unity Editor
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-10\. Unity 编辑器中的骰子资源
- en: That’s it! You’re ready to make a scene.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你已经准备好创建一个场景了。
- en: A Very Simple Scene
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个非常简单的场景
- en: 'With the scene open, first we need to add a floor and some dice:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开场景后，首先我们需要添加一个地板和一些骰子：
- en: Create a floor by adding a plane to the scene in the Hierarchy and renaming
    it “Floor,” as shown in [Figure 3-11](#fig:initdicescene).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在层次视图中添加一个平面并将其重命名为“Floor”，如[图 3-11](#fig:initdicescene)所示，创建一个地板。
- en: '![psml 0311](assets/psml_0311.png)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0311](assets/psml_0311.png)'
- en: Figure 3-11\. The initial scene, with a floor
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-11\. 初始场景，带有地板
- en: Drag some of the dice from the Project pane (you’ll find them in the *Dice*
    folder, in a subfolder named *Prefabs*) into the Scene or Hierarchy view, and
    position them on the floor. The absolute specifics don’t hugely matter right now,
    but if you’d like to duplicate our scene, you can see it in [Figure 3-12](#fig:dicescene2).
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一些骰子从项目面板中的“Dice”文件夹（在名为“Prefabs”的子文件夹中）拖放到场景或层次视图中，并将它们放置在地板上。现在绝对具体的位置并不是特别重要，但是如果你想要复制我们的场景，你可以在[图
    3-12](#fig:dicescene2)中看到它。
- en: '![psml 0312](assets/psml_0312.png)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0312](assets/psml_0312.png)'
- en: Figure 3-12\. The dice in the scene
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-12\. 场景中的骰子
- en: Position the camera so that it’s showing the dice from a slightly elevated angle.
    You can verify this by looking at the Game view while you reposition the camera.
    Ours is shown in [Figure 3-13](#fig:gameview).
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将相机位置调整为从稍微高角度显示骰子。你可以在重新定位相机时查看游戏视图来验证这一点。我们的示例在[图 3-13](#fig:gameview)中展示。
- en: '![psml 0313](assets/psml_0313.png)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0313](assets/psml_0313.png)'
- en: Figure 3-13\. A good perspective on the dice
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-13\. 骰子的良好视角
- en: Use the drop-down menu at the top of the Game view, as shown in [Figure 3-14](#fig:setres),
    to add a named resolution (ours is called Perception) and set the resolution of
    the camera to `480x480`. Because we’ll be using the Main Camera (which is the
    only camera) to render the images, the resolution here controls the size of the
    images we’ll be rendering and saving to disk.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用游戏视图顶部的下拉菜单，如[图 3-14](#fig:setres)所示，添加一个命名分辨率（我们称之为“Perception”）并将相机的分辨率设置为`480x480`。因为我们将使用主摄像机（也是唯一的摄像机）来渲染图像，这里的分辨率控制着我们将渲染并保存到磁盘的图像的大小。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you can’t find the drop-down menu, make sure you’re looking on the Game view.
    The Scene view does not have the menu you need.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果找不到下拉菜单，请确保你正在游戏视图上查看。场景视图没有你需要的菜单。
- en: '![psml 0314](assets/psml_0314.png)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0314](assets/psml_0314.png)'
- en: Figure 3-14\. Setting the resolution
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-14\. 设置分辨率
- en: Save your scene before continuing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前保存你的场景。
- en: 'Next, we need to create a means to control our synthesis scenario. We’ll do
    this by creating an “empty” GameObject that lives in our scene, with some special
    components that are supplied by the Unity Perception Framework attached to it.
    Here are the steps to do this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一种方法来控制我们的合成场景。我们将通过在我们的场景中创建一个“空的”游戏对象，并附加Unity感知框架提供的一些特殊组件来实现这一点。以下是执行此操作的步骤：
- en: Create a new empty GameObject in the Hierarchy view, and name it “Scenario”
    or something similar.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次视图中创建一个新的空游戏对象，并将其命名为“场景”或类似的名称。
- en: Tip
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Our Scenario GameObject is “empty” in the sense that it doesn’t map to a visual
    component that you can see in the scene. It exists in the scene, but it is not
    visible in the scene. If we added a visual component to it (e.g., something that
    was a mesh, like a cube), it would be visible. To control a scenario, you don’t
    need any visible components, though.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的“场景游戏对象（Scenario GameObject）”在某种意义上是“空的”，意味着它不映射到你可以在场景中看到的视觉组件。它存在于场景中，但在场景中不可见。如果我们向其添加一个视觉组件（例如像立方体这样的网格），它将变得可见。但是要控制一个场景，你并不需要任何可见的组件。
- en: Select the new Scenario object in the Hierarchy, and then use the Add Component
    button in its Inspector, shown in [Figure 3-15](#fig:addcomponentbutton), to add
    a Fixed Length Scenario component to this new GameObject, as shown in [Figure 3-16](#fig:addingfixedlengthscenario).
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次视图中选择新的场景对象，然后在其检查器中使用“添加组件”按钮，如[图 3-15](#fig:addcomponentbutton)所示，向此新游戏对象添加固定长度场景组件，如[图 3-16](#fig:addingfixedlengthscenario)所示。
- en: '![psml 0315](assets/psml_0315.png)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0315](assets/psml_0315.png)'
- en: Figure 3-15\. The Add Component button
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-15\. 添加组件按钮
- en: '![psml 0316](assets/psml_0316.png)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0316](assets/psml_0316.png)'
- en: Figure 3-16\. Adding a Fixed Length Scenario component
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-16\. 添加固定长度场景组件
- en: Leave the Fixed Length Scenario parameters and settings alone for now. The Total
    Iterations parameter is, effectively, the number of images in our scene that will
    be saved to disk when we run the scenario.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在暂时不要更改固定长度场景的参数和设置。总迭代参数实际上是我们场景中将保存到磁盘的图像数量。
- en: Note
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you don’t have a Fixed Length Scenario component available, review the steps
    listed previously for importing the Perception package. This asset comes from
    the Perception package.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您没有可用的固定长度场景组件，请查看前面导入感知包的步骤。此资产来自感知包。
- en: The Fixed Length Scenario component is used to control the execution flow of
    the scene by coordinating all the necessary random elements.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 固定长度场景组件用于通过协调所有必要的随机元素来控制场景的执行流程。
- en: 'Now we need to modify the Main Camera to allow it to be used for Perception:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改主摄像机，以使其用于感知：
- en: Select the Main Camera, and use its Inspector to add a Perception Camera component.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择主摄像机，并使用其检查器添加感知摄像机组件。
- en: Leave the parameters of the Perception Camera at their defaults, as shown in
    [Figure 3-17](#fig:newperceptioncamera). We’ll come back to the specifics of this
    shortly, but if you want, you can modify the Output Base Folder to point to where
    you’d like the rendered images to be saved.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将感知摄像机的参数保持默认设置，如[图 3-17](#fig:newperceptioncamera)所示。稍后我们将详细介绍这些内容，但如果您愿意，您可以修改输出基础文件夹，以指定您希望保存渲染图像的位置。
- en: '![psml 0317](assets/psml_0317.png)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0317](assets/psml_0317.png)'
- en: Figure 3-17\. A new Perception Camera component
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-17\. 新的感知摄像机组件
- en: Warning
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: If you start seeing errors or warnings related to asynchronous shader compilation
    in the Unity Editor’s Console pane when you add the Perception Camera component,
    don’t worry too much! If this occurs, select the Edit menu → Project Settings…
    → Editor, and in the Shader Compilation settings, find and disable Asynchronous
    Shader Compilation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在添加感知摄像机组件时，在Unity编辑器的控制台窗格中看到与异步着色器编译相关的错误或警告，请不要过于担心！如果发生这种情况，请选择编辑菜单 →
    项目设置… → 编辑器，在着色器编译设置中找到并禁用异步着色器编译。
- en: The Perception Camera component allows us to modify and control the parameters
    of the synthetic frames that are being captured from the camera, how they’re annotated,
    and how the labels we’ll ultimately provide relate to ground truth.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 感知摄像机组件允许我们修改和控制从摄像机捕获的合成帧的参数，以及它们如何被注释，以及我们最终提供的标签如何与真实数据相关联。
- en: Don’t forget to save your scene again.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了再次保存你的场景。
- en: Preparing for Synthesis
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备合成
- en: When you generate a synthesized image, you can also generate different kinds
    of *ground truth* with it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当您生成一个合成图像时，您也可以生成不同类型的*真实数据*。
- en: 'Perception provides a range of different *labelers*, which control the types
    of ground truth you can generate alongside each captured image:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 感知提供一系列不同的*标签器*，它们控制你可以在每张捕获图像旁生成的地面真相的类型：
- en: 3D bounding boxes
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D 边界框
- en: 2D bounding boxes
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D 边界框
- en: Object counts
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物体计数
- en: Object metadata/information
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物体元数据/信息
- en: Semantic segmentation maps
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义分割地图
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '*Ground truth* refers to information that we know is true. For example, because
    we’re making the images of dice, we know they are definitely dice. That they are
    dice is a piece of ground truth.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*地面真相*指我们知道是真实的信息。例如，因为我们正在制作骰子的图像，我们知道它们肯定是骰子。它们是骰子就是地面真相的一部分。'
- en: Because we’re going to be generating images of dice with different numbers facing
    up, we’re interested in the object metadata/information labeler. Unity refers
    to this in the Unity Editor as RenderedObjectInfoLabeler.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们将生成不同面数的骰子图像，我们对物体元数据/信息标签器感兴趣。在Unity编辑器中，Unity 将其称为渲染对象信息标签器。
- en: 'To add a labeler for this project, do the following in your scene:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要为此项目添加一个标签器，请在场景中执行以下操作：
- en: Select the Main Camera in the Hierarchy pane, and find the Perception Camera
    component attached to it.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中选择主摄像机，找到附加到其上的感知摄像机组件。
- en: Click the + button in the Camera Labelers section of the Perception Camera,
    as shown in [Figure 3-18](#fig:plusbutton).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击感知摄像机的相机标签器部分中的“+”按钮，如图 3-18（#fig:plusbutton）所示。
- en: '![psml 0318](assets/psml_0318.png)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0318](assets/psml_0318.png)'
- en: Figure 3-18\. The + button in the Camera Labelers section
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-18。相机标签器部分中的“+”按钮
- en: From the list that appears, select RenderedObjectInfoLabeler, as shown in [Figure 3-19](#fig:renderedobjectinf).
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的列表中选择渲染对象信息标签器，如图 3-19（#fig:renderedobjectinf）所示。
- en: '![psml 0319](assets/psml_0319.png)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0319](assets/psml_0319.png)'
- en: Figure 3-19\. Adding a RenderedObjectInfoLabeler
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-19。添加一个渲染对象信息标签器
- en: Verify that a labeler has been added, as shown in [Figure 3-20](#fig:addedroil).
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认已添加标签器，如图 3-20（#fig:addedroil）所示。
- en: '![psml 0320](assets/psml_0320.png)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0320](assets/psml_0320.png)'
- en: Figure 3-20\. The RenderedObjectInfoLabeler on our Perception Camera, which
    is on our Main Camera
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-20。我们主摄像机上的渲染对象信息标签器
- en: 'To use the labeler, we need to create some labels:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用标签器，我们需要创建一些标签：
- en: In the Project pane, right-click and choose Create → Perception → ID Label Config,
    as shown in [Figure 3-21](#fig:addingasset).
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，右键点击并选择创建 → 感知 → ID 标签配置，如图 3-21（#fig:addingasset）所示。
- en: '![psml 0321](assets/psml_0321.png)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0321](assets/psml_0321.png)'
- en: Figure 3-21\. Creating a new ID Label Config
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-21。创建一个新的 ID 标签配置
- en: Find the new asset that was created (it will likely be named `IdLabelConfig`
    or something similar) and rename it `DiceLabels` or something similarly obvious.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到新创建的资产（通常会被命名为`IdLabelConfig`或类似的名称），然后将其重命名为`DiceLabels`或类似的明显名称。
- en: Select this asset in the Project pane, and use the Add New Label button in its
    Inspector pane to create six labels. When you’re done, your list of labels should
    resemble ours, shown in [Figure 3-22](#fig:mmgroundtruth).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中选择这个资产，然后在其检视器面板中使用“添加新标签”按钮来创建六个标签。完成后，你的标签列表应该类似于我们的示例，如[图 3-22](#fig:mmgroundtruth)所示。
- en: '![psml 0322](assets/psml_0322.png)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0322](assets/psml_0322.png)'
- en: Figure 3-22\. The six labels have been created
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-22。已创建六个标签
- en: Select the Main Camera in the Hierarchy again, find the Id Label Config field
    in the Camera Labelers section of the Perception Camera component attached to
    it, and either drag the `DiceLabels` asset you just made from the Project pane
    to the field, or click the field and select the asset. It should look like [Figure 3-23](#fig:finpercam)
    once it’s in place.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在层次结构中选择主摄像机，找到附加到其上的感知摄像机组件中的 Id 标签配置字段，然后从项目面板将刚刚创建的`DiceLabels`资产拖动到字段中，或者点击字段并选择该资产。一旦设置好，它应该看起来像图 3-23（#fig:finpercam）。
- en: '![psml 0323](assets/psml_0323.png)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0323](assets/psml_0323.png)'
- en: Figure 3-23\. The Perception Camera is set up
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-23。感知摄像机已设置
- en: Once again, you’ll need to save your scene before continuing.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，在继续之前，你需要保存场景。
- en: Testing the Scenario
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试场景
- en: 'Now is a good time to test your scenario, without any random elements applied.
    Follow these steps to test the scenario and check that everything we’ve done so
    far is working correctly:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是测试场景的好时机，不涉及任何随机元素。按照以下步骤测试场景，并检查我们迄今为止所做的一切是否正确：
- en: Run the scene using Unity’s Play button. It might take a while.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Unity 的播放按钮运行场景。这可能需要一段时间。
- en: The scene should generate as many pictures as are specified in the Total Iterations
    parameter of the Fixed Length Scenario component that we added to the scenario
    GameObject; it should then exit play mode automatically. Again, it might take
    a little while, and it could appear like the Unity Editor has hung.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 场景应该生成与我们添加到场景GameObject中的Fixed Length Scenario组件的Total Iterations参数指定的图片数量相同，然后会自动退出播放模式。再次强调，可能需要一段时间，并且Unity编辑器可能会显得卡住。
- en: To verify that everything worked, when Unity is responsive again (and play mode
    has ended), select the Main Camera in the Hierarchy and locate the Perception
    Camera component. It will have a new Show Folder button, as shown in [Figure 3-24](#fig:finoutput).
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证一切是否正常工作，在Unity再次响应并且播放模式已结束后，选择层次结构中的主摄像机，找到感知摄像机组件。它将具有一个新的“显示文件夹”按钮，如[图3-24](#fig:finoutput)所示。
- en: Click the Show Folder button. This will open the location where the images are
    stored on your local machine.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“显示文件夹”按钮。这将打开存储在您本地计算机上的图像位置。
- en: At this point, you should find a folder with 100 pictures generated from the
    scene’s camera. They’ll all be identical, as shown in [Figure 3-25](#fig:diceexample2).
    If you’ve made it this far and everything’s working, you’re ready to continue!
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，您应该找到一个包含从场景摄像机生成的100张图片的文件夹。它们都是相同的，如[图3-25](#fig:diceexample2)所示。如果您已经走到这一步并且一切都正常工作，您可以继续了！
- en: '![psml 0324](assets/psml_0324.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0324](assets/psml_0324.png)'
- en: Figure 3-24\. The Show Folder button, after a successful run
  id: totrans-151
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-24. 成功运行后的“显示文件夹”按钮
- en: '![psml 0302](assets/psml_0302.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0302](assets/psml_0302.png)'
- en: Figure 3-25\. The dice images
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-25. 骰子图片
- en: Great! You’ve actually synthesized some data—it just so happens that every image
    you’ve synthesized is the same, there’s no change each time an image is saved,
    and our labels are not really being used.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！您实际上已经合成了一些数据——每次保存图像时，所有合成的图像都是相同的，我们的标签实际上并没有被使用。
- en: Setting Up Our Labels
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置我们的标签
- en: 'The labels we created represent which side of the dice is facing upward. In
    order to make that information available in a format that matches the images we’re
    outputting, we need to attach it to the prefabs:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的标签表示骰子的哪一面朝上。为了使这些信息以与我们输出的图像匹配的格式可用，我们需要将其附加到预制体上：
- en: Open the prefab for Dice-Black-Side1 (the black dice, with the side showing
    one pip facing up) by double-clicking on it in the Project pane.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在项目面板中双击Dice-Black-Side1（黑色骰子，显示一个点朝上的面）来打开Dice-Black-Side1的预制体。
- en: When the prefab is open, as shown in [Figure 3-26](#fig:openprefab), select
    the root object in its Hierarchy (in this case “Dice-Black-Side1”) and use the
    Add Component button in its Inspector to add a Labeling component, as shown in
    [Figure 3-27](#fig:labelingcomponent).
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当预制体打开时，如[图3-26](#fig:openprefab)所示，选择其层次结构中的根对象（在本例中为“Dice-Black-Side1”），并使用其检视面板中的“添加组件”按钮添加一个标签组件，如[图3-27](#fig:labelingcomponent)所示。
- en: '![psml 0326](assets/psml_0326.png)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0326](assets/psml_0326.png)'
- en: Figure 3-26\. Opening a prefab
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-26. 打开一个预制体
- en: '![psml 0327](assets/psml_0327.png)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0327](assets/psml_0327.png)'
- en: Figure 3-27\. Adding a Labeling component
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-27. 添加一个标签组件
- en: Expand the DiceLabels section found in the Inspector for the new component,
    and click the Add to Labels button next to the label representing the side that
    is facing up (this one should be “one”), as shown in [Figure 3-28](#fig:addinglabels).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开检视面板中新组件的DiceLabels部分，并在代表朝上面的标签旁边点击“添加到标签”按钮（这个应该是“one”），如[图3-28](#fig:addinglabels)所示。
- en: Back out of the dice prefab, and repeat this process for all the dice prefabs
    (there should be 30 in total, made up of 5 different colors, each with 6 pips
    facing up). You should apply the label number corresponding with the face that’s
    upward for each dice.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出骰子预制体，并为所有骰子预制体重复此过程（总共应该有30个，由5种不同颜色组成，每种颜色都有6个点朝上）。您应该为每个骰子应用对应面朝上的标签号码。
- en: '![psml 0328](assets/psml_0328.png)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0328](assets/psml_0328.png)'
- en: Figure 3-28\. Adding a specific label
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-28. 添加特定标签
- en: Checking the Labels
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查标签
- en: 'We’ll work more with labels later, but you can quickly check that they work
    by doing the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 后续我们将更多地使用标签，但您可以通过以下步骤快速检查它们是否正常工作：
- en: Select the Main Camera in the Hierarchy, add a new BoundingBox2D labeler, and
    connect it to the set of labels we created earlier, as shown in [Figure 3-29](#fig:addingnewlabelertoit).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择层次结构中的主摄像机，在其中添加一个新的BoundingBox2D标签，并将其连接到我们之前创建的标签集，如[图3-29](#fig:addingnewlabelertoit)所示。
- en: '![psml 0329](assets/psml_0329.png)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0329](assets/psml_0329.png)'
- en: Figure 3-29\. Adding a new labeler to the camera
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-29. 向相机添加新的标签器
- en: Run the project and look at the Game view. In addition to it saving out image
    files as normal, you’ll see it drawing boxes around each of the labeled objects,
    as shown in [Figure 3-30](#fig:boundingboxes).
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行项目并查看游戏视图。除了将图像文件保存为正常格式外，您还将看到它在每个标记对象周围绘制边界框，如[图3-30](#fig:boundingboxes)所示。
- en: '![psml 0330](assets/psml_0330.png)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0330](assets/psml_0330.png)'
- en: Figure 3-30\. Bounding boxes being drawn
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-30. 绘制边界框
- en: We’ll make more use of the labels in later chapters, when we start working with
    randomizers.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，当我们开始使用随机化器时，我们将更多地利用这些标签。
- en: What’s Next?
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来做什么？
- en: 'So far, we’ve built a scene and we’ve connected all the necessary plumbing
    to make Unity Perception work:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经建立了一个场景，并连接了所有必要的管道以使Unity Perception工作：
- en: We’ve created a project using the URP pipeline, which is required to create
    simulated image data using Unity Perception.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用URP管线创建了一个项目，这是使用Unity Perception创建模拟图像数据所必需的。
- en: We’ve added a Perception Camera component to the camera in the scene that we
    want to use to generate images.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们向场景中的相机添加了一个感知相机组件，我们希望使用它来生成图像。
- en: We’ve added a Fixed Length Scenario component to an otherwise empty object in
    the scene, allowing us to manage the overall generation of images.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在场景中的一个空对象上添加了一个固定长度场景组件，允许我们管理图像的整体生成。
- en: We’ve identified where images get saved to when the image synthesis process
    is run.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经确定了当运行图像合成过程时，图像保存在哪里。
- en: We’ve created some labels as ground truth for our dice synthesis, and applied
    them to the relevant dice prefabs we’re using.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经为我们的骰子合成创建了一些标签，并将它们应用到我们使用的相关骰子预设上。
- en: Later, in [Chapter 13](ch13.html#chapter-advanced-synthesis), we’ll take this
    further by adding randomizers to our scene, which will change the position, size,
    and other elements of the dice, as well as elements of the scene itself, so that
    every image we generate is different. Later still, in [Chapter 14](ch14.html#chapter-shop),
    we’ll take a look at exploring the synthesized data we’ve generated and how to
    make use of it.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，在[第13章](ch13.html#chapter-advanced-synthesis)中，我们将通过向场景添加随机化器进一步进行探索，这将改变骰子的位置、大小和其他元素，以及场景本身的元素，从而使我们生成的每幅图像都是独特的。再稍后，在[第14章](ch14.html#chapter-shop)中，我们将探讨探索已生成的合成数据以及如何利用它。
