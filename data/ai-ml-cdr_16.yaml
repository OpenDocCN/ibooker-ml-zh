- en: Chapter 13\. Using TensorFlow Lite in Android Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章：在 Android 应用中使用 TensorFlow Lite
- en: '[Chapter 12](ch12.xhtml#an_introduction_to_tensorflow_lite) introduced you
    to TensorFlow Lite, a set of tools that help you convert your models into a format
    that can be consumed by mobile or embedded systems. Over the next few chapters
    you’ll look into how to use those models on a variety of runtimes. Here, you’ll
    see how to create Android apps that use TensorFlow Lite models. We’ll start with
    a quick exploration of the main tool used to create Android apps: Android Studio.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 12 章](ch12.xhtml#an_introduction_to_tensorflow_lite)向你介绍了 TensorFlow Lite，一套工具，帮助你将模型转换为移动或嵌入式系统可消费的格式。在接下来的几章中，你将了解如何在各种运行时环境中使用这些模型。在这里，你将看到如何创建使用
    TensorFlow Lite 模型的 Android 应用程序。我们将从快速探索用于创建 Android 应用程序的主要工具开始：Android Studio。'
- en: What Is Android Studio?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Android Studio？
- en: Android Studio is an integrated development environment (IDE) for developing
    Android apps for a variety of devices, from phones and tablets to TVs, cars, watches,
    and more. In this chapter we’ll focus on using it for phone apps. It’s available
    to [download for free](https://developer.android.com/studio), and there are versions
    for all major operating systems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 是一个集成开发环境（IDE），用于开发 Android 应用程序，适用于各种设备，从手机和平板电脑到电视、汽车、手表等等。在本章中，我们将专注于用于手机应用程序的使用。它可以免费[下载](https://developer.android.com/studio)，并且适用于所有主要操作系统。
- en: One of the nice things that Android Studio gives you is an Android emulator,
    so you can try out apps without needing to own a physical device. You’ll be using
    that extensively in this chapter! Traditionally Android applications were built
    using the Java programming language, but recently Google introduced Kotlin to
    Android Studio, and you’ll use that language in this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 给你提供的一个好处是 Android 模拟器，这样你就可以在不需要实体设备的情况下测试应用。在本章中，你将会广泛使用它！传统上，Android
    应用是使用 Java 编程语言构建的，但最近 Google 在 Android Studio 中引入了 Kotlin，而你将在本章中使用这种语言。
- en: Creating Your First TensorFlow Lite Android App
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个 TensorFlow Lite Android 应用程序
- en: If you don’t already have Android Studio, install it now. It can take a little
    while to get everything set up, updated, and ready to go. Over the next few pages,
    I’ll step you through creating a new app, designing its user interface, adding
    TensorFlow Lite dependencies, and then coding it for inference. It will be a really
    simple app—one where you type in a value, and it performs inference and calculates
    Y = 2X – 1, where X is the value you entered. It’s massive overkill for such simple
    functionality, but the scaffolding of an app like this is almost identical to
    that of a far more complex one.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装 Android Studio，请立即安装。设置、更新和准备好所有内容可能需要一些时间。在接下来的几页中，我将逐步指导你创建一个新应用，设计其用户界面，添加
    TensorFlow Lite 依赖项，然后为推理编写代码。这将是一个非常简单的应用程序——你在其中输入一个值，它执行推理并计算 Y = 2X – 1，其中
    X 是你输入的值。对于这样简单的功能来说，这有点大材小用，但是这样一个应用程序的脚手架几乎与更复杂的应用程序的相同。
- en: Step 1\. Create a New Android Project
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：创建一个新的 Android 项目
- en: Once you have Android Studio up and running, you can create a new app with File
    → New → New Project, which will open the Create New Project dialog ([Figure 13-1](#creating_a_new_project_in_android_studi)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装好了 Android Studio，可以通过 File → New → New Project 创建一个新应用，这将打开创建新项目对话框（[图 13-1](#creating_a_new_project_in_android_studi)）。
- en: '![Creating a new project in Android Studio](Images/aiml_1301.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![在 Android Studio 中创建一个新项目](Images/aiml_1301.png)'
- en: Figure 13-1\. Creating a new project in Android Studio
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-1：在 Android Studio 中创建一个新项目
- en: Select the Empty Activity, as shown in [Figure 13-1](#creating_a_new_project_in_android_studi).
    This is the simplest Android app, with very little preexisting code. Press Next
    and you’ll be taken to the Configure Your Project dialog ([Figure 13-2](#configuring_your_project)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 13-1](#creating_a_new_project_in_android_studi) 所示，选择空活动（Empty Activity）。这是最简单的
    Android 应用程序，几乎没有任何预先存在的代码。点击“Next”将进入配置项目对话框（[图 13-2](#configuring_your_project)）。
- en: '![Configuring your project](Images/aiml_1302.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![配置你的项目](Images/aiml_1302.png)'
- en: Figure 13-2\. Configuring your project
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-2：配置你的项目
- en: In this dialog, set the name to be *FirstTFLite* as shown, and ensure that the
    language is Kotlin. The Minimum SDK level will probably default to API 23, and
    you can leave it at that if you like.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个对话框中，如示例所示，将名称设置为 *FirstTFLite*，并确保语言为 Kotlin。最小 SDK 级别可能会默认为 API 23，如果你喜欢，可以保持不变。
- en: When you’re done, press Finish. Android Studio will now create all the code
    for your app. Lots of files are needed for an Android application. The single
    activity you created has a layout file (in XML) that defines what it looks like,
    as well as a *.kt* (Kotlin) file for the associated source. There are also several
    configuration files defining how the app should be built, what dependencies it
    should use, and its resources, assets, and more. It can be quite overwhelming
    at first, even for a very simple app like this one.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成后，请按完成。Android Studio 现在将为您的应用程序创建所有的代码。Android 应用程序需要大量文件。您创建的单个活动有一个布局文件（XML
    格式），定义其外观，以及一个关联的 *.kt*（Kotlin）源文件。还有几个配置文件定义应用程序的构建方式，应用程序应使用的依赖项，以及其资源、资产等等。即使对于这样一个非常简单的应用程序，一开始可能会感到非常压制。
- en: Step 2\. Edit Your Layout File
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2\. 编辑您的布局文件
- en: On the left side of your screen you’ll see the project explorer. Make sure Android
    is selected at the top and find the *res* folder. Within it there’s a *layout*
    folder, and within that you’ll find *activity_main.xml* (see [Figure 13-3](#finding_your_activity_design_file)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕左侧，您将看到项目资源管理器。确保顶部选择了 Android，并找到 *res* 文件夹。在其中找到 *layout* 文件夹，在其中您会找到 *activity_main.xml*（参见[图
    13-3](#finding_your_activity_design_file)）。
- en: '![Finding your activity design file](Images/aiml_1303.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![查找您的活动设计文件](Images/aiml_1303.png)'
- en: Figure 13-3\. Finding your activity design file
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-3\. 查找您的活动设计文件
- en: Double-click this to open it, and you’ll see the Android Studio Layout Editor.
    This gives you access to a visual representation of the user interface for your
    activity, as well as an XML editor that shows the definition. You may see just
    one or the other, but if you want to see both (which I recommend!) you can use
    the three buttons highlighted at the top right of [Figure 13-4](#using_the_layout_editor_in_android_stud).
    These give you (from left to right) the XML editor alone, a split screen with
    both the XML editor and the visual designer, and the visual designer by itself.
    Also note the Attributes tab directly underneath these. It allows you to edit
    the attributes of any of the individual user interface elements. As you build
    more Android apps you’ll probably find it easier to use the visual layout tool
    to drag and drop items from the control palette onto the design surface and the
    Attributes window to set things like the layout width.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 双击它以打开它，您将看到 Android Studio 布局编辑器。这为您提供了访问用户界面的视觉表示，以及显示定义的 XML 编辑器。您可能只会看到其中之一，但如果想同时看到两者（我建议这样做！），可以使用位于[图
    13-4](#using_the_layout_editor_in_android_stud)右上角的三个突出显示的按钮。它们依次提供仅 XML 编辑器，带有
    XML 编辑器和可视化设计师的分屏视图，以及仅可视化设计师。还请注意直接在这些按钮下方的属性选项卡。它允许您编辑任何单个用户界面元素的属性。随着您构建更多的
    Android 应用程序，您可能会发现使用可视化布局工具从控件面板拖放项目到设计表面，并使用属性窗口设置布局宽度等更容易。
- en: '![Using the Layout Editor in Android Studio](Images/aiml_1304.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![在 Android Studio 中使用布局编辑器](Images/aiml_1304.png)'
- en: Figure 13-4\. Using the Layout Editor in Android Studio
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-4\. 在 Android Studio 中使用布局编辑器
- en: 'As you can see in [Figure 13-4](#using_the_layout_editor_in_android_stud),
    you’ll have a very basic Android activity containing a single `TextView` control
    that says “Hello World.” Replace all of the code for the activity with this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[图 13-4](#using_the_layout_editor_in_android_stud)中所见，您将拥有一个非常基本的 Android
    活动，其中包含一个单独的 `TextView` 控件，显示“Hello World”。将活动的所有代码替换为以下内容：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: An important thing to note in this code is the `android:id` fields, particularly
    for the `EditText` and the `Button`. It’s okay to change these, but if you do,
    you’ll need to use the same values when you write your code a little later. I’ve
    called them `txtValue` and `convertButton` respectively, so watch out for those
    values in the code!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中需要注意的重要事项是 `android:id` 字段，特别是对于 `EditText` 和 `Button`。可以更改它们，但如果更改了，稍后在编写代码时需要使用相同的值。我分别称它们为
    `txtValue` 和 `convertButton`，因此在代码中注意这些值！
- en: Step 3\. Add the TensorFlow Lite Dependencies
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 3\. 添加 TensorFlow Lite 依赖项
- en: TensorFlow Lite isn’t natively part of the Android APIs, so when you use it
    in an Android app, you need to let the environment know that you’ll be importing
    external libraries. In Android Studio this is achieved using the Gradle build
    tool. This tool lets you configure your environment by describing it with a JSON
    file called *build.gradle*. This can be a little confusing at first, particularly
    for new Android developers, because Android Studio actually gives you two Gradle
    files. Typically these are described as the “project-level” *build.gradle* and
    the “app-level” *build.gradle*. The first one is found within the project folder
    and the latter in the *app* folder (hence their names), as you can see in [Figure 13-5](#selecting_your_builddotgradle_file).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow Lite 并不是 Android API 的一部分，因此当您在 Android 应用中使用它时，需要让环境知道您将导入外部库。在
    Android Studio 中，可以通过 Gradle 构建工具实现此目的。此工具允许您通过描述 JSON 文件 *build.gradle* 来配置您的环境。对于新的
    Android 开发者来说，这可能一开始有点令人困惑，因为 Android Studio 实际上提供了两个 Gradle 文件。通常这些被描述为“项目级”
    *build.gradle* 和“应用级” *build.gradle*。第一个文件位于项目文件夹中，后者位于 *app* 文件夹中（因此它们的名称），正如您可以在[图 13-5](#selecting_your_builddotgradle_file)中看到的那样。
- en: 'You are going to want to edit the app-level file, highlighted in [Figure 13-5](#selecting_your_builddotgradle_file).
    This has the dependency details for your app. Open it up, and make two edits.
    The first is to add an `implementation` to the dependencies section. This is to
    include the TensorFlow Lite libraries:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要编辑应用级文件，如[图 13-5](#selecting_your_builddotgradle_file)中所示。该文件包含应用程序的依赖细节。打开它，并进行两处编辑。首先是在依赖项部分添加一个
    `implementation` 来包含 TensorFlow Lite 库：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can get the latest version number for this dependency in the [TensorFlow
    Lite documentation](https://oreil.ly/ncLNY).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[TensorFlow Lite 文档](https://oreil.ly/ncLNY)中获取此依赖项的最新版本号。
- en: '![Selecting your build.gradle file](Images/aiml_1305.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![选择您的 build.gradle 文件](Images/aiml_1305.png)'
- en: Figure 13-5\. Selecting your build.gradle file
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-5\. 选择您的 build.gradle 文件
- en: 'The second edit requires you to create a new setting within the `android{}`
    section, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个编辑要求您在 `android{}` 部分内创建一个新的设置，如下所示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This step prevents the compiler from compressing your *.tflite* file. The Android
    Studio compiler compiles assets to make them smaller so that the download time
    from the Google Play Store will be reduced. However, if the *.tflite* file is
    compressed, the TensorFlow Lite interpreter won’t recognize it. To ensure that
    it doesn’t get compressed, you need to set `aaptOptions` to `noCompress` for *.tflite*
    files. If you used a different extension (some people just use *.lite*), make
    sure you have that here.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤防止编译器压缩您的 *.tflite* 文件。Android Studio 编译器会编译资源以使其更小，从而减少从 Google Play 商店下载的时间。但是，如果
    *.tflite* 文件被压缩，TensorFlow Lite 解释器将无法识别它。为确保不会被压缩，您需要将 `aaptOptions` 设置为对 *.tflite*
    文件不进行压缩。如果使用了其他扩展名（有些人只使用 *.lite*），请确保在此处设置正确。
- en: You can now try building your project. The TensorFlow Lite libraries will be
    downloaded and linked.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以尝试构建您的项目。TensorFlow Lite 库将被下载并链接。
- en: Step 4\. Add Your TensorFlow Lite Model
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 4\. 添加您的 TensorFlow Lite 模型
- en: In [Chapter 12](ch12.xhtml#an_introduction_to_tensorflow_lite) you created a
    very simple model that inferred Y = 2X – 1 from a set of X and Y values that it
    was trained on, converted it to TensorFlow Lite, and saved it as a *.tflite* file.
    You’ll need that file for this step.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 12 章](ch12.xhtml#an_introduction_to_tensorflow_lite)中，您创建了一个非常简单的模型，该模型从一组训练的
    X 和 Y 值推断出 Y = 2X – 1，将其转换为 TensorFlow Lite，并将其保存为 *.tflite* 文件。您需要在此步骤中使用该文件。
- en: The first thing to do is create an *assets* folder in your project. To do this,
    navigate to the *app/src/main* folder in the project explorer, right-click on
    the *main* folder and select New Directory. Call it *assets*. Drag the *.tflite*
    file that you downloaded after training the model into that directory. If you
    didn’t create this file earlier, you can find it in the book’s [GitHub repository](https://github.com/lmoroney/tfbook).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是在您的项目中创建一个 *assets* 文件夹。要执行此操作，请在项目资源管理器中导航到 *app/src/main* 文件夹，右键单击 *main*
    文件夹，然后选择新建文件夹。将其命名为 *assets*。将在训练模型后下载的 *.tflite* 文件拖放到该目录中。如果之前没有创建此文件，您可以在本书的[GitHub
    仓库](https://github.com/lmoroney/tfbook)中找到它。
- en: When you’re done, the project explorer should look something like [Figure 13-6](#adding_your_model_as_an_asset).
    Don’t worry if the *assets* folder doesn’t yet have the special assets icon; this
    will be updated by Android Studio eventually, typically after the next build.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，项目资源管理器应该看起来像[图13-6](#adding_your_model_as_an_asset)。如果*assets*文件夹尚未具有特殊的资产图标，不要担心；这将在Android
    Studio下一次构建后更新。
- en: '![Adding your model as an asset](Images/aiml_1306.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![将模型添加为资产](Images/aiml_1306.png)'
- en: Figure 13-6\. Adding your model as an asset
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-6。将模型添加为资产
- en: Now that all the plumbing is done, it’s time to start coding!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有的架构工作都完成了，是时候开始编码了！
- en: Step 5\. Write the Activity Code to Use TensorFlow Lite for Inference
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5步。编写活动代码以使用TensorFlow Lite进行推理
- en: Despite the fact that you’re using Kotlin, your source files are in the *java*
    directory that you can see in [Figure 13-6](#adding_your_model_as_an_asset). Open
    this, and you’ll see a folder with your package name. Within that you should see
    your *MainActivity.kt* file. Double-click this file to open it in the code editor.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你使用的是Kotlin，但你的源文件位于*java*目录中，可以在[图13-6](#adding_your_model_as_an_asset)中看到。打开这个文件夹，你会看到一个包含你的包名的文件夹。在其中，你应该会看到*MainActivity.kt*文件。双击此文件以在代码编辑器中打开它。
- en: 'First, you’ll need a helper function that loads the TensorFlow Lite model from
    the *assets* directory:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要一个帮助函数，从*assets*目录中加载TensorFlow Lite模型：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Because the *.tflite* file is effectively a compressed binary blob of weights
    and biases that the interpreter will use to build an internal neural network model,
    it’s a `ByteBuffer` in Android terms. This code will load the file at `modelPath`
    and return it as a `ByteBuffer`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因为*.tflite*文件实际上是一个包含权重和偏差的压缩二进制数据块，解释器将使用它来构建内部神经网络模型，在Android术语中它是一个`ByteBuffer`。此代码将加载`modelPath`处的文件并将其作为`ByteBuffer`返回。
- en: 'Then, within your activity, at the class level (i.e., just below the class
    declaration, not within any class functions), you can add the declarations for
    the model and interpreter:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在你的活动中，在类级别（即类声明的下方，不在任何类函数内），你可以添加模型和解释器的声明：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So, in this case, the interpreter object that does all the work will be called
    `tflite` and the model that you’ll load into the interpreter as a `ByteBuffer`
    is called `tflitemodel`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，执行所有工作的解释器对象将被称为`tflite`，而你将加载到解释器中作为`ByteBuffer`的模型将被称为`tflitemodel`。
- en: 'Next, in the `onCreate` method, which gets called when the activity is created,
    add some code to instantiate the interpreter and load `model.tflite` into it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`onCreate`方法中（当活动创建时调用），添加一些代码来实例化解释器并加载`model.tflite`到其中：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Also, while you’re in `onCreate`, add the code for the two controls that you’ll
    interact with—the `EditText` where you’ll type a value, and the `Button` that
    you’ll press to get an inference:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`onCreate`中，还要添加与你将与之交互的两个控件的代码——`EditText`，在其中你将输入一个值，以及`Button`，在其中你将按下以进行推理：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You’ll also need to declare the `EditText` at the class level alongside `tflite`
    and `tflitemodel`, as it will be referred to within the next function. You can
    do that with the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在类级别声明`EditText`以及`tflite`和`tflitemodel`，因为它将在下一个函数中被引用。你可以用以下方式做到这一点：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, it’s time to do the inference. You can do this with a new function
    called `doInference`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是执行推理的时候了。你可以使用一个名为`doInference`的新函数来完成这个操作：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Within this function you can gather the data from the input, pass it to TensorFlow
    Lite to get an inference, and then display the returned value.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，你可以从输入中收集数据，将其传递给TensorFlow Lite进行推理，然后显示返回的值。
- en: 'The `EditText` control, where you’ll enter the number, will provide you with
    a string, which you’ll need to convert to a float:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditText`控件，你将在其中输入数字，将提供给你一个字符串，你需要将其转换为浮点数：'
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you’ll recall from [Chapter 12](ch12.xhtml#an_introduction_to_tensorflow_lite),
    when feeding data into the model you need to format it as a Numpy array. Being
    a Python construct, Numpy isn’t available in Android, but you can just use a `FloatArray`
    in this context. Even though you’re only feeding in one value, it still needs
    to be in an array, roughly approximating a tensor:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第12章](ch12.xhtml#an_introduction_to_tensorflow_lite)中所记得的，当向模型提供数据时，你需要将其格式化为一个Numpy数组。由于Numpy是一个Python构造，不支持在Android上使用，但在这种情况下可以使用`FloatArray`。即使你只传入一个值，它仍然需要在一个数组中，大致相当于一个张量：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The model will return a stream of bytes to you that will need to be interpreted.
    As you know, you’re getting a float value out of the model, and given that a float
    is 4 bytes, you can set up a `ByteBuffer` of 4 bytes to receive the output. There
    are several ways that bytes can be ordered, but you just need the default, native
    order:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 模型将返回一串字节流，需要进行解释。如您所知，模型输出的是一个浮点值，考虑到一个浮点数占用4个字节，您可以设置一个4字节的`ByteBuffer`来接收输出。字节可以按多种方式排序，但您只需使用默认的本机顺序：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To perform the inference, you call the `run` method on the interpreter, passing
    it the input and output values. It will then read from the input value and write
    to the output value:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行推理，您需要在解释器上调用`run`方法，传递输入和输出值。然后它将从输入值读取，并将结果写入输出值：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output is written to the `ByteBuffer`, whose pointer is now at the end
    of the buffer. To read it, you have to reset it to the beginning of the buffer:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 输出写入`ByteBuffer`，其指针现在位于缓冲区的末尾。要读取它，您需要将其重置为缓冲区的开头：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And now you can read the contents of the `ByteBuffer` as a float:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以将`ByteBuffer`的内容作为浮点数读取：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you want to display this to the user, you can then use an `AlertDialog`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望将此显示给用户，您可以使用`AlertDialog`：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now run the app and try it for yourself! You can see the results in [Figure 13-7](#running_the_interpreter_in_an_emulator).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序并自行尝试！您可以在[图13-7](#running_the_interpreter_in_an_emulator)中看到结果。
- en: '![Running the interpreter in an emulator](Images/aiml_1307.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![在模拟器中运行解释器](Images/aiml_1307.png)'
- en: Figure 13-7\. Running the interpreter in an emulator
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-7\. 在模拟器中运行解释器
- en: Moving Beyond “Hello World”—Processing Images
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越“Hello World”—处理图像
- en: As you saw over the last few pages, there’s a lot of scaffolding involved in
    building an Android app, and the TensorFlow Lite interpreter needs code and configuration
    in order to be properly initialized. Now that you have that out of the way, if
    you want to create other Android apps that use TensorFlow Lite, you’ll go through
    pretty much the same process. The only major difference you’ll encounter is in
    formatting your input data in a way that the model understands, and parsing output
    data in the same way. So, for example, in [Chapter 12](ch12.xhtml#an_introduction_to_tensorflow_lite)
    you built a Dogs vs. Cats model that allows you to feed in an image of a cat or
    a dog, and get an inference out. The model expects as input an image that is 224
    × 224 pixels, in three color channels, and normalized—this requires figuring out
    how on earth to get an image from an Android image control and format it so that
    the neural network can understand it!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在过去的几页中所看到的，构建 Android 应用涉及大量的脚手架，并且 TensorFlow Lite 解释器需要代码和配置才能正确初始化。现在您已经解决了这个问题，如果您想创建其他使用
    TensorFlow Lite 的 Android 应用程序，您将会经历基本相同的过程。您将遇到的唯一主要区别在于，需要以模型理解的方式格式化输入数据，并以相同的方式解析输出数据。因此，例如，在[第12章](ch12.xhtml#an_introduction_to_tensorflow_lite)中，您构建了一个狗与猫模型，允许您输入猫或狗的图像，并得到推理结果。该模型要求输入一张尺寸为224
    × 224像素、三个颜色通道且已归一化的图像——这就需要弄清楚如何从Android图像控件获取图像并进行格式化，以便神经网络能够理解它！
- en: For example, let’s start with an image like that in [Figure 13-8](#image_of_a_dog_to_interpret),
    which is a simple image of a dog that happens to be 395 × 500 pixels.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们从[图13-8](#image_of_a_dog_to_interpret)中的图像开始，这是一张狗的简单图像，尺寸为395 × 500像素。
- en: '![Image of a dog to interpret](Images/aiml_1308.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![狗的图像进行解释](Images/aiml_1308.png)'
- en: Figure 13-8\. Image of a dog to interpret
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-8\. 狗的图像进行解释
- en: 'The first thing you need to do is resize it to 224 × 224 pixels, the image
    dimensions that the model was trained on. This can be done in Android using the
    `Bitmap` libraries. For example, you can create a new 224 × 224 bitmap with:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是将其调整为模型训练时的224 × 224像素大小。在Android中可以使用`Bitmap`库来完成这个任务。例如，您可以创建一个新的224
    × 224位图：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: (In this case `bitmap` contains the raw image loaded as a resource by the app.
    The full app is available in the book’s [GitHub repo](https://github.com/lmoroney/tfbook).)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: （在这种情况下，`bitmap`包含应用程序加载的原始图像资源。完整的应用程序可在书的[GitHub存储库](https://github.com/lmoroney/tfbook)中找到。）
- en: 'Now that it’s the right size, you have to reconcile how the image is structured
    in Android with how the model expects it to be structured. If you recall, when
    training models earlier in the book you fed in images as normalized tensors of
    values. For example, an image like this would be (224, 224, 3): 224 × 224 is the
    image size, and 3 is the color depth. The values were also all normalized to between
    0 and 1.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尺寸正确后，你需要协调Android中图像的结构与模型期望的结构相符。如果你回忆一下，在本书早些时候训练模型时，你把图像作为归一化的张量值输入。例如，像这样的图像会是（224，224，3）：224
    × 224是图像尺寸，3是颜色深度。这些值也都被归一化到0到1之间。
- en: 'So, in summary, you need 224 × 224 × 3 float values between 0 and 1 to represent
    the image. To store that in a `ByteArray`, where 4 bytes make a float, you can
    use this code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，总结一下，你需要224 × 224 × 3个0到1之间的浮点值来表示这幅图像。要将它存储在一个`ByteArray`中，其中4个字节组成一个浮点数，你可以使用这段代码：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Our Android image, on the other hand, has each pixel stored as a 32-bit integer
    in an RGB value. This might look something like 0x0010FF10 for a particular pixel.
    The first two values are the transparency, which you can ignore, and the rest
    are for RGB; i.e., 0x10 for red, 0xFF for green, and 0x10 for blue. The simple
    normalization you’ve been doing to this point is just to divide the R, G, B channel
    values by 255, which would give you .06275 for red, 1 for green, and .06275 for
    blue.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们的Android图像将每个像素存储为一个32位整数的RGB值。这可能看起来像是对于特定像素的0x0010FF10。前两个值是透明度，你可以忽略它们，剩下的是RGB；即0x10表示红色，0xFF表示绿色，0x10表示蓝色。到目前为止，你一直在做的简单归一化只是将R、G、B通道值除以255，这将给你红色的0.06275，绿色的1，蓝色的0.06275。
- en: 'So, to do this conversion, let’s first turn our bitmap into an array of 224
    × 224 integers, and copy the pixels in. You can do this using the `getPixels`
    API:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，为了进行这种转换，让我们首先将我们的位图转换为一个224 × 224整数数组，并复制像素。你可以使用`getPixels` API来实现这一点：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now you’ll need to iterate through this array, reading the pixels one by one
    and converting them into normalized floats. You’ll use bit shifting to get the
    particular channels. For example, consider the value 0x0010FF10 from earlier.
    If you shift that by 16 bits to the right, you’ll get 0x0010 (with the FF10 being
    “lost”). If you then “and” that by 0xFF, you’ll get 0x10, keeping just the bottom
    two numbers. Similarly, if you had shifted by 8 bits to the right you’d have 0x0010FF,
    and performing an “and” on that would give you 0xFF. It’s a technique that allows
    you to quickly and easily strip out the relevant bits that make up the pixels.
    You can use the `shr` operation on an integer for this, with `input.shr(16)` reading
    “shift input 16 pixels to the right”:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要遍历这个数组，逐个读取像素并将其转换为归一化的浮点数。你将使用位移来获取特定的通道。例如，考虑之前的值0x0010FF10。如果你将其向右移动16位，你将得到0x0010（FF10部分将被“丢弃”）。然后，如果你对其进行0xFF的“与”操作，你将得到0x10，保留底部的两个数字。类似地，如果你向右移动8位，你将得到0x0010FF，并对其进行“与”操作将得到0xFF。这是一种允许你快速轻松地剥离出组成像素的相关位的技术。你可以在整数上使用`shr`操作来实现这一点，比如`input.shr(16)`表示“将输入向右移动16个像素”：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As before, when it comes to the output, you need to define an array to hold
    the result. It doesn’t *have* to be a `ByteArray`; indeed, you can define something
    like a `FloatArray` if you know the results are going to be floats, as they usually
    are. In this case, with the Dogs vs. Cats model, you have two labels, and the
    model architecture was defined with two neurons in the output layer, containing
    the respective properties for the classes cat and dog. So, to read back the results
    you can define a structure to contain the output tensor like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，当涉及到输出时，你需要定义一个数组来保存结果。它不一定*必须*是一个`ByteArray`；实际上，如果你知道结果通常是浮点数，你可以定义类似于`FloatArray`的东西。在这种情况下，使用猫狗模型，你有两个标签，模型架构在输出层定义了两个神经元，包含了类别猫和狗的相应属性。因此，为了读取结果，你可以定义一个结构来包含类似于这样的输出张量：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that it’s a single array that contains an array of two items. Remember
    back when using Python you might see a value like `[[1.0 0.0]]`—it’s the same
    here. The `Array(1)` is defining the containing array `[]`, while the `FloatArray(2)`
    is the `[1.0 0.0]`. It can be a little confusing, for sure, but it’s something
    that I hope you’ll get used to as you write more TensorFlow apps!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它是一个包含两个项目数组的单一数组。回想一下，当使用Python时，你可能会看到像`[[1.0 0.0]]`这样的值——这里是一样的。`Array(1)`定义了包含数组`[]`，而`FloatArray(2)`是`[1.0
    0.0]`。这可能有点令人困惑，但希望你在编写更多TensorFlow应用时能习惯！
- en: 'As before, you interpret using `interpreter.run`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，你可以使用`interpreter.run`来解释：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And now your result will be an array, containing an array of two values. You
    can see what it looks like in the Android debugger in [Figure 13-8](#image_of_a_dog_to_interpret).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的结果将是一个包含两个值数组的数组。您可以在Android调试器中看到它的样子，如[图13-8](#image_of_a_dog_to_interpret)所示。
- en: '![Parsing the output value](Images/aiml_1309.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![解析输出值](Images/aiml_1309.png)'
- en: Figure 13-9\. Parsing the output value
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-9\. 解析输出值
- en: As you create mobile apps with Android, this is the most complex part—other
    than creating the model, of course—that you’ll have to take into account. How
    Python represents values, particularly with Numpy, can be very different from
    how Android does. You’ll have to create convertors to reformat your data for how
    neural networks expect the data to be input, and you’ll have to understand the
    output schema that the neural network uses so that you can parse the results.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Android移动应用程序时，这是除了创建模型之外，您必须考虑的最复杂部分。Python如何表示值，特别是使用Numpy，可能与Android的方式非常不同。您将不得不创建转换器，以重新格式化数据，使其适应神经网络期望的数据输入，并且您必须了解神经网络使用的输出模式，以便解析结果。
- en: TensorFlow Lite Sample Apps
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow Lite示例应用程序
- en: 'The TensorFlow team provides many open source sample apps that you can dissect
    to learn how they work from the foundations you’ve built up in this chapter. They
    include (but are not limited to) the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow团队提供了许多开源示例应用程序，您可以解析这些应用程序，从而了解它们如何从本章中构建的基础上工作。它们包括（但不限于）以下内容：
- en: Image classification
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分类
- en: Read input from the device’s camera and classify up to a thousand different
    items.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从设备摄像头读取输入并对多达一千种不同的物品进行分类。
- en: Object detection
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对象检测
- en: Read input from the device’s camera and give bounding boxes to objects that
    are detected.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从设备摄像头读取输入，并为检测到的对象提供边界框。
- en: Pose estimation
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 姿势估计
- en: Take a look at the figures in the camera and infer their poses.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 查看摄像机中的图像并推断它们的姿势。
- en: Speech recognition
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 语音识别
- en: Recognize common verbal commands.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 识别常见的口头命令。
- en: Gesture recognition
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 手势识别
- en: Train a model for hand gestures and recognize them in the camera.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为手势训练模型并在摄像头中识别它们。
- en: Smart reply
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 智能回复
- en: Take input messages and generate replies to them.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接收输入消息并生成回复。
- en: Image segmentation
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分割
- en: Similar to object detection, but predict which class each pixel in an image
    belongs to.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于对象检测，但预测图像中每个像素属于哪个类。
- en: Style transfer
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 风格转移
- en: Apply new art styles to any image.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将新的艺术风格应用于任何图像。
- en: Digit classifier
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 数字分类器
- en: Recognize handwritten digits.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 识别手写数字。
- en: Text classification
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 文本分类
- en: Using a model trained on the IMDb dataset, recognize sentiment in text.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用在IMDb数据集上训练的模型，识别文本中的情感。
- en: Question answering
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 问答
- en: Using Bidirectional Encoder Representations from Transformers (BERT), answer
    user queries automatically!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用双向编码器表示转换（BERT），自动回答用户查询！
- en: You can find another curated list of apps on GitHub in the [Awesome TFLite repo](https://oreil.ly/Rxpbx).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[Awesome TFLite repo](https://oreil.ly/Rxpbx)的GitHub上找到另一个经过精心筛选的应用程序列表。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter you got a taste of using TensorFlow Lite on Android. You were
    introduced to the anatomy of an Android application and how you can weave TensorFlow
    Lite into it. You learned how to implement a model as an Android asset, and how
    to load and use that in an interpreter. Most importantly, you saw the need for
    converting your Android-based data (such as images or numbers) into input arrays
    that emulate the tensors used in the model, and how to parse output data, realizing
    that it too is effectively memory-mapped tensors in `ByteBuffer`s. You stepped
    in detail through a couple of examples that showed how to do this, which hopefully
    has equipped you to be able to handle other scenarios. In the next chapter you’ll
    do this all over again, but this time on iOS with Swift.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您体验了如何在Android上使用TensorFlow Lite。您了解了Android应用程序的结构以及如何将TensorFlow Lite集成到其中。您学会了如何将模型实现为Android资产，以及如何加载和在解释器中使用它。最重要的是，您了解到需要将基于Android的数据（如图像或数字）转换为模型中使用的输入数组，并学会如何解析输出数据，认识到它也是在`ByteBuffer`中有效映射的张量。您详细了解了几个示例，展示了如何做到这一点，希望这使您能够处理其他场景。在下一章中，您将再次执行此操作，但这次是在使用Swift的iOS上。
