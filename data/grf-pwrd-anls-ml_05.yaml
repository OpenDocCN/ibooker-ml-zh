- en: Chapter 4\. Studying Startup Investments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。研究初创投资
- en: In this chapter, we will dive into the world of startup investments. This real-world
    use case shows us how three of the six graph powers help us to reveal high-potential
    investment opportunities. The first graph power, connecting the dots, allows us
    to view how various actors in the investment landscape are connected. The second
    graph power, looking deep, offers investors a method to include connected information
    about those actors in our analysis. The third graph power, weighing and predicting,
    enables us to utilize past funding events and investment portfolios to predict
    the success rate of future investments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨初创投资领域。这个现实生活中的用例向我们展示了六种图谱力量中的三种如何帮助我们揭示高潜力的投资机会。第一种图谱力量，连接各种角色，让我们可以看到投资景观中各种角色是如何相互连接的。第二种图谱力量，深入观察，为投资者提供了一种方法，通过我们的分析包含有关这些角色的连接信息。第三种图谱力量，权衡和预测，使我们能够利用过去的资金事件和投资组合来预测未来投资的成功率。
- en: 'After completing this chapter, you should be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您应该能够：
- en: Explain how connecting the dots, looking deep, and weighing and predicting address
    search and analysis needs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释连接各种角色、深入观察和权衡预测如何解决搜索和分析需求
- en: Model and analyze startup investment opportunities
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对初创投资机会进行建模和分析
- en: Traverse multihop relationships to filter deeper connected information
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历多跳关系以过滤更深层次的连接信息
- en: Read and understand more advanced GSQL queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读和理解更高级的GSQL查询
- en: 'Goal: Find Promising Startups'
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标：寻找有前途的初创公司
- en: Investing in a startup is an exciting and lucrative way of building wealth.
    Investors poured over $156 billion into US startups in 2020\. Those startups generated
    over $290 billion of liquidity.^([1](ch04.html#ch01fn7)) However, 9 out of 10
    startups will fail, and with only 40% becoming profitable, it becomes a challenge
    to bet on the right horse.^([2](ch04.html#ch01fn8))
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 投资初创公司是一种既令人兴奋又有利可图的财富积累方式。2020年，投资者在美国初创公司中投入超过1560亿美元。这些初创公司产生了超过2900亿美元的流动性[^1]。然而，十分之九的初创公司将会失败，只有40%的公司变得盈利，这让正确押注变得非常具有挑战性[^2]。
- en: Startups start with a founding team consisting of only a few members. Over time,
    as a startup goes through different development stages, its product improves,
    and the team grows. To fund these developments, the startup needs money from investors.
    From the perspective of investment, one way to identify which startup is a proper
    candidate to finance is by looking at the composition of the startup team and
    its organization. Startups that have the right people at the right places in their
    organizations tend to have higher chances of success. Therefore, startups led
    by founders with a positive track record of building up companies are more likely
    to succeed in other companies. Another way to assess the investment opportunity
    is by looking at the startup’s existing investors. Investors with a high return
    on their investment portfolio show that they can see the potential of startups
    in the early stages and help them grow into more profitable businesses.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 初创公司从成立团队开始，团队成员仅有少数几人。随着时间的推移，随着初创公司经历不同的发展阶段，其产品得到改进，团队也在壮大。为了资助这些发展，初创公司需要来自投资者的资金。从投资的角度来看，识别哪家初创公司适合融资的一种方法是看初创团队及其组织的构成。在其组织中拥有正确的人员的初创公司通常有更高的成功机会。因此，由具有积极创业历程的创始人领导的初创公司，在其他公司中也更有可能取得成功。评估投资机会的另一种方式是观察初创公司的现有投资者。投资组合回报率高的投资者表明他们能够看到早期阶段初创公司的潜力，并帮助它们发展成为更有利可图的企业。
- en: Investing in startups is a risky and complex assessment that requires understanding
    the product and market it tries to take on and the people and organizations that
    drive it. Investors need to have an overview of the relationships between these
    aspects that help support the analysis of a startup’s potential.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 投资初创公司是一个风险高、评估复杂的过程，需要理解其试图进入的产品和市场，以及推动其发展的人员和组织。投资者需要了解这些方面之间的关系概况，以帮助支持对初创公司潜力的分析。
- en: 'Solution: A Startup Investment Graph'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案：一种初创投资图谱
- en: Data to support the assessment of investments is mainly unstructured because
    it is collected from different sources. One example of such a source is the Crunchbase
    dataset. This dataset contains information on investment rounds, founders, companies,
    investors, and investment portfolios. However, the dataset is in raw format, meaning
    that the data is not structured to answer the questions we have on the entities
    related to startups for investment purposes. Data about startups and the entities
    contributing to the current state is hidden from us unless we query for the data
    explicitly. With graphs, we can form a schema centered around a target startup
    that we want to investigate and view the impact of other entities on the startup.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于支持投资评估的数据主要是非结构化的，因为它来自不同的来源。其中一个例子是Crunchbase数据集。该数据集包含有关投资轮次、创始人、公司、投资者和投资组合的信息。然而，该数据集是原始格式，这意味着数据没有结构化以回答我们对与初创企业相关的实体的问题。除非我们显式查询数据，否则关于初创企业及其当前状态的实体的数据对我们而言是隐藏的。使用图表，我们可以形成以我们要调查的目标初创企业为中心的模式，并查看其他实体对该初创企业的影响。
- en: Investing in startups occurs in a series of funding events, as shown in [Figure 4-1](#startup_funding_stages_and_types_of_inv).
    Startups typically want to raise more money from a more extensive mixture of investors
    in every later funding stage. Knowing the timing and sequence of events throughout
    these funding stages is essential to validate successful investment interactions.
    Graphs can provide a complete overview of an investment network by searching for
    multihop chains of events. By doing this, we can connect angel investors and venture
    capitalists through different funding stages and expose their investment portfolios’
    success rates over time.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 投资初创企业发生在一系列融资事件中，如[图 4-1](#startup_funding_stages_and_types_of_inv)所示。初创企业通常希望在每个后续融资阶段从更广泛的投资者组合中筹集更多资金。了解这些融资阶段的时间和顺序对验证成功的投资互动至关重要。通过搜索多跳事件链，图表可以提供投资网络的完整概述。通过这样做，我们可以通过不同的融资阶段连接天使投资者和风险投资家，并逐步展示他们投资组合的成功率。
- en: '![Startup funding stages and types of investors per stage](assets/gpam_0401.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![初创企业融资阶段和每个阶段的投资者类型](assets/gpam_0401.png)'
- en: Figure 4-1\. Startup funding stages and types of investors per stage
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 初创企业融资阶段和每个阶段的投资者类型
- en: Traditional relational database queries provide us with a snapshot of an event
    and the state of each entity at a single point in time. However, when assessing
    investment portfolios, we need to understand the relationships between investors
    and the companies they have invested in and how these relationships have evolved.
    Graphs solve this by showing the investment portfolio as a series of events using
    multihop queries. We can also use multiple hops to perform complex searches and
    filtering, such as “find companies that have board members who are from a top-ranked
    VC firm and who previously served on the board of startups that had successful
    exits.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的关系型数据库查询为我们提供了事件的快照和单个时间点上每个实体的状态。然而，在评估投资组合时，我们需要理解投资者与他们投资的公司之间的关系以及这些关系如何发展。图表通过使用多跳查询展示投资组合作为一系列事件。我们还可以使用多跳执行复杂的搜索和过滤，比如“找到那些拥有来自顶级风投公司的董事会成员，并且曾在有成功退出的初创公司董事会上任职的公司”。
- en: For example, we want to know what startups colleagues of a successful investor
    are investing in now. This insight allows us to utilize successful investors’
    expertise and network based on their past investments. A multihop query can realize
    this by first selecting one or more successful investors. We might already have
    some in mind, or we could find them by counting the number of successful investors
    per investor; that would be one hop. The second hop selects all financial organizations
    where the investors work. The third hop query selects colleagues at those financial
    organizations, and the fourth hop selects other funding events where those colleagues
    participate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想知道一个成功投资者的同事现在投资哪些初创企业。这种洞察力允许我们利用成功投资者基于他们过去的投资的专业知识和网络。通过多跳查询，首先选择一个或多个成功的投资者来实现这一目标。我们可能已经有一些人选，或者我们可以通过计算每个投资者的成功投资者数量来找到他们；这将是一次跳跃。第二次跳跃选择投资者所在的所有金融机构。第三次跳跃查询选择这些金融机构的同事，第四次跳跃选择这些同事参与的其他融资事件。
- en: Implementing a Startup Investment Graph and Queries
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施初创企业投资图和查询
- en: TigerGraph Cloud offers a starter kit for the startup investment analysis use
    case. In the remainder of this chapter, we will describe how we model startups
    and their funding with a graph schema. Then we’ll look at four different graph
    analyses that could help an investor select promising startups.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: TigerGraph 云为初创公司投资分析用例提供了一个入门套件。在本章的其余部分，我们将描述如何使用图模式对初创公司及其融资进行建模。然后我们将看看四种不同的图分析，这些分析可能帮助投资者选择有前途的初创公司。
- en: The Crunchbase Starter Kit
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Crunchbase 入门套件
- en: Use the TigerGraph Cloud account that you created in [Chapter 3](ch03.html#see_your_customers_and_business_better)
    to deploy a new use case and select “Enterprise Knowledge Graph (Crunchbase).”
    Once this starter kit is installed, follow the steps in the section [“Load data
    and install queries for a starter kit”](ch03.html#load_data_and_install_queries_for_a_sta)
    in [Chapter 3](ch03.html#see_your_customers_and_business_better).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您在[第 3 章](ch03.html#see_your_customers_and_business_better)中创建的 TigerGraph
    云账户来部署一个新的用例，并选择“企业知识图谱（Crunchbase）”。安装了这个入门套件之后，按照第 3 章的“加载数据和安装查询的入门套件”部分的步骤进行操作。
- en: Graph Schema
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图模式
- en: The starter kit includes actual data from investments in startups in 2013 collected
    by Crunchbase. It has more than 575K vertices and over 664K edges, with 10 vertex
    types and 24 edge types. [Figure 4-2](#graph_schema_for_enterprise_knowledge_g)
    shows the graph schema of this starter kit. We can immediately see that `**Company**`
    is a vertex type that acts as a hub because it connects to many other vertex types.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 入门套件包含了 Crunchbase 在 2013 年收集的初创公司投资的实际数据。它具有超过 575K 个顶点和超过 664K 条边，包括 10 种顶点类型和
    24 种边缘类型。[图表 4-2](#graph_schema_for_enterprise_knowledge_g)展示了该入门套件的图模式。我们可以立即看到，`**公司**`是一个作为枢纽的顶点类型，因为它连接到许多其他顶点类型。
- en: '![Graph schema for Enterprise Knowledge Graph (Crunchbase)](assets/gpam_0402.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![企业知识图谱（Crunchbase）的图模式](assets/gpam_0402.png)'
- en: Figure 4-2\. Graph schema for Enterprise Knowledge Graph (Crunchbase) (see a
    larger version of this figure at [https://oreil.ly/gpam0402](https://oreil.ly/gpam0402))
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 企业知识图谱（Crunchbase）的图模式（请查看更大版本的图表：[https://oreil.ly/gpam0402](https://oreil.ly/gpam0402)）
- en: Furthermore**,** there are two types of self edges. A `**Company**` can `**acquire**`
    another `**Company**`, and a `**Company**` can also `**invest**` in another `**Company**`.
    A `**Person**` type vertex, on the other hand, does not have self edges, which
    means that a social connection always goes through another vertex type such as
    `**University**`, `**Financial_Org**`, `**Fund⁠ing_Rounds**`, or `**Company**`.
    For example, if a `**Person**` works for a company, this type of relationship
    is indicated with the edge type `**work_for_company**`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外**，**还有两种类型的自环。一个`**公司**`可以`**收购**`另一个`**公司**`，而一个`**公司**`也可以投资于另一个`**公司**`。另一方面，`**人**`类型的顶点没有自环，这意味着社交连接总是通过另一个顶点类型进行，例如`**大学**`、`**金融机构**`、`**融资轮次**`或`**公司**`。例如，如果一个`**人**`为一家公司工作，这种类型的关系将通过`**work_for_company**`边类型来表示。
- en: In [Table 4-1](#vertex_types_in_the_crunchbase_starter), we describe the 10
    vertex types in the starter kit. From the description, we can see that `**Company**`
    vertices have potential relationships with many other vertex types. Some of them
    even have multiple relationship types that connect to `**Company**`. For example,
    a `**Person**` can invest in a `**Company**`, but it can also work for a `**Company**`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在[表格 4-1](#vertex_types_in_the_crunchbase_starter)中，我们描述了入门套件中的 10 种顶点类型。从描述中我们可以看到，`**公司**`顶点与许多其他顶点类型有潜在的关系。有些甚至有多个连接到`**公司**`的关系类型。例如，一个`**人**`可以投资于一个`**公司**`，但也可以为一个`**公司**`工作。
- en: Table 4-1\. Vertex types in the Crunchbase Starter Kit
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 4-1\. Crunchbase 入门套件中的顶点类型
- en: '| Vertex type | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 顶点类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `**Company**` | A company |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `**公司**` | 一家公司 |'
- en: '| `**Funding_Rounds**` | An investment event where a `**Company**` invests
    or receives funds |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `**融资轮次**` | 一次公司投资或获得资金的事件 |'
- en: '| `**Person**` | A natural person who works for a `**Company**` or invests
    in a `**Company**` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `**人**` | 为`**公司**`工作或投资的自然人 |'
- en: '| `**University**` | A university institution |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `**大学**` | 一个大学机构 |'
- en: '| `**Financial_Org**` | A financial institution that invests in a `**Company**`
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `**金融机构**` | 对`**公司**`进行投资的金融机构 |'
- en: '| `**Funds**` | A financial investment |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `**资金**` | 一笔金融投资 |'
- en: '| `**Office**` | A physical office of a `**Company**` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `**办公室**` | 一家`**公司**`的实体办公室 |'
- en: '| `**IPO**` | An initial public offering of a `**Company**` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `**IPO**` | `**Company**`的首次公开发行 |'
- en: '| `**Product**` | A product or service of a `**Company**` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `**产品**` | `**Company**`的产品或服务 |'
- en: '| `**Milestone**` | A milestone that a `**Company**` has accomplished |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `**里程碑**` | `**Company**`已完成的里程碑 |'
- en: Queries and Analytics
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询和分析
- en: Let’s look at the queries in the Enterprise Knowledge Graph (Crunchbase) Starter
    Kit. There are four queries in this starter kit. Each query is designed to answer
    questions that a potential investor or employer might ask.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看企业知识图谱（Crunchbase）入门套件中的查询。此入门套件中有四个查询。每个查询都设计为回答潜在投资者或雇主可能提出的问题。
- en: Key role discovery
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关键角色发现
- en: This query finds all the persons with a key role at a given `**Company**` and
    its parent companies. A key role for a `**Person**` is defined as serving as a
    founder, CEO, CTO, director, or executive for the `**Company**` where they work.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询查找在给定`**Company**`及其母公司中担任关键角色的所有人。对于`**Person**`来说，关键角色定义为担任其工作的`**Company**`的创始人、CEO、CTO、董事或高管。
- en: Investor successful exits
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 投资者成功退出
- en: Given a certain investor, this query finds the startups that had a successful
    exit within a certain number of years after the investor invested. A successful
    exit is when a company has an IPO or is acquired by another company. The visual
    output of the query is the subgraph of the given investor with all its relationships
    with `**IPO**` and acquiring `**Company**` elements. An investor could be any
    element of type `**Person**`, `**Financial_Org**`, or `**Company**`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 针对特定投资者，此查询找出在投资者投资后的若干年内成功退出的初创企业。成功退出是指公司进行了IPO或被其他公司收购。查询的可视输出是给定投资者的子图，其中包括其与所有`**IPO**`和收购`**Company**`元素的关系。投资者可以是任何类型为`**Person**`、`**Financial_Org**`或`**Company**`的元素。
- en: Top startups based on board
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基于董事会的顶尖初创公司
- en: This query ranks startups based on the number of times that a current board
    member working for a top investment firm (`**Financial_Org**`) was also a board
    member of a previous startup that had a successful exit. Investment firms are
    ranked by the amount of funds they invested in the past *N* years. Board members
    are scored according to their number of successful exits. In addition, the query
    filters output startups that are beyond a certain funding-round stage.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询基于当前董事会成员在顶级投资公司(`**Financial_Org**`)工作，并且此前还是具有成功退出记录的前一个初创企业的董事会成员的次数对初创公司进行排名。投资公司根据它们在过去*N*年中投资的金额排名。根据其成功退出数量对董事会成员进行评分。此外，该查询还会过滤输出超过某一融资轮次阶段的初创公司。
- en: Top startups based on leader
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 基于领导者的顶尖初创公司
- en: This query ranks startups based on the number of times one of its founders previously
    worked at another `**Company**`, during an early stage of that company, which
    then went on to have a successful exit. The search is filtered to look only at
    a given industry sector.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询基于其创始人之一先前在另一家`**Company**`早期阶段工作的次数，该公司随后取得了成功退出的次数对初创公司进行排名。搜索结果被过滤以仅查看特定行业部门。
- en: Key role discovery
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键角色发现
- en: The `key_role_discovery` query has two arguments. The first argument, `com⁠pany​_​name`,
    is our target `**Company**` for which we want to find the persons who played key
    roles either there or at a parent company. The second argument, `k`, determines
    how many hops from our starting `company_name` we will search for parent companies.
    This query fits very naturally with a graph model because of the `k` hops parameter.
    [Figure 4-3](#graph_traversal_pattern_to_find_employe) shows part of the graph
    traversal for two hops. Starting from company Com A, we could find connections
    to a parent company Com B and two key persons, Ben and Adam. We then look to see
    if Com B has key persons or has another parent company.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_role_discovery`查询有两个参数。第一个参数，`com⁠pany​_​name`，是我们要查找在其或父公司中担任关键角色的人的目标`**Company**`。第二个参数`k`确定我们从起始`company_name`开始搜索父公司的跳数。由于`k`跳参数，此查询与图模型非常自然地契合。[图 4-3](#graph_traversal_pattern_to_find_employe)展示了两个跳的部分图遍历。从公司Com
    A开始，我们可以找到与父公司Com B和两位关键人物Ben和Adam的连接。然后，我们查看Com B是否有关键人物或另一个母公司。'
- en: We’ll now walk you through the GSQL implementation. In your starter kit, look
    for the query called `key_role_discovery`. Select it so you can see the code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来介绍一下GSQL的实现方式。在您的入门套件中，请查找名为`key_role_discovery`的查询。选择它，以便您可以看到代码。
- en: 'First, we declare some accumulators^([3](ch04.html#ch01fn9)) in which to gather
    our output objects, `@@output_vertices` and `@@output_edges`. We also declare
    `visited` to mark vertices that the query has encountered already, to avoid double-counting
    or searching in circles. In this dataset, if a time variable does not have a genuine
    value, it is set to code 0, which translates to January 1, 1970\. We declare `TNULL`
    as a more descriptive name for this situation:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明一些累加器^([3](ch04.html#ch01fn9))，用于收集我们的输出对象`@@output_vertices`和`@@output_edges`。我们还声明`visited`来标记查询已经遇到的顶点，以避免重复计数或循环搜索。在这个数据集中，如果时间变量没有真实值，则设置为代码0，即转换为1970年1月1日。我们将`TNULL`声明为这种情况的更具描述性的名称：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Graph traversal pattern to find employees who have a key role at a company
    and its parent companies](assets/gpam_0403.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![查找在公司及其母公司中拥有关键角色的员工的图遍历模式](assets/gpam_0403.png)'
- en: Figure 4-3\. Graph traversal pattern to find employees who have a key role at
    a company and its parent companies
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-3\. 查找在公司及其母公司中拥有关键角色的员工的图遍历模式
- en: 'Next, we select all the company elements whose `name` attribute matches the
    input parameter `company_name`. The functions `lower(trim())` remove any leading
    or trailing blank spaces and convert all the letters to lowercase so that differences
    in capitalization won’t matter. Each vertex whose name matches is added to the
    `@@output_vertices` set and is also marked as `@visited`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们选择所有公司元素，其`name`属性与输入参数`company_name`匹配。函数`lower(trim())`删除任何前导或尾随空格，并将所有字母转换为小写，以便不区分大小写。每个名称匹配的顶点都添加到`@@output_vertices`集合中，并标记为`@visited`：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we start a `WHILE` loop to look for key persons and parent companies up
    to `k` levels deep. At each iteration, we select all `**Company**` elements that
    have an **`invested_by_company`**, **`acquired_by`**, or **`work_for_company`**
    edge to a `**Company**` or `**Person**`. This is a good example of the importance
    of selecting descriptive names for your vertices and edges:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们开始一个`WHILE`循环，以查找高达`k`层深度的关键人物和母公司。在每次迭代中，我们选择所有具有**`invested_by_company`**、**`acquired_by`**或**`work_for_company`**边缘连接到公司或个人的**`Company`**元素。这是选择顶点和边缘描述性名称重要性的很好示例：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There is more to this `SELECT` block. Its **WHERE** clause performs additional
    filtering of the selected companies and persons. First, to make sure we are traversing
    company-to-person edges in the correct direction, we require that the source vertex
    (using the alias `s`) is a company. We also require that we haven’t visited the
    target vertex before (`NOT tgt.@visited`). Then, if the edge type is **`work_for_company`**,
    the job title must contain “founder,” “CEO,” “CTO,” “[b]oard [of] directors,”
    or “[e]xecutive”:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此`SELECT`块还有更多内容。其**WHERE**子句对所选公司和个人执行额外的过滤。首先，为了确保我们在正确的方向上遍历公司到个人的边缘，我们要求源顶点（使用别名`s`）是公司。我们还要求在之前未访问过目标顶点（`NOT
    tgt.@visited`）。然后，如果边缘类型是**`work_for_company`**，则职位标题必须包含“founder”、“CEO”、“CTO”、“[b]oard
    [of] directors”或“[e]xecutive”：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We then add the selected vertices and edges to our accumulators `@@output_vertices`
    and `@@output_edges`, and we mark the vertices as `visited`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将选定的顶点和边缘添加到我们的累加器`@@output_vertices`和`@@output_edges`中，并标记顶点为`visited`。
- en: 'Finally, we display the selected companies and persons with their interconnecting
    edges, both graphically and as JSON data. The line `Results = {@@output_vertices}`
    creates a vertex set from a `SetAccum<VERTEX>`. If we printed `@@output_vertex`
    directly, we would see only the vertices’ IDs. Printing a vertex set like `Results`
    will display all of the vertices’ properties:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们以图形和JSON数据的形式显示所选公司和个人及其相互连接的边缘。行`Results = {@@output_vertices}`从`SetAccum<VERTEX>`创建一个顶点集。如果直接打印`@@output_vertex`，只会看到顶点的ID。像`Results`这样打印顶点集将显示所有顶点的属性：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'GSQL: Printing Vertices'
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'GSQL: 打印顶点'
- en: For efficiency, accumulators containing vertices store only their IDs. To print
    vertex properties, copy the accumulator into a regular vertex set and print the
    vertex set.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了效率起见，包含顶点的累加器仅存储它们的ID。要打印顶点属性，请将累加器复制到常规顶点集中并打印顶点集。
- en: In [Figure 4-4](#key_role_discovery_when_company_name_eq), we show the output
    when `company_name` `= LuckyCal` `and` `k = 3`. While the name of the company
    in the center is missing, we can see that it is Facebook, based on the list of
    founders, including Mark Zuckerberg.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 4-4](#key_role_discovery_when_company_name_eq)中，我们展示了`company_name` `= LuckyCal`
    `and` `k = 3`时的输出。虽然中心公司的名称缺失，但根据创始人列表，包括马克·扎克伯格，我们可以看到它是Facebook。
- en: '![Key role discovery when company_name = LuckyCal and k = 3](assets/gpam_0404.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![当`company_name` = `LuckyCal`和`k` = 3时的关键角色发现](assets/gpam_0404.png)'
- en: Figure 4-4\. Key role discovery when `company_name` = `LuckyCal` and `k` = 3
    (see a larger version of this figure at [https://oreil.ly/gpam0404](https://oreil.ly/gpam0404))
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-4\. 当`company_name` = `LuckyCal`和`k` = 3时的关键角色发现（请在[https://oreil.ly/gpam0404](https://oreil.ly/gpam0404)查看此图的更大版本）
- en: Investor successful exits
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 投资者成功退出
- en: 'The `investor_successful_exits` query finds the achievement of a given investor,
    where achievement is measured by the number of investments that lead to IPOs and
    acquisitions. It takes three arguments. `investor_name` is the name of our target
    investor of whom we want to know the achievements, and `investor_type` is the
    type of investor, which could be `**Company**`, `**Person**`, or `**Financial_Org**`.
    We use `year` to test if an exit occurred soon enough after the funding. We can
    answer this query by using the following graph traversal pattern as illustrated
    in [Figure 4-5](#graph_traversal_pattern_to_find_investo). Start from the selected
    investor vertex (`investor_name`):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 查询`investor_successful_exits`查找给定投资者的成就，其中成就由导致IPO和收购的投资数量衡量。它接受三个参数。`investor_name`是我们想要了解成就的目标投资者的名称，而`investor_type`是投资者的类型，可以是`**Company**`、`**Person**`或`**Financial_Org**`。我们使用`year`来测试资金注入后是否很快发生了退出。我们可以通过以下图遍历模式来回答此查询，如[图 4-5](#graph_traversal_pattern_to_find_investo)所示。从选定的投资者顶点（`investor_name`）开始：
- en: Hop to the funding rounds the investor participated in.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳到投资者参与的融资轮次。
- en: Hop to the companies funded by these rounds.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳到这些轮次资助的公司。
- en: Hop to the exit events (**`acquired_by`** or **`company_ipo`** edges).
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳到退出事件（**`acquired_by`**或**`company_ipo`**边缘）。
- en: '![Graph traversal pattern to find investors with successful exits](assets/gpam_0405.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![寻找具有成功退出的投资者的图遍历模式](assets/gpam_0405.png)'
- en: Figure 4-5\. Graph traversal pattern to find investors with successful exits
    (see a larger version of this figure at [https://oreil.ly/gpam0405](https://oreil.ly/gpam0405))
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-5\. 寻找具有成功退出的投资者的图遍历模式（请在[https://oreil.ly/gpam0405](https://oreil.ly/gpam0405)查看此图的更大版本）
- en: We’ll walk you through key parts of the GSQL code for the `investor_successful_exits`
    query.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示`investor_successful_exits`查询的GSQL代码的关键部分。
- en: 'We start by declaring several variables. We want to show the paths from investor
    to successful exits. As we traverse through the graph, `@parent_vertex_set` and
    `@parent_edge_set` act like breadcrumbs. At each newly visited vertex, we use
    them to record how we got there. After we reach the end, we use these accumulators
    to find our way back. During the backtrack, we gather all the vertices and edges
    on these paths into the global accumulators `@@result_vertex_set` and `@@result_edge_set`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先声明几个变量。我们想展示从投资者到成功退出的路径。当我们通过图遍历时，`@parent_vertex_set`和`@parent_edge_set`充当面包屑。在访问每个新顶点时，我们使用它们记录我们到达那里的方式。在达到结尾后，我们使用这些累加器找到回溯的路径。在回溯过程中，我们将所有这些路径上的顶点和边缘收集到全局累加器`@@result_vertex_set`和`@@result_edge_set`中：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next we create the `Start` set of vertices, using a `CASE` statement and the
    `investor_type` parameter to select the type of investors indicated by the user:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`CASE`语句和`investor_type`参数来创建`Start`顶点集，以选择用户指定的投资者类型：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We complete the preliminaries by finding the individual investor who has `investor_name`.
    If the investor is a `**Person**`, we check the attribute called `fullname`; otherwise,
    we check the attribute called `name`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过找到拥有`investor_name`的个体投资者来完成前期工作。如果投资者是`**Person**`，我们检查称为`fullname`的属性；否则，我们检查称为`name`的属性：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we begin our graph hops. First we select all the `**Funding_Rounds**` linked
    to the investor. At each selected `**Funding_Rounds**` vertex, we store the identity
    of the vertex and edge traversed to arrive there. The target vertices of this
    hop are stored in a variable called `Funding_rounds`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始我们的图遍历。首先，我们选择所有与投资者相关联的`**Funding_Rounds**`。在每个选定的`**Funding_Rounds**`顶点，我们存储到达那里的顶点和边缘的标识。这一跳的目标顶点存储在名为`Funding_rounds`的变量中：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we take another hop from the selected funding rounds to the companies they
    funded. An investor can invest in a company at more than one funding round. For
    example, in [Figure 4-6](#investor_successful_exits_when_investor), we see that
    Ted Leonsis invested in Revolution Money in both rounds B and C. An investor’s
    success should be judged from the time of their first investment. Each `**Funding_Rounds**`
    vertex sends its `funded_at` parameter value to a `MinAccum @min_invested_time`,
    which remembers the minimum value that it is given:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们从所选的融资轮次再跳到它们投资的公司。一个投资者可以在一家公司的多个融资轮次投资。例如，在[图 4-6](#investor_successful_exits_when_investor)中，我们看到Ted
    Leonsis在Revolution Money的B轮和C轮都有投资。投资者的成功应该从他们的第一笔投资开始评估。每个`**Funding_Rounds**`顶点将其`funded_at`参数值发送到`MinAccum
    @min_invested_time`，以记住给定的最小值：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, for each company that received investment funding, we look to see
    if it had a successful exit within the required time window. A **`company_ipo`**
    or **`acquired_by`** edge indicates an exit. If it was an IPO, we check that the
    IPO date (the `public_at` attribute) is later than the investment date but not
    more than the value of `years` later. An analogous check is performed on the `acquired_at`
    attribute if it was an acquisition event:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于每家接受投资的公司，我们查看是否在所需的时间窗口内有成功的退出。**`company_ipo`**或**`acquired_by`**边缘表示退出。如果是IPO，我们检查IPO日期（`public_at`属性）是否晚于投资日期，但不超过`years`值。如果是收购事件，则对`acquired_at`属性执行类似的检查：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Investor Successful Exits when investor_name = Ted Leonsis and years = 3](assets/gpam_0406.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![当投资者名称为Ted Leonsis且年限为3时，投资者成功退出](assets/gpam_0406.png)'
- en: Figure 4-6\. Investor successful exits when `investor_name` = Ted Leonsis and
    `years` = 3 (see a larger version of this figure at [https://oreil.ly/gpam0406](https://oreil.ly/gpam0406))
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-6。当`investor_name` = Ted Leonsis和`years` = 3时的投资者成功退出（请在[https://oreil.ly/gpam0406](https://oreil.ly/gpam0406)查看更大的版本）
- en: 'If we only wanted to know how many successful exits our investor had, or the
    company details of those exits, we would be done. However, it’s interesting to
    graphically show the paths from investor → funding → company → exit, as in [Figure 4-6](#investor_successful_exits_when_investor).
    To gather that information, we traverse from the exit vertices backward to the
    investor, using the breadcrumbs (`@parent_vertex_set` and `@parent_edge_set`)
    that we set previously:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想知道我们的投资者有多少成功退出，或者这些退出的公司详细信息，我们可能已经完成了。然而，通过图形方式展示从投资者→融资→公司→退出的路径是有趣的，就像在[图 4-6](#investor_successful_exits_when_investor)中那样。为了收集这些信息，我们从退出顶点向后遍历到投资者，使用我们之前设置的面包屑（`@parent_vertex_set`和`@parent_edge_set`）：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Top startups based on board
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于董事会的顶级创业公司
- en: 'The `top_startups_based_on_board` query adds some complexity by adding in two
    forms of ranking: top-performing investment companies and top-performing leaders
    at those investment companies. It starts by identifying the `**Financial_Org**`
    entities that have invested the most money in recent years. Then, we rank `**Persons**`
    at those organizations according to the number of times they were on the board
    of a startup `**Company**` and guided it to a successful exit. Then, we display
    any pre-exit `**Companies**` that currently have one of these successful executives
    as a board member.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`top_startups_based_on_board`查询通过两种排名方式增加了一些复杂性：表现最佳的投资公司和这些投资公司中表现最佳的领导者。首先，它识别了近年来投资最多资金的`**Financial_Org**`实体。然后，我们根据这些组织中他们在创业公司`**Company**`董事会上的次数及其指导成功退出的情况来排名`**Persons**`。然后，我们显示任何目前拥有这些成功高管作为董事会成员的退出前公司`**Companies**`。'
- en: 'The `top_startups_based_on_board` query has four input parameters:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`top_startups_based_on_board`查询有四个输入参数：'
- en: '`k_orgs`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`k_orgs`'
- en: The number of top financial institutions we want to include in our selection
    scope
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在我们的选择范围内包括顶级金融机构的数量
- en: '`num_persons`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`num_persons`'
- en: The number of top board members to select
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 选择顶级董事会成员的数量
- en: '`max_funding_round`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`max_funding_round`'
- en: Filters the final list of promising startups to exclude those that have received
    investment funding at a later stage than `max_funding_round`
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将最终有希望的创业公司列表的过滤器排除掉那些在`max_funding_round`之后接受过投资的公司
- en: '`past_n_years`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`past_n_years`'
- en: Sets the time window for money invested by `**Financial_Org**`
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 设置由`**Financial_Org**`投资的时间窗口
- en: 'We can implement this query according to the following steps, most of which
    correspond to a graph hop; these steps are illustrated in [Figure 4-7](#graph_traversal_pattern_to_find_promis):'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据以下步骤实现这个查询，其中大部分对应于图遍历；这些步骤在 [图 4-7](#graph_traversal_pattern_to_find_promis)
    中有详细说明：
- en: Compute how much `**Funding_Rounds**` investment each `**Financial_Org**` made
    in the past *N* years [Hop 1].
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算过去 *N* 年中每个 `**Financial_Org**` 进行了多少次 `**Funding_Rounds**` 投资 [Hop 1].
- en: Rank the `**Financial_Org**` by the investment amount and take the top `k_orgs`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照投资金额对 `**Financial_Org**` 进行排名，并选取前 `k_orgs` 名。
- en: Find `**Persons**` who work for a top k `**Financial_Org**` (from step 2) [Hop
    2].
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到在前 k 个 `**Financial_Org**`（来自步骤 2）工作的 `**Persons**` [Hop 2].
- en: Find companies at which those `**Persons**` (from step 3) served as board members
    [Hop 3].
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到这些 `**Persons**`（来自步骤 3）在哪些公司担任董事会成员 [Hop 3].
- en: Rank those `**Persons**` (from step 3) by the number of times they were on the
    board of a `**Company**` (from step 4) before its successful exit [Hop 4].
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤排名 `**Persons**`（来自步骤 3），根据他们在成功退出之前在 `**Company**` 董事会上任职的次数进行排名 [Hop
    4].
- en: Find pre-exit `**Company**` vertices that have a top board member `**Person**`
    (from step 5). Filter these companies by the funding round cutoff [Hop 5].
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到在成功退出之前有顶级董事会成员 `**Person**` 的 `**Company**` 顶点（来自步骤 5）。通过资金轮次截止日期筛选这些公司 [Hop
    5].
- en: This query declares several accumulators and other variables to assist with
    this computation. There are also two interesting data preparation steps. One stores
    some currency exchange rates in a lookup table. Another makes a list of all the
    funding round codes `@@allowed_funding_rounds` up to our `max_cutoff_round`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询声明了几个累加器和其他变量来辅助进行这个计算。还有两个有趣的数据准备步骤。一个是将一些货币汇率存储在查找表中。另一个是制作一个包含所有资金轮次代码
    `@@allowed_funding_rounds` 的列表，直到我们的 `max_cutoff_round`。
- en: '![Graph traversal pattern to find promising startups based on successful board
    members from top financial organizations](assets/gpam_0407.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![基于成功的董事会成员从顶级金融机构中找到有前途的创业公司的图遍历模式](assets/gpam_0407.png)'
- en: Figure 4-7\. Graph traversal pattern to find promising startups based on successful
    board members from top financial organizations
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-7\. 基于成功的董事会成员从顶级金融机构中找到有前途的创业公司的图遍历模式
- en: 'Our first graph hop is also a data preparation step. Our Crunchbase graph schema
    stores the IPO or acquisition date of a company on an edge. Copy that data so
    that it is also available with the companies themselves:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个图遍历也是一个数据准备步骤。我们的 Crunchbase 图模式在边上存储了公司的 IPO 或收购日期。复制这些数据，使其也可用于公司本身：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the next hop, we connect `**Financial_Org**` vertices with their investment
    `**Funds**` in order to tally the investments of the `past_n_years` and then take
    the top k organizations. The `WHERE` clause filters for the desired time range.
    To take the top k, GSQL offers `ORDER BY` and `LIMIT` clauses, just as in SQL:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将 `**Financial_Org**` 顶点与它们在过去 *n* 年中的投资 `**Funds**` 进行连接，然后统计投资，并选取前
    k 个组织。`WHERE` 子句根据所需时间范围进行过滤。为了选取前 k 个，GSQL 提供了 `ORDER BY` 和 `LIMIT` 子句，就像 SQL
    中一样：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Advanced GSQL users may sometimes choose to use `HeapAccum` instead of `ORDER
    BY/LIMIT` because sorting a small heap takes less computer memory than the global
    sort that `ORDER BY` performs.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 高级 GSQL 用户有时会选择使用 `HeapAccum` 而不是 `ORDER BY/LIMIT`，因为对一个小堆进行排序比 `ORDER BY` 执行的全局排序消耗的计算机内存少。
- en: 'Next, we select all employees (`**Person**` who `**work_for_fOrg**`) at these
    top financial organizations (the `Top_org` vertex set from the previous step):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们选择在这些顶级金融机构（来自前一步骤的 `Top_org` 顶点集合）工作的所有员工（`**Person**` who `**work_for_fOrg**`）：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'From these `Persons_at_top_orgs`, we want to select the ones that satisfied
    the following criteria for helping to lead a successful exit:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些 `Persons_at_top_orgs` 中，我们想要选择那些满足以下条件以帮助领导成功退出的人：
- en: Their job title included “Board.”
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们的职位包括“董事会”。
- en: The company has had an exit (`c.@t_exit.size() != 0`).
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司已经退出 (`c.@t_exit.size() != 0`)。
- en: The person has a valid work start date (`datetime_diff(w.start_at, T0) != 0`).
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该人有一个有效的工作开始日期（`datetime_diff(w.start_at, T0) != 0`）。
- en: The company’s exit occurred after the board member joined.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司的退出是在董事成员加入之后发生的。
- en: 'The following code performs that selection:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码执行了这个选择：
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After finding these successful startup board members, we build a list of these
    successful startup companies (`@@comp_set`). We also have each such `**Company**`
    record its key board member (`c@board_set`), and we tally the successful exits
    of each key person (`p.@amount += 1`). Finally, we take the most prolific board
    members (`ORDER BY` and `LIMIT`):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 找到这些成功初创企业董事会成员后，我们建立了这些成功初创企业的列表（`@@comp_set`）。我们还记录每个这样的 `**Company**` 记录其关键董事成员
    (`c@board_set`)，并统计每个关键人物的成功退出次数 (`p.@amount += 1`)。最后，我们取最多产的董事成员（通过 `ORDER BY`
    和 `LIMIT`）：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then we find all pre-exit `**Company**` entities that have a `top_board_member`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们找到所有具有 `**Company**` 实体且具有 `top_board_member` 的前退出公司：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we include only those pre-exit companies whose `**Funding_Rounds**`
    have been early enough to satisfy the `max_cutoff_round` limit:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们仅包括那些 `**Funding_Rounds**` 早期足够满足 `max_cutoff_round` 限制的前退出公司：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The remainder of the query is used to trace back from the top board members
    to display the companies they worked for and their successful exits.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 查询的其余部分用于从顶级董事成员追溯显示他们工作过的公司及其成功退出情况。
- en: '[Figure 4-8](#graph_output_for_top_startups_based_on) shows the results when
    we set `k_orgs` = 10, `num_persons` = 2, `max_funding_round` = b, and `past_n_years`
    = 10\. The two key board members are Jim Goetz and Jim Breyer, who both work for
    Accel Partners. Goetz has had four successful exits, while Breyer has had three.
    The recommended startups are companies linked to Goetz or Breyer that don’t yet
    have an exit: Nimble Storage, Ruckus Wireless, HubSpot, Booyah, and Etsy.^([4](ch04.html#id591))'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-8](#graph_output_for_top_startups_based_on) 展示了当我们设置 `k_orgs` = 10, `num_persons`
    = 2, `max_funding_round` = b，并且 `past_n_years` = 10 时的结果。两位关键董事成员分别是吉姆·戈茨和吉姆·布雷尔，他们都在
    Accel Partners 工作。戈茨有四次成功退出，而布雷尔有三次。推荐的初创企业是与戈茨或布雷尔相关联但尚未退出的公司：Nimble Storage、Ruckus
    Wireless、HubSpot、Booyah 和 Etsy。^([4](ch04.html#id591))'
- en: '![Graph output for top startups based on board members](assets/gpam_0408.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![基于董事会成员的顶级初创企业图输出](assets/gpam_0408.png)'
- en: Figure 4-8\. Graph output for top startups based on board members (see a larger
    version of this figure at [https://oreil.ly/gpam0408](https://oreil.ly/gpam0408))
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-8\. 基于董事会成员的顶级初创企业图输出（请在 [https://oreil.ly/gpam0408](https://oreil.ly/gpam0408)
    查看此图的更大版本）
- en: Top startups based on leader
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于领导者的顶级初创企业
- en: Our last query in this starter kit is similar to the previous one, except that
    rather than looking for top board members, we are looking for founders. This query
    takes three arguments. `max_funding_round` is the funding round cutoff, meaning
    that we only select startups whose investment rounds have been no later than `max_funding_round`.
    Argument `return_size` is the number of top startups we want to retrieve from
    our query, and `sector` is the industry sector we want to filter out the result.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个入门套件中的最后一个查询与前一个类似，只是不是寻找顶级董事会成员，而是寻找创始人。此查询包含三个参数。`max_funding_round` 是资金轮次截止时间，意味着我们只选择其投资轮次早于
    `max_funding_round` 的初创企业。`return_size` 是我们要从查询中检索的顶级初创企业的数量，`sector` 是我们要筛选结果的行业领域。
- en: '[Figure 4-9](#graph_traversal_pattern_to_find_promisi) illustrates how we construct
    this query as a series of graph hops:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-9](#graph_traversal_pattern_to_find_promisi) 说明了我们如何将此查询构建为一系列图遍历操作：'
- en: Find all companies that have IPOed or been acquired [Hop 1].
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到所有已经上市或被收购的公司 [Hop 1]。
- en: Find employees who contributed to the companies in step 1 [Hop 2].
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到在第1步 [Hop 2] 中对这些公司做出贡献的员工。
- en: Find startups whose founder also was a key employee from step 2 [Hop 3]. Filter
    the startups based on the cutoff round and sector.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到创始人也是第2步 [Hop 3] 中关键员工的初创企业。根据截止轮次和行业领域筛选初创企业。
- en: Find companies whose founders have the most successful connections.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到创始人具有最成功连接的公司。
- en: '![Graph traversal pattern to find promising startups based on successful founders](assets/gpam_0409.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![基于成功创始人查找有潜力的初创企业的图遍历模式](assets/gpam_0409.png)'
- en: Figure 4-9\. Graph traversal pattern to find promising startups based on successful
    founders
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-9\. 根据成功创始人查找有潜力的初创企业的图遍历模式
- en: 'This query introduces some data structures that we haven’t seen before: a `TUPIL`
    and a `HeapAccum`. A GSQL tuple is a user-defined data type composed of a set
    of basic existing types. A `Company_Score` tuple consists of a `**Company**` vertex
    followed by an integer. A `HeapAccum` manages a sorted list of tuples up to a
    user-specified maximum number of items. Our `HeapAccum` `@@top_companies_heap`
    holds `Company_Score` tuples sorted by their score values. The heap can contain
    up to `return_size` companies:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询介绍了一些我们以前没有见过的数据结构：`TUPIL`和`HeapAccum`。GSQL元组是由一组基本现有类型组成的用户定义数据类型。`Company_Score`元组由一个**`Company`**顶点和一个整数组成。`HeapAccum`管理一个按照其分数值排序的元组列表，最多可以包含`return_size`个公司：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We also define two nested `MapAccums`. A map is like a lookup table. Looking
    at the structural definition of `@@person_company_leave_date_map`, this means
    that for a given person, we record when that person left a given company. For
    `@@person_company_employment_map`, we record the employment relationship between
    a **`Person`** and a **`Company`**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了两个嵌套的`MapAccums`。映射就像是一个查找表。查看`@@person_company_leave_date_map`的结构定义，这意味着对于给定的人员，我们记录了该人员何时离开了给定的公司。对于`@@person_company_employment_map`，我们记录了`Person`和`Company`之间的就业关系：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we find all the companies with an IPO or that have been acquired by another
    company. For clearer code, one code block finds IPO companies, another focuses
    on acquisitions, and then we merge the two sets of companies. For the IPOs, we
    traverse from `**IPO**` vertices to `**Company**` vertices. We check that the
    IPO has a valid `public_at` attribute. Once selected, we tag each `**Company**`
    with the path back to the `**IPO**` vertex and with the `public_at` date. We tag
    the company as no longer in the startup phase:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们找出所有进行了IPO或被其他公司收购的公司。为了更清晰的代码，一个代码块找到了IPO公司，另一个专注于收购，然后我们合并这两组公司。对于IPO，我们从**`IPO`**顶点遍历到**`Company`**顶点。我们检查IPO是否具有有效的`public_at`属性。一旦选择，我们将每个**`Company`**与回到**`IPO`**顶点的路径以及`public_at`日期标记起来。我们将该公司标记为不再处于创业阶段：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A similar code block finds the `acquired_companies`. The edge type is different
    (**`acquire`** instead of **`company_ipo`**), and the effective data attribute
    is different (`acquired_at` instead of `public_at`).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的代码块找到了`acquired_companies`。边的类型不同（**`acquire`**而不是**`company_ipo`**），有效数据属性也不同（`acquired_at`而不是`public_at`）。
- en: 'We then join the output sets from these two blocks:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将这两个块的输出集合合并：
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next we select all the persons who have worked for a successfully exited company
    before the exit event. For each such person, we store their relevant information
    into the nested maps that we described earlier. Notice the `->` operator used
    to specify a map’s `key -> value` pair:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们选择所有曾在成功退出公司工作过的人员。对于每个这样的人员，我们将他们的相关信息存储到前面描述的嵌套映射中。注意使用`->`运算符指定映射的`key
    -> value`对：
- en: '[PRE23]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we find the startups where these successful-exit employees are currently
    a founder, filtered by industry. The checks for the startup status and founder
    status are performed in the `WHERE` clause:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们找出那些成功退出员工目前是创始人的初创公司，按行业进行筛选。在`WHERE`子句中执行初创公司状态和创始人状态的检查：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After selecting these startups, we tally the founders’ past successes:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择这些初创公司之后，我们统计了创始人的过去成功经历：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Select companies where the founders have the most relationships with successfully
    exited companies. We use the `HeapAccum` we described previously to rank the companies
    based on the tally of successful exits of its founder(s):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 选择那些创始人与成功退出公司具有最多关系的公司。我们使用之前描述的`HeapAccum`来根据创始人成功退出的次数对公司进行排名：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[Figure 4-10](#graph_output_of_top_startups_based_on_l) shows the results when
    the input arguments are `max_funding_round` = c, `return_size` = 5, and `sector`
    = software. The five selected startups are listed on the right. Looking at the
    second company from the top, we read from right to left: Packet Trap Networks
    is selected because founder Steve Goodman was a Founder/CEO of Lasso Logic, which
    was acquired by SonicWALL.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-10](#graph_output_of_top_startups_based_on_l)显示了当输入参数为`max_funding_round`
    = c，`return_size` = 5，`sector` = software时的结果。右侧列出了五个选定的初创公司。查看顶部第二家公司时，我们从右向左阅读：Packet
    Trap Networks之所以被选中，是因为创始人Steve Goodman曾是Lasso Logic的创始人/CEO，后者被SonicWALL收购。'
- en: '![Graph output of top startups based on leader](assets/gpam_0410.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![基于领导者的顶级创业公司图表输出](assets/gpam_0410.png)'
- en: Figure 4-10\. Graph output of top startups based on leader (see a larger version
    of this figure at [https://oreil.ly/gpam0410](https://oreil.ly/gpam0410))
  id: totrans-169
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-10\. 基于领导者的顶级初创企业的图表输出（请查看此图的更大版本：[https://oreil.ly/gpam0410](https://oreil.ly/gpam0410)）
- en: Chapter Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节总结
- en: In this chapter, we have seen how we can use graph analytics to answer important
    questions and gain valuable insight about startup investments. Looking at the
    graph schema for Crunchbase data, we’ve seen that such data is highly interconnected.
    In the case of investment advice, we often look to past performance as an indicator
    of possible future results. So we look for one pattern (success in the past) and
    see if there is potential for a repeat of that pattern. This type of pattern search
    or similarity search is typical of graph analytics.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到如何利用图分析来回答重要问题，并获得关于初创企业投资的宝贵见解。查看Crunchbase数据的图模式，我们发现这些数据高度互连。在投资建议的情况下，我们经常将过去的表现作为可能未来结果的指标。因此，我们寻找一种模式（过去的成功）并看看是否存在重复这种模式的潜力。这种类型的模式搜索或相似性搜索是图分析的典型应用。
- en: We have discussed four queries in this chapter to identify those patterns that
    can help us investigate investment opportunities. The first query identifies all
    persons with key roles within a company. The second query identifies successful
    startup exits from an investor. The third query shows us a ranking of startups
    with successful board members. The fourth query shows us a ranking of startups
    with successful founders. Each query demonstrated how multihops are utilized to
    benefit our analyses.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章讨论了四个查询，以识别可以帮助我们调查投资机会的模式。第一个查询识别出在公司内担任关键角色的所有人员。第二个查询标识了投资者成功退出的成功初创企业。第三个查询显示了拥有成功董事会成员的初创企业的排名。第四个查询显示了拥有成功创始人的初创企业的排名。每个查询都展示了如何利用多跳来增强我们的分析。
- en: 'This chapter demonstrated several GSQL language features and techniques, such
    as:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 本章演示了几个GSQL语言的特性和技术，例如：
- en: Using a `WHILE` loop to search multiple levels deep
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`WHILE`循环深入搜索多个级别
- en: Tagging vertices with a Boolean accumulator to mark that it has been visited
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用布尔累加器标记访问过的顶点
- en: During multistep traversal, tagging vertices with a `parent_vertex` and a `parent_edge`
    to serve as breadcrumbs, so we can recover our paths later
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多步遍历期间，使用`parent_vertex`和`parent_edge`标记顶点作为面包屑，以便稍后恢复路径
- en: Using the `ORDER BY` and `LIMIT` clauses in a `SELECT` block to find the top-ranked
    vertices, similar to selecting the top-ranked records in SQL
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`SELECT`块中使用`ORDER BY`和`LIMIT`子句来查找排名靠前的顶点，类似于在SQL中选择排名靠前的记录
- en: ^([1](ch04.html#ch01fn7-marker)) Alex Wilhelm, “In 2020, VCs Invested $428M
    into US-Based Startups Every Day,” TechCrunch, January 19, 2021, [*https://techcrunch.com/2021/01/19/in-2020-vcs-invested-428m-into-us-based-startups-every-day*](https://techcrunch.com/2021/01/19/in-2020-vcs-invested-428m-into-us-based-startups-every-day).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.html#ch01fn7-marker)) Alex Wilhelm，“在2020年，风险投资公司每天向总部位于美国的初创企业投资4.28亿美元”，TechCrunch，2021年1月19日，[*https://techcrunch.com/2021/01/19/in-2020-vcs-invested-428m-into-us-based-startups-every-day*](https://techcrunch.com/2021/01/19/in-2020-vcs-invested-428m-into-us-based-startups-every-day)。
- en: ^([2](ch04.html#ch01fn8-marker)) Sandeep Babu, “STARTUP STATISTICS—The Numbers
    You Need to Know,” Small Business Trends, March 28, 2023, [*https://smallbiztrends.com/2022/12/startup-statistics.html*](https://smallbiztrends.com/2022/12/startup-statistics.html).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch04.html#ch01fn8-marker)) Sandeep Babu，“初创企业统计数据——您需要了解的数字”，Small Business
    Trends，2023年3月28日，[*https://smallbiztrends.com/2022/12/startup-statistics.html*](https://smallbiztrends.com/2022/12/startup-statistics.html)。
- en: ^([3](ch04.html#ch01fn9-marker)) Accumulators were described in [Chapter 3](ch03.html#see_your_customers_and_business_better).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch04.html#ch01fn9-marker)) 累加器在[第3章](ch03.html#see_your_customers_and_business_better)中有描述。
- en: ^([4](ch04.html#id591-marker)) We are analyzing Crunchbase’s 2013 data. A few
    of these startups did succeed; others did not.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch04.html#id591-marker)) 我们正在分析Crunchbase的2013年数据。其中一些初创企业取得了成功，而其他一些则没有。
