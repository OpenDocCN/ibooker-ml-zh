- en: Chapter 8\. Connected Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章\. 连接模式
- en: We set out to create a catalog of machine learning design patterns, solutions
    to recurring problems when designing, training, and deploying machine learning
    models and pipelines. In this chapter, we provide a quick reference to this inventory
    of patterns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们致力于创建一个机器学习设计模式的目录，用于解决在设计、训练和部署机器学习模型和管道时经常遇到的问题。在本章中，我们提供了对这些模式清单的快速参考。
- en: We organized the patterns in the book in terms of where they would be used in
    a typical ML workflow. Thus, we had a chapter on input representation and another
    on model selection. We then discussed patterns that modify the typical training
    loop and make inference more resilient. We ended with patterns that promote a
    responsible use of ML systems. This is akin to organizing a recipe book with separate
    sections on appetizers, soups, entrees, and desserts. Such an organization, however,
    can make it hard to determine when to choose which soup and what desserts go well
    with some entree. Therefore, in this chapter, we also draw out how the patterns
    are related to one another. Finally, we also put together “meal plans” by discussing
    how the patterns interact for common categories of ML tasks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照它们在典型ML工作流中的使用位置组织了这本书中的模式。因此，我们有一个关于输入表示的章节，另一个关于模型选择。然后，我们讨论了修改典型训练循环并使推断更具韧性的模式。最后，我们讨论了促进ML系统负责使用的模式。这类似于在食谱书中分别设置关于开胃菜、汤、主菜和甜点的部分。然而，这样的组织方式可能会使人难以确定何时选择哪种汤以及哪种甜点适合某些主菜。因此，在本章中，我们还阐明了模式之间的关系。最后，我们还通过讨论模式如何相互作用来制定“餐谱”，以解决常见ML任务类别的问题。
- en: Patterns Reference
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式参考
- en: We’ve discussed a lot of different design patterns and how they can be used
    to address common challenges that arise in machine learning. Here is a summary.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了许多不同的设计模式以及它们如何用于解决机器学习中常见的挑战。以下是总结。
- en: '| Chapter | Design pattern | Problem solved | Solution |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 章节 | 设计模式 | 解决的问题 | 解决方案 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Data Representation | Hashed Feature | Problems associated with categorical
    features such as incomplete vocabulary, model size due to cardinality, and cold
    start. | Bucket a deterministic and portable hash of string representation and
    accept the trade-off of collisions in the data representation. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 数据表示 | 散列特征 | 与分类特征相关的问题，如词汇不完整、模型大小由基数导致、以及冷启动。 | 对字符串表示的确定性和可移植哈希进行分桶，并接受数据表示中碰撞的权衡。
    |'
- en: '| Embeddings | High-cardinality features where closeness relationships are
    important to preserve. | Learn a data representation that maps high-cardinality
    data into a lower-dimensional space in such a way that the information relevant
    to the learning problem is preserved. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 嵌入 | 高基数特征，其中保留接近关系很重要。 | 学习一种数据表示，将高基数数据映射到低维空间，以保留与学习问题相关的信息。 |'
- en: '| Feature Cross | Model complexity insufficient to learn feature relationships.
    | Help models learn relationships between inputs faster by explicitly making each
    combination of input values a separate feature. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 特征交叉 | 模型复杂度不足以学习特征之间的关系。 | 通过明确将每个输入值组合作为单独的特征，帮助模型更快地学习输入之间的关系。 |'
- en: '| Multimodal Input | How to choose between several potential data representations.
    | Concatenate all the available data representations. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 多模态输入 | 如何在几种潜在的数据表示之间进行选择。 | 连接所有可用的数据表示。 |'
- en: '| Problem Representation | Reframing | Several problems including confidence
    for numerical prediction, ordinal categories, restricting prediction range, and
    multitask learning. | Change the representation of the output of a machine learning
    problem; for example, representing a regression problem as a classification (and
    vice versa). |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 问题表示 | 重新构建 | 包括数值预测的置信度、序数类别、限制预测范围以及多任务学习等多个问题。 | 改变机器学习问题输出的表示方式；例如，将回归问题表示为分类问题（反之亦然）。
    |'
- en: '| Multilabel | More than one label applies to a given training example. | Encode
    the label using a multi-hot array, and use *k* sigmoids as the output layer. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 多标签 | 一个给定训练示例适用于多个标签。 | 使用多热编码数组对标签进行编码，并将*k*个sigmoid函数用作输出层。 |'
- en: '| Ensembles | Bias–variance trade-off on small- and medium-scale problems.
    | Combine multiple machine learning models and aggregate their results to make
    predictions. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 集成 | 在小到中等规模问题上的偏差-方差权衡。 | 结合多个机器学习模型并聚合它们的结果以进行预测。 |'
- en: '| Cascade | Maintainability or drift issues when a machine learning problem
    is broken into a series of ML problems. | Treat an ML system as a unified workflow
    for the purposes of training, evaluation, and prediction. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 级联 | 当机器学习问题被分解为一系列机器学习问题时，可维护性或漂移问题。 | 将机器学习系统视为用于训练、评估和预测的统一工作流程。 |'
- en: '| Neutral Class | The class label for some subset of examples is essentially
    arbitrary. | Introduce an additional label for a classification model, disjoint
    from the current labels. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 中性类 | 某些示例子集的类标签本质上是任意的。 | 为分类模型引入额外的标签，与当前标签不相交。 |'
- en: '| Rebalancing | Heavily imbalanced data. | Downsample, upsample, or use a weighted
    loss function depending on different considerations. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 重平衡 | 数据严重不平衡。 | 根据不同考虑因素进行下采样、过采样或使用加权损失函数。 |'
- en: '| Patterns That Modify Model Training | Useful Overfitting | Using machine
    learning methods to learn a physics-based model or dynamical system. | Forgo the
    usual generalization techniques in order to intentionally overfit on the training
    dataset. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 修改模型训练的模式 | 有用的过拟合 | 使用机器学习方法学习基于物理的模型或动态系统。 | 放弃通常的泛化技术，故意在训练数据集上过拟合。 |'
- en: '| Checkpoints | Lost progress during long-running training jobs due to machine
    failure. | Store the full state of the model periodically, so that partially trained
    models are available and can be used to resume training from an intermediate point,
    instead of starting from scratch. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 检查点 | 由于机器故障导致长时间运行的训练作业丢失进度。 | 定期存储模型的完整状态，以便可以使用部分训练的模型来恢复训练，而不是从头开始。 |'
- en: '| Transfer Learning | Lack of large datasets that are needed to train complex
    machine learning models. | Take part of a previously trained model, freeze the
    weights, and use these nontrainable layers in a new model that solves a similar
    problem. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 迁移学习 | 缺乏训练复杂机器学习模型所需的大型数据集。 | 取出先前训练模型的一部分，冻结权重，并在新模型中使用这些不可训练层解决类似问题。 |'
- en: '| Distribution Strategy | Training large neural networks can take a very long
    time, which slows experimentation. | Carry the training loop out at scale over
    multiple workers, taking advantage of caching, hardware acceleration, and parallelization.
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 分布策略 | 训练大型神经网络可能需要很长时间，这会减慢实验速度。 | 在多个工作节点上以规模执行训练循环，利用缓存、硬件加速和并行化。 |'
- en: '| Hyperparameter Tuning | How to determine the optimal hyperparameters of a
    machine learning model. | Insert the training loop into an optimization method
    to find the optimal set of model hyperparameters. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 超参数调整 | 如何确定机器学习模型的最佳超参数。 | 将训练循环插入优化方法中，以找到最佳的模型超参数集。 |'
- en: '| Resilience | Stateless Serving Function | Production ML system must be able
    to synchronously handle thousands to millions of prediction requests per second.
    | Export the machine learning model as a stateless function so that it can be
    shared by multiple clients in a scalable way. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 弹性 | 无状态服务函数 | 生产机器学习系统必须能够同步处理每秒数千到数百万个预测请求。 | 将机器学习模型导出为无状态函数，以便可以以可扩展的方式由多个客户端共享。
    |'
- en: '| Batch Serving | Carrying out model predictions over large volumes of data
    using an endpoint that is designed to handle requests one at a time will overwhelm
    the model. | Use software infrastructure commonly used for distributed data processing
    to carry out inference asynchronously on a large number of instances at once.
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 批量服务 | 使用设计用于逐个处理请求的端点对大量数据进行模型预测会压垮模型。 | 使用常用于分布式数据处理的软件基础设施，在大量实例上异步执行推理。
    |'
- en: '| Continued Model Evaluation | Model performance of deployed models degrades
    over time either due to data drift, concept drift or other changes to the pipelines
    which feed data to the model. | Detect when a deployed model is no longer fit-for-purpose
    by continually monitoring model predictions and evaluating model performance.
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 持续模型评估 | 部署模型的性能随时间逐渐下降，原因可能是数据漂移、概念漂移或其他影响向模型提供数据的管道的变化。 | 通过持续监控模型预测和评估模型性能来检测部署模型何时不再适合用途。
    |'
- en: '| Two-Phase Predictions | Large, complex models must be kept performant when
    they are deployed at the edge or on distributed devices. | Split the use case
    into two phases with only the simpler phase being carried out on the edge. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 两阶段预测 | 在边缘或分布式设备上部署大型复杂模型时必须保持性能。 | 将用例分成两个阶段，仅在边缘执行更简单的阶段。 |'
- en: '| Keyed Predictions | How to map the model predictions that are returned to
    the corresponding model input when submitting large prediction jobs. | Allow the
    model to pass through a client-supported key during prediction that can be used
    to join model inputs to model predictions. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 键控预测 | 如何映射返回的模型预测到相应的模型输入，当提交大规模预测作业时。 | 允许模型在预测过程中传递一个客户端支持的关键字，该关键字可用于将模型输入与模型预测结果连接起来。
    |'
- en: '| Reproducibility | Transform | The inputs to a model must be transformed to
    create the features the model expects and that process must be consistent between
    training and serving. | Explicitly capture and store the transformations applied
    to convert the model inputs into features. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 可重现性 | 转换 | 必须将输入数据转换为模型期望的特征，并且该过程在训练和服务过程中必须保持一致。 | 明确捕获并存储应用的转换步骤，将模型输入转换为特征。
    |'
- en: '| Repeatable Splitting | When creating data splits, it’s important to have
    a method that is lightweight and repeatable regardless of the programming language
    or random seeds. | Identify a column that captures the correlation relationship
    between rows and use the Farm Fingerprint hashing algorithm to split the available
    data into training, validation, and testing datasets. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 可重复切分 | 在创建数据切分时，重要的是拥有一种轻量级且可重复的方法，无论编程语言或随机种子如何。 | 确定一个捕获行之间相关关系的列，并使用Farm
    Fingerprint哈希算法将可用数据拆分为训练、验证和测试数据集。 |'
- en: '| Bridged Schema | As new data becomes available, any changes to the data schema
    could prevent using both the new and old data for retraining. | Adapt the data
    from its older, original data schema to match the schema of the newer, better
    data. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 桥接模式 | 随着新数据的出现，任何数据架构的更改都可能阻止同时使用新旧数据进行重新训练。 | 适应数据从其旧的原始数据架构转换为与新数据的架构匹配。
    |'
- en: '| Windowed Inference | Some models require an ongoing sequence of instances
    to run inference, or features must be aggregated across a time window in such
    a way that avoids training–serving skew. | Externalize the model state and invoke
    the model from a stream analytics pipeline to ensure that features calculated
    in a dynamic, time-dependent way can be correctly repeated between training and
    serving. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 窗口推断 | 一些模型需要持续序列的实例来运行推断，或者必须对时间窗口内的特征进行聚合，以避免训练与服务之间的偏差。 | 将模型状态外部化，并从流分析管道调用模型，以确保以动态、时间依赖的方式计算的特征能够在训练和服务之间正确重复。
    |'
- en: '| Workflow Pipeline | When scaling the ML workflow, run trials independently
    and track performance for each step of the pipeline. | Make each step of the ML
    workflow a separate, containerized service that can be chained together to make
    a pipeline that can be run with a single REST API call |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 工作流水线 | 在扩展机器学习工作流时，独立运行试验，并跟踪管道每一步的性能。 | 将机器学习工作流的每个步骤作为一个单独的容器化服务，可以将它们链接在一起，以便通过单个REST
    API调用运行管道。 |'
- en: '| Feature Store | The ad hoc approach to feature engineering slows model development
    and leads to duplicated effort between teams as well as work stream inefficiency.
    | Create a feature store, a centralized location to store and document feature
    datasets that will be used in building machine learning models and can be shared
    across projects and teams. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 特征存储 | 非专用的特征工程方法减慢了模型开发，并导致团队之间的工作重复，以及工作流效率低下。 | 创建一个特征存储库，用于存储和记录特征数据集的集中位置，这些特征数据集将用于构建机器学习模型，并可跨项目和团队共享。
    |'
- en: '| Model Versioning | It is difficult to carry out performance monitoring and
    split test model changes while having a single model in production or to update
    models without breaking existing users. | Deploy a changed model as a microservice
    with a different REST endpoint to achieve backward compatibility for deployed
    models. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 模型版本控制 | 在生产环境中仅有一个模型时，进行性能监控和拆分测试模型更改非常困难，或者在不影响现有用户的情况下更新模型。 | 部署一个更改后的模型作为一个微服务，并使用不同的REST端点，以实现对已部署模型的向后兼容性。
    |'
- en: '| Responsible AI | Heuristic Benchmark | Explaining model performance using
    complicated evaluation metrics does not provide the intuition that business decision
    makers need. | Compare an ML model against a simple, easy-to-understand heuristic.
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 负责任的AI | 启发式基准 | 使用复杂的评估指标解释模型性能不能提供业务决策者所需的直观感受。 | 将机器学习模型与简单易懂的启发式方法进行比较。
    |'
- en: '| Explainable Predictions | Sometimes it is necessary to know why a model makes
    certain predictions either for debugging or for regulatory and compliance standards.
    | Apply model explainability techniques to understand how and why models make
    predictions and improve user trust in ML systems. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 可解释预测 | 有时需要知道模型为何做出某些预测，无论是用于调试还是遵守监管和合规标准。 | 应用模型可解释性技术来理解模型为何如何进行预测，并提升用户对ML系统的信任。
    |'
- en: '| Fairness Lens | Bias can cause machine learning models to not treat all users
    equally and can have adverse effects on some populations. | Use tools to identify
    bias in datasets before training and evaluate trained models through a fairness
    lens to ensure model predictions are equitable across different groups of users
    and different scenarios. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 公平性镜头 | 偏见可能导致机器学习模型对所有用户不公平对待，并对某些人群产生不利影响。 | 使用工具在训练前识别数据集中的偏见，并通过公平性镜头评估训练后的模型，确保模型预测在不同用户群体和不同场景中是公平的。
    |'
- en: Pattern Interactions
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式互动
- en: Design patterns don’t exist in isolation. Many of them are closely related to
    one another either directly or indirectly and often complement one another. The
    interaction diagram in [Figure 8-1](#many_of_the_patterns_discussed_in_this) summarizes
    the interdependencies and some relationships between different design patterns.
    If you find yourself using a pattern, you might benefit from thinking how you
    could incorporate other patterns that are related to it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式并不孤立存在。许多设计模式要么直接要么间接地彼此紧密相关，并且通常互为补充。[图 8-1](#many_of_the_patterns_discussed_in_this)中的互动图表总结了不同设计模式之间的相互依赖和某些关系。如果你发现自己在使用某个模式，你可能会受益于考虑如何将其他与之相关的模式整合进来。
- en: 'Here, we’ll highlight some of the ways in which these patterns are related
    and how they can be used together when developing a full solution. For example,
    when working with categorical features, the Hashed Feature design pattern may
    be combined with the Embeddings design pattern. These two patterns work together
    to address high-cardinality model inputs, such as working with text. In TensorFlow,
    this is demonstrated by wrapping a `categorical_column_with_hash_bucket` feature
    column with an `embedding` feature column to convert the sparse, categorical text
    input to a dense representation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将突出一些模式之间的关系以及在开发完整解决方案时它们如何结合使用。例如，在处理分类特征时，可以将散列特征设计模式与嵌入设计模式结合使用。这两种模式共同处理高基数模型输入，例如处理文本。在TensorFlow中，通过将`categorical_column_with_hash_bucket`特征列包装在`embedding`特征列中，将稀疏的分类文本输入转换为密集表示来演示这一点：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We saw when discussing Embeddings that this technique is recommended when using
    the Feature Cross design pattern. Hashed Features go hand in hand with the Repeatable
    Splitting design pattern since the Farm Fingerprint hashing algorithm can be used
    for data splitting. And, when using the Hashed Features or Embeddings design pattern,
    it’s common to turn to concepts within Hyperparameter Tuning to determine the
    optimal number of hash buckets or the right embedding dimension to use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当讨论嵌入时，我们发现在使用特征交叉设计模式时推荐使用这一技术。散列特征与可重复分割设计模式紧密相关，因为Farm Fingerprint散列算法可用于数据分割。而在使用散列特征或嵌入设计模式时，通常会考虑到超参数调整的概念，以确定使用的最佳散列桶数或正确的嵌入维度。
- en: '![Many of the patterns discussed in this book are related or can be used together.
    This image is available in the GitHub repository for this book.](Images/mldp_0810.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![本书讨论的许多模式都相关或可以一起使用。此图像在本书的GitHub存储库中可用。](Images/mldp_0810.png)'
- en: Figure 8-1\. Many of the patterns discussed in this book are related or can
    be used together. This image is available in the [GitHub repository](https://github.com/GoogleCloudPlatform/ml-design-patterns)
    for this book.
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-1\. 本书讨论的许多模式都相关或可以一起使用。此图像在[GitHub存储库](https://github.com/GoogleCloudPlatform/ml-design-patterns)中可用。
- en: In fact, the Hyperparameter Tuning design is a common part of the machine learning
    workflow and is often used in conjunction with other patterns. For example, we
    might use hyperparameter tuning to determine the number of older examples to use
    if we’re implementing the Bridged Schema pattern. And, when using hyperparameter
    tuning, it’s important to keep in mind how we’ve set up model Checkpoints using
    virtual epochs and Distributed Training. Meanwhile, the Checkpoints design pattern
    naturally connects to Transfer Learningsince earlier model checkpoints are often
    used during fine-tuning.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，超参数调优设计是机器学习工作流程的常见部分，并经常与其他模式结合使用。例如，我们可以使用超参数调优来确定在实施桥接模式（Bridged Schema
    pattern）时要使用的旧示例数量。而在使用超参数调优时，重要的是要记住我们如何设置模型检查点（Checkpoints）使用虚拟时代和分布式训练。与此同时，检查点设计模式自然地与迁移学习联系在一起，因为在微调过程中通常使用较早的模型检查点。
- en: Embeddings show up throughout machine learning, so there are many ways in which
    the Embeddingsdesign pattern interacts with other patterns. Perhaps the most notable
    is Transfer Learningsince the output generated from the intermediate layers of
    a pre-trained model are essentially learned feature embeddings. We also saw how
    incorporating the Neutral Class design pattern in a classification model, either
    naturally or through the Reframing pattern, can improve those learned embeddings.
    Further downstream, if those embeddings are used as features for a model, it could
    be advantageous to save them using the Feature Store pattern so they can be easily
    accessed and versioned. Or, in the case of Transfer Learning, the pre-trained
    model output could be viewed as the initial output of a Cascade pattern.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入（Embeddings）在整个机器学习中广泛应用，因此嵌入设计模式与其他模式的交互方式多种多样。也许最显著的是迁移学习（Transfer Learning），因为从预训练模型的中间层生成的输出实质上就是学习到的特征嵌入。我们还看到，通过在分类模型中自然地或通过重构模式（Reframing
    pattern）将中性类设计模式（Neutral Class design pattern）整合进去，可以改善这些学习到的嵌入。进一步地，如果这些嵌入被用作模型的特征，使用特征存储模式（Feature
    Store pattern）将它们保存下来以便轻松访问和版本管理可能会很有优势。或者，在迁移学习的情况下，预训练模型输出可以被视为级联模式的初始输出。
- en: 'We also saw how the Rebalancing pattern could be approached by combining two
    other design patterns: Reframing and Cascade. Reframing would allow us to represent
    the imbalanced dataset as a classification of either “normal” or “outlier.” The
    output of that model would then be passed to a secondary regression model, which
    is optimized for prediction on either data distribution. These patterns will likely
    also lead to the Explainable Predictions pattern, since when dealing with imbalanced
    data, it is especially important to verify that the model is picking up on the
    right signals for prediction. In fact, it’s encouraged to consider the Explainable
    Predictions pattern when building a solution involving a cascade of multiple models,
    since this can limit model explainability. This trade-off of model explainability
    shows up again with the Ensemble and Multimodel Input patterns since these techniques
    also don’t lend themselves well to some explainability methods.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到如何通过将两种其他设计模式结合起来——重构模式（Reframing）和级联模式（Cascade），来处理再平衡设计模式（Rebalancing
    pattern）。重构模式将允许我们将不平衡的数据集表示为“正常”或“异常”的分类。该模型的输出然后将传递给一个次要的回归模型，该模型针对任一数据分布进行优化预测。这些模式很可能还会导致可解释预测设计模式（Explainable
    Predictions pattern），因为在处理不平衡数据时，验证模型是否捕捉到了正确的预测信号尤为重要。事实上，当构建涉及多个模型级联的解决方案时，鼓励考虑可解释预测设计模式，因为这可以限制模型的可解释性。模型可解释性的这种权衡再次出现在集成模型和多模型输入模式中，因为这些技术也不太适合某些可解释性方法。
- en: The Cascade design pattern might also be helpful when using the Bridged Schema
    pattern and could be used as an alternative pattern by having a preliminary model
    that imputes missing values of the secondary schema. These two patterns might
    then be combined to save the resulting feature set for later use as described
    in the Feature Store pattern. This is another example which highlights the versatility
    of the Feature Store pattern and how it is often combined with other design patterns.
    For example, a feature store provides a convenient way to maintain and utilize
    streaming model features that may arise through the Windowed Inference pattern.
    Feature stores also work hand in hand with managing different datasets that might
    arise in the Reframing pattern, and provide a reusable version of the techniques
    that arise when using the Transform pattern. The feature versioning capability
    as discussed in the Feature Store pattern also plays a role with the Model Versioningdesign
    pattern.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用桥接模式时，级联设计模式可能也会有所帮助，并且可以作为一个替代模式，通过具有初步模型的方式来填补辅助架构的缺失值。然后可以将这两种模式结合起来，以保存后续在特征存储模式中描述的特征集。这是另一个突显特征存储模式多功能性的例子，以及它如何经常与其他设计模式结合使用。例如，特征存储提供了一种方便的方式来维护和利用通过窗口推理模式产生的流模型特征。特征存储还与管理在重新框架模式中可能出现的不同数据集紧密配合，并提供了在使用转换模式时出现的可重复使用的技术版本。正如在特征存储模式中讨论的特征版本控制能力，也在模型版本设计模式中发挥作用。
- en: The Model Versioning pattern, on the other hand, is closely related to the Stateless
    Serving Function and Continued Model Evaluation patterns. In Continued Model Evaluation,
    different model versions may be used when assessing how a model’s performance
    has degraded over time. Similarly, the different model signatures of the serving
    function provide an easy means of creating different model versions. This approach
    to model versioning via the Stateless Serving Function pattern can be connected
    back to the Reframing pattern where two different model versions could provide
    their own REST API endpoints for the two different model output representations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，模型版本设计模式与无状态服务函数和持续模型评估模式密切相关。在持续模型评估中，可以在评估模型性能随时间而变差时使用不同的模型版本。同样，服务函数的不同模型签名提供了创建不同模型版本的简便方式。通过无状态服务函数模式进行模型版本管理的这种方法可以追溯到重新框架模式，其中两个不同的模型版本可以为两种不同的模型输出表示提供它们自己的REST
    API端点。
- en: We also discussed how, when using the Continued Model Evaluation pattern, it’s
    often advantageous to explore solutions presented in the Workflow Pipeline pattern
    as well, both to set up triggers that will initiate the retraining pipeline as
    well as maintain lineage tracking for various model versions that are created.
    Continued Model Evaluation is also closely connected to the Keyed Predictions
    pattern since this can provide a mechanism for easily joining ground truth to
    the model prediction outputs. In the same way, the Keyed Predictions pattern is
    also intertwined with the Batch Serving pattern. By the same token, the Batch
    Serving pattern is often used in conjunction with the Stateless Serving Function
    pattern to carry out prediction jobs at scale which, in turn, relies on the Transform
    pattern under the hood to maintain consistency between training and serving.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用持续模型评估模式时，探索工作流管道模式中呈现的解决方案通常是有利的，这样可以设置触发器来启动重新训练管道，并且保持对创建的各种模型版本的血统跟踪。持续模型评估还与键控预测模式密切相关，因为这可以为将真实数据与模型预测输出轻松结合提供机制。同样，键控预测模式也与批量服务模式紧密相连。同理，批量服务模式通常与无状态服务函数模式结合使用，以执行规模化的预测任务，而这又依赖于底层的转换模式来保持训练与服务之间的一致性。
- en: Patterns Within ML Projects
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在机器学习项目中的模式
- en: Machine learning systems enable teams within an organization to build, deploy,
    and maintain machine learning solutions at scale. They provide a platform for
    automating and accelerating all stages of the ML life cycle, from managing data,
    to training models, evaluating performance, deploying models, serving predictions,
    and monitoring performance. The patterns we have discussed in this book show up
    throughout any machine learning project. In this section, we’ll describe the stages
    of the ML life cycle and where many of these patterns are likely to arise.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习系统使组织内的团队能够按比例构建、部署和维护机器学习解决方案。它们为自动化和加速ML生命周期的所有阶段提供了平台，从管理数据到训练模型、评估性能、部署模型、提供预测和监控性能。本书讨论的模式将出现在任何机器学习项目中。在本节中，我们将描述ML生命周期的各个阶段以及这些模式可能出现的位置。
- en: ML Life Cycle
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ML 生命周期
- en: Building a machine learning solution is a cyclical process that begins with
    a clear understanding of the business goals and ultimately leads to having a machine
    learning model in production that benefits that goal. This high-level overview
    of the ML life cycle (see [Figure 8-2](#the_ml_life_cycle_begins_with_defining))
    provides a useful roadmap designed to enable ML to bring value to businesses.
    Each of the stages is equally important, and failure to complete any one of these
    steps increases the risk in later stages of producing misleading insights or models
    of no value.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 构建机器学习解决方案是一个循环过程，从清晰理解业务目标开始，最终导致生产一个机器学习模型，以实现这一目标的利益。这个ML生命周期的高级概述（见[图 8-2](#the_ml_life_cycle_begins_with_defining)）提供了一个有用的路线图，旨在使ML为企业带来价值。每个阶段同等重要，未能完成任何一个步骤将增加后续阶段产生误导性见解或毫无价值模型的风险。
- en: '![The ML life cycle begins with defining the business use case and ultimately
    leads to having a machine learning model in production that benefits that goal.](Images/mldp_0805.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![ML 生命周期始于定义业务用例，并最终导致生产一个机器学习模型，以实现这一目标的利益。](Images/mldp_0805.png)'
- en: Figure 8-2\. The ML life cycle begins with defining the business use case and
    ultimately leads to having a machine learning model in production that benefits
    that goal.
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-2\. ML 生命周期始于定义业务用例，并最终导致生产一个机器学习模型，以实现这一目标的利益。
- en: 'The ML life cycle consists of three stages, as shown in [Figure 8-2](#the_ml_life_cycle_begins_with_defining):
    discovery, development, and deployment. There is a canonical order to the individual
    steps of each stage. However, these steps are completed in an iterative manner
    and earlier steps may be revisited depending on the outcomes and insights gathered
    from later stages.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ML 生命周期包括三个阶段，如[图 8-2](#the_ml_life_cycle_begins_with_defining)所示：发现、开发和部署。每个阶段的各个步骤有一个规范的顺序。然而，这些步骤是以迭代的方式完成的，较早的步骤可能会根据后续阶段收集到的结果和见解进行重新访问。
- en: Discovery
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发现
- en: Machine learning exists as a tool to solve a problem. The discovery stage of
    an ML project begins with defining the business use case (Step 1 of [Figure 8-2](#the_ml_life_cycle_begins_with_defining)).
    This is a crucial time for business leaders and ML practitioners to align on the
    specifics of the problem and develop an understanding of what ML can and cannot
    do to achieve that goal.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习存在作为解决问题的工具。ML项目的发现阶段始于定义业务用例（图 8-2的步骤1）。这是业务领导者和ML从业者对问题具体细节进行协调，并理解ML能够做到什么和不能做到什么来实现这一目标的关键时刻。
- en: It is important to keep sight of the business value through each stage of the
    life cycle. Many choices and design decisions must be made throughout the various
    stages, and often there is no single “right” answer. Rather, the best option is
    determined by how the model will be used in support of the business goal. While
    a feasible goal for a research project could be to eke out 0.1% more accuracy
    on a benchmark dataset, this is not acceptable in industry. For a production model
    built for a corporate organization, success is governed by factors more closely
    tied to the business, like improving customer retention, optimizing business processes,
    increasing customer engagement, or decreasing churn rates. There could also be
    indirect factors related to the business use case that influence development choices,
    like speed of inference, model size, or model interpretability. Any machine learning
    project should begin with a thorough understanding of the business opportunity
    and how a machine learning model can make a tangible improvement on current operations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在生命周期的每个阶段都要牢记业务价值的重要性。在各个阶段必须做出许多选择和设计决策，通常情况下并没有单一的“正确”答案。相反，最佳选择取决于模型如何支持业务目标。虽然研究项目的可行目标可能是在基准数据集上再提高0.1%的准确率，但这在行业中是不可接受的。对于为企业组织构建的生产模型，成功取决于与业务更紧密相关的因素，如提高客户保留率、优化业务流程、增加客户参与度或减少流失率。还可能存在间接影响开发选择的与业务用例相关的因素，如推断速度、模型大小或模型可解释性。任何机器学习项目都应始于对业务机会的深入理解，以及机器学习模型如何能够对当前运营进行实质性改进。
- en: A successful discovery stage requires collaboration between the business domain
    experts as well as machine learning experts to assess the viability of an ML approach.
    It is crucial to have someone who understands the business and the data collaborating
    with teams that understand the technical challenges and the engineering effort
    that would be involved. If the overall investment of development resources outweighs
    the value to the organization, then it is not a worthwhile solution. It is possible
    that the technical overhead and cost of resources for productionization exceed
    the benefit provided by a model that ultimately improves churn prediction by only
    0.1%. Or maybe not. If an organization’s customer base has 1 billion people, then
    0.1% is still 1 million happier customers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个成功的发现阶段需要业务领域专家和机器学习专家之间的合作，以评估ML方法的可行性。关键是有人理解业务和数据，与了解技术挑战及工程工作量的团队合作。如果开发资源的整体投资超过了对组织的价值，那么这不是一个值得的解决方案。可能技术开销和生产资源成本超过了模型只能提高0.1%流失预测的好处。或者也可能不是这样。如果一个组织的客户基础达到10亿人，那么0.1%仍然意味着100万更加满意的客户。
- en: During the discovery phase, it is important to outline the business objectives
    and scope for the task. This is also the time to determine which metrics will
    be used to measure or define success. Success can look different for different
    organizations, or even within different groups of the same organization. See,
    for example, the discussion on multiple objectives in [“Common Challenges in Machine
    Learning”](ch01.xhtml#common_challenges_in_machine_learning) in [Chapter 1](ch01.xhtml#the_need_for_machine_learning_design_pa).
    Creating well-defined metrics and key performance indicators (KPIs) at the onset
    of an ML project can help to ensure everyone is aligned on the common goal. Ideally
    there is already some procedure in place that provides a convenient baseline against
    which to measure future progress. This could be a model already in production,
    or even just a rules-based heuristic that is currently in use. Machine learning
    is not the answer to all problems, and sometimes a rule-based heuristic is hard
    to beat. Development shouldn’t be done for development’s sake. A baseline model,
    no matter how simple, is helpful to guide design decisions down the road and understand
    how each design choice moves the needle on that predetermined evaluation metric.
    In [Chapter 7](ch07.xhtml#responsible_ai), we discussed the role of a Heuristic
    Benchmark as well as other topics related to Responsible AI that often come up
    when communicating the impact and influence of machine learning with business
    stakeholders.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在发现阶段，明确任务的业务目标和范围非常重要。这也是确定将用于衡量或定义成功的指标的时候。成功在不同组织中可能看起来不同，甚至在同一组织的不同组中也是如此。例如，可以参考[“机器学习中的常见挑战”](ch01.xhtml#common_challenges_in_machine_learning)中对多目标的讨论，该讨论在[第1章](ch01.xhtml#the_need_for_machine_learning_design_pa)中有详述。在ML项目开始时创建明确定义的指标和关键绩效指标（KPIs）可以帮助确保所有人都朝着共同的目标对齐。理想情况下，已经有某些程序可供参考，以便将来的进展进行测量。这可能是一个已经在生产中的模型，甚至只是目前正在使用的基于规则的启发式。机器学习并非所有问题的答案，有时候基于规则的启发式难以超越。开发不应仅仅是为了开发而开发。一个基准模型，无论多么简单，都有助于指导未来的设计决策，并理解每个设计选择如何在预定的评估指标上推动进展。在[第7章](ch07.xhtml#responsible_ai)中，我们讨论了启发式基准的作用，以及与商业利益相关方沟通时经常涉及的负责任AI相关的其他主题。
- en: Of course, these conversations should also take place in the context of the
    data. A business deep dive should go hand in hand with a deep dive of data exploration
    (Step 2 of [Figure 8-2](#the_ml_life_cycle_begins_with_defining)). As beneficial
    as a solution might be, if quality data is not available, then there is no project.
    Or perhaps the data exists, but because of data privacy reasons, it cannot be
    used or must be scrubbed of relevant information needed for the model. In any
    case, the viability of a project and the potential for success all rely on the
    data. Thus, it is essential to have data stewards within the organization involved
    in these conversations early.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些对话也应该发生在数据的背景下。业务的深度挖掘应该与数据探索的深度挖掘（见[图 8-2](#the_ml_life_cycle_begins_with_defining)的第二步）手牵手进行。即使解决方案可能非常有益，如果没有质量数据可用，那么就没有项目。或许数据是存在的，但由于数据隐私原因，不能使用或必须清洗掉模型所需的相关信息。无论如何，项目的可行性和成功的潜力都依赖于数据。因此，早期让组织内的数据管理者参与这些对话至关重要。
- en: The data guides the process and it’s important to understand the quality of
    the data that is available. What are the distributions of the key features? How
    many missing values are there? How will missing values be handled? Are there outliers?
    Are any input values highly correlated? What features exist in the input data
    and which features should be engineered? Many machine learning models require
    a massive dataset for training. Is there enough data? How can we augment the dataset?
    Is there bias in the dataset? These are important questions, and they only touch
    the surface. One possible decision at this stage is that more data, or data of
    a specific scenario, needs to be collected before the project can proceed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 数据指导整个过程，了解可用数据的质量非常重要。关键特征的分布是什么样的？有多少缺失值？如何处理缺失值？是否存在异常值？输入值是否高度相关？输入数据中存在哪些特征，哪些特征应该被设计？许多机器学习模型需要大量的训练数据集。是否有足够的数据？我们如何增加数据集？数据集中是否存在偏差？这些都是重要的问题，它们只是触及表面。在这个阶段可能的一个决定是，在项目可以继续之前需要收集更多数据，或者收集特定场景的数据。
- en: Data exploration is a key step in answering the question of whether data of
    sufficient quality exists. Conversation alone is rarely a substitute for getting
    your hands dirty and experimenting with the data. Visualization plays an important
    role during this step. Density plots and histograms are helpful to understand
    the spread of different input values. Box plots can help to identify outliers.
    Scatter plots are useful for discovering and describing bivariate relationships.
    Percentiles can help identify the range for numeric data. Averages, medians, and
    standard deviations can help to describe central tendency. These techniques and
    others can help determine which features are likely to benefit the model as well
    as further understanding of which data transformations will be needed to prepare
    the data for modeling.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 数据探索是回答数据是否具有足够质量的关键步骤。单凭对话很少能替代亲自动手并进行数据实验。在此步骤中，可视化起着重要作用。密度图和直方图有助于理解不同输入值的分布情况。箱线图可以帮助识别异常值。散点图有助于发现和描述双变量关系。百分位数可以帮助识别数值数据的范围。平均数、中位数和标准差有助于描述中心趋势。这些技术及其他方法有助于确定哪些特征可能对模型有益，以及进一步了解需要对数据进行哪些转换以准备建模所需。
- en: Within the discovery stage, it can be helpful to do a few modeling experiments
    to see if there really is “signal in the noise.” At this point, it could be beneficial
    to perform a machine learning feasibility study (Step 3). Just as it sounds, this
    is typically a short technical sprint spanning only a few weeks whose goal is
    to assess the viability of the data for solving the problem. This provides a chance
    to explore options for framing the machine learning problem, experiment with algorithm
    selection,and learn which feature engineering steps would be most beneficial.
    The feasibility study step in the discovery stage is also a good point at which
    to create a Heuristic Benchmark (see [Chapter 7](ch07.xhtml#responsible_ai)).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在发现阶段内，进行几个建模实验以查看是否确实有“信号在噪声中”。此时，执行机器学习可行性研究（第3步）可能会有益。顾名思义，这通常是一个短期技术冲刺，仅持续几周，旨在评估解决问题的数据的可行性。这提供了探索框架机器学习问题、尝试算法选择以及了解哪些特征工程步骤最有益的机会。在发现阶段的可行性研究步骤也是创建启发式基准的好时机（参见[第7章](ch07.xhtml#responsible_ai)）。
- en: Development
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发
- en: After agreeing on key evaluation metrics and business KPIs, the development
    stage of the machine learning life cycle begins. The details of developing an
    ML model are covered in detail in many machine learning resources. Here, we highlight
    the key components.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在同意关键评估指标和业务KPI后，机器学习生命周期的开发阶段开始。许多机器学习资源详细介绍了开发ML模型的细节。在这里，我们重点介绍关键组成部分。
- en: During the development stage, we begin by building data pipelines and engineering
    features (Step 4 of [Figure 8-2](#the_ml_life_cycle_begins_with_defining)) to
    process the data inputs that will be fed to the model. The data collected in real-world
    applications can have many issues such as missing values, invalid examples, or
    duplicate data points. Data pipelines are needed to preprocess these data inputs
    so that they can be used by the model. Feature engineering is the process of transforming
    raw input data into features that are more closely aligned with the model’s learning
    objective and expressed in a format that can be fed to the model for training.
    Feature engineering techniques can involve bucketizing inputs, converting between
    data formats, tokenizing and stemming text, creating categorical features or one-hot
    encoding, hashing inputs, creating feature crosses and feature embeddings, and
    many others. [Chapter 2](ch02.xhtml#data_representation_design_patterns) of this
    book discusses Data Representation design patterns and covers many data aspects
    that arise during this stage of the ML life cycle. [Chapter 5](ch05.xhtml#design_patterns_for_resilient_serving)
    and [Chapter 6](ch06_split_000.xhtml#reproducibility_design_patterns) describe
    patterns related to resilience and reproducibility in ML systems, which help in
    building data pipelines.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发阶段，我们首先通过构建数据管道和工程化特征（[图 8-2](#the_ml_life_cycle_begins_with_defining)的第4步）来处理数据输入，这些数据输入将被馈送给模型。在实际应用中收集的数据可能存在许多问题，如缺失值、无效示例或重复数据点。数据管道需要预处理这些数据输入，以便模型可以使用它们。特征工程是将原始输入数据转换为更符合模型学习目标并以可供训练的格式表达的特征的过程。特征工程技术可能涉及将输入进行分桶、在不同数据格式之间转换、对文本进行标记化和词干提取、创建分类特征或独热编码、哈希输入、创建特征交叉和特征嵌入等。本书的[第2章](ch02.xhtml#data_representation_design_patterns)讨论了数据表示设计模式，并涵盖了在ML生命周期的这一阶段涉及的许多数据方面。[第5章](ch05.xhtml#design_patterns_for_resilient_serving)和[第6章](ch06_split_000.xhtml#reproducibility_design_patterns)描述了与ML系统中弹性和可重现性相关的模式，有助于构建数据管道。
- en: This step may also involve engineering the labels for the problem and design
    decisions related to how the problem is represented. For example, for time-series
    problems, this may involve creating feature windows and experimenting with lag
    times and the size of label intervals. Or perhaps it’s helpful to reframe a regression
    problem as a classification and change the representation of the labels entirely.
    Or maybe it is necessary to employ rebalancing techniques, if the distribution
    of output classes is overrepresented by a single class. [Chapter 3](ch03.xhtml#problem_representation_design_patterns)
    of this book is focused on problem representation and addresses these and other
    important design patterns that are related to problem framing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步骤中，可能还涉及工程化问题的标签以及与问题表示方式相关的设计决策。例如，对于时间序列问题，可能需要创建特征窗口，并尝试滞后时间和标签间隔的大小。或者可能有助于将回归问题重新构造为分类问题，并完全改变标签的表示方式。或者，如果输出类的分布被单一类别过度代表，可能需要采用重新平衡技术。本书的[第3章](ch03.xhtml#problem_representation_design_patterns)侧重于问题表示，并讨论了与问题框架相关的这些重要设计模式及其他内容。
- en: 'The next step (Step 5 in [Figure 8-2](#the_ml_life_cycle_begins_with_defining))
    of the development stage is focused on building the ML model. During this development
    step, it is crucial to adhere to best practices of capturing ML workflows in a
    pipeline: see [“Design Pattern 25: Workflow Pipeline”](ch06_split_000.xhtml#design_pattern_twofive_workflow_pipelin)
    in [Chapter 6](ch06_split_000.xhtml#reproducibility_design_patterns). This includes
    creating repeatable splits for training/validation/test sets before any model
    development has begun to ensure there is no data leakage. Different model algorithms
    or combinations of algorithms may be trained to assess their performance on the
    validation set and to examine the quality of their predictions. Parameter and
    hyperparameters are tuned, regularization techniques are employed, and edge cases
    are explored. The typical ML model training loop is described in detail at the
    beginning of [Chapter 4](ch04.xhtml#model_training_patterns) where we also address
    useful design patterns for changing the training loop to attain specific objectives.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 发展阶段的下一步（图 8-2中的第5步，参见[#the_ml_life_cycle_begins_with_defining](#the_ml_life_cycle_begins_with_defining)）专注于构建ML模型。在这一开发阶段，遵循在管道中捕获ML工作流的最佳实践至关重要：参见[“设计模式25：工作流管道”](ch06_split_000.xhtml#design_pattern_twofive_workflow_pipelin)在[第6章](ch06_split_000.xhtml#reproducibility_design_patterns)中。这包括在任何模型开发之前创建可重复使用的训练/验证/测试集划分，以确保没有数据泄漏。可以训练不同的模型算法或算法组合，以评估它们在验证集上的性能，并检查其预测的质量。调整参数和超参数，采用正则化技术，并探索边缘案例。典型的ML模型训练循环在[第4章](ch04.xhtml#model_training_patterns)开头详细描述，我们还讨论了用于更改训练循环以达到特定目标的有用设计模式。
- en: Many steps of the ML life cycle are iterative, and this is particularly true
    during model development. Many times, after some experimentation, it may be necessary
    to revisit the data, business objectives, and KPIs. New data insights are gleaned
    during the model development stage and these insights can shed additional light
    on what is possible (and what is not possible). It is not uncommon to spend a
    long time in the model development phase, particularly when developing a custom
    model. [Chapter 6](ch06_split_000.xhtml#reproducibility_design_patterns) addresses
    many other reproducibility design patterns that address challenges that arise
    during this iterative phase of model development.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ML 生命周期的许多步骤都是迭代的，特别是在模型开发阶段尤为如此。经过一些试验后，经常需要重新审视数据、业务目标和关键绩效指标。在模型开发阶段，会得到新的数据洞察，这些洞察能够更清晰地展示可能性（以及不可能性）。在开发自定义模型时，通常会花费很长时间，这在模型开发阶段尤为突出。[第6章](ch06_split_000.xhtml#reproducibility_design_patterns)还讨论了许多解决在这一迭代阶段中出现的挑战的再现性设计模式。
- en: Throughout development of the model, each new adjustment or approach is measured
    against the evaluation metrics that were set in the discovery stage. Hence, successful
    execution of the discovery stage is crucial, and it is necessary to have alignment
    on the decisions made during that stage. Ultimately, model development culminates
    in a final evaluation step (Step 6 of [Figure 8-2](#the_ml_life_cycle_begins_with_defining)).
    At this point, model development ceases and the model performance is assessed
    against those predetermined evaluation metrics.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型开发的整个过程中，每一次新的调整或方法都会根据在发现阶段设定的评估指标进行衡量。因此，成功执行发现阶段至关重要，并且有必要在该阶段做出的决策上达成一致。最终，模型开发将在最终评估步骤（图 8-2的第6步，参见[#the_ml_life_cycle_begins_with_defining](#the_ml_life_cycle_begins_with_defining)）中结束，并根据那些预先确定的评估指标评估模型性能。
- en: One of the key outcomes of the development stage is to interpret and present
    results (Step 7 of [Figure 8-2](#the_ml_life_cycle_begins_with_defining)) to the
    stakeholders and regulatory groups within the business. This high-level evaluation
    is crucial and necessary to communicate the value of the development stage to
    management. This step is focused on creating numbers and visuals for initial reports
    that will be brought to stakeholders within the organization. [Chapter 7](ch07.xhtml#responsible_ai)
    discusses some of the common design patterns that ensure AI is being used responsibly
    and can help with stakeholder management. Typically, this is a key decision point
    in determining if further resources will be devoted to the final stage of the
    life cycle, machine learning productionization and deployment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 开发阶段的关键结果之一是解释并向业务内的利益相关者和监管组织呈现结果（见[图 8-2](#the_ml_life_cycle_begins_with_defining)的第7步）。这种高级评估至关重要，有必要将开发阶段的价值传达给管理层。此步骤专注于为将呈现给组织内利益相关者的初步报告创建数字和可视化内容。[第7章](ch07.xhtml#responsible_ai)讨论了一些确保AI被负责使用并有助于利益相关者管理的常见设计模式。通常，这是决定是否将进一步资源投入到机器学习生产化和部署的最后阶段的关键决策点。
- en: Deployment
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署
- en: Assuming successful completion of the model development and evidence of promising
    results, the next stage is focused on productionization of the model, with the
    first step (Step 8 in [Figure 8-2](#the_ml_life_cycle_begins_with_defining)) being
    to plan for deployment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 假设模型开发成功并证明了有希望的结果，下一阶段便是专注于模型的生产化，第一步（见[图 8-2](#the_ml_life_cycle_begins_with_defining)的第8步）是规划部署。
- en: Training a machine learning model requires a substantial amount of work, but
    to fully realize the value of that effort, the model must run in production to
    support the business efforts it was designed to improve. There are several approaches
    that achieve this goal and deployment can look different among different organizations
    depending on the use case. For example, productionized ML assets could take the
    form of interactive dashboards, static notebooks, code that is wrapped in a reusable
    library, or web services endpoints.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 训练机器学习模型需要大量工作，但要充分实现这些努力的价值，模型必须在生产环境中运行，以支持其旨在改进的业务工作。有几种方法可以实现这一目标，根据使用情况，不同组织的部署方式可能不同。例如，生产化的机器学习资产可以采取交互式仪表盘、静态笔记本、封装在可重用库中的代码或者网页服务端点的形式。
- en: There are many considerations and design decisions for productionizing models.
    As before, many of the decisions that are made during the discovery stage guide
    this step as well. How should model retraining be managed? Will input data need
    to stream in? Should training happen on new batches of data or in real time? What
    about model inference? Should we plan for one-off batch inference jobs each week
    or do we need to support real-time prediction? Are there special throughput or
    latency issues to consider? Is there a need to handle spiky workloads? Is low
    latency a priority? Is network connectivity an issue? The design patterns in [Chapter 5](ch05.xhtml#design_patterns_for_resilient_serving)
    touch on some of the issues that arise when operationalizing an ML model.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产化模型，存在许多考虑因素和设计决策。与之前一样，发现阶段中的许多决策也指导这一步。如何管理模型重新训练？输入数据是否需要实时流入？训练应该在新的数据批次上进行还是实时进行？模型推断如何？我们应该计划每周一次的一次性批量推断作业，还是需要支持实时预测？是否需要考虑特殊的吞吐量或延迟问题？是否需要处理尖峰工作负载？低延迟是否是首要考虑的？网络连接是否存在问题？[第5章](ch05.xhtml#design_patterns_for_resilient_serving)中的设计模式涉及了在将ML模型操作化过程中出现的一些问题。
- en: These are important considerations, and this final stage tends to be the largest
    hurdle for many businesses, as it can require strong coordination among different
    parts of the organization and integration of a variety of technical components.
    This difficulty is also in part due to the fact that productionization requires
    integrating a new process, one that relies on the machine learning model, into
    an existing system. This can involve dealing with legacy systems that were developed
    to support a single approach, or there could be complex change control and production
    processes to navigate within the organization. Also, many times, existing systems
    do not have a mechanism for supporting predictions coming from a machine learning
    model, so new applications and workflows must be developed. It is important to
    anticipate these challenges, and developing a comprehensive solution requires
    significant investment from the business operations side to make the transition
    as easy as possible and increase the speed to market.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是重要的考虑因素，而这个最终阶段往往是许多企业面临的最大障碍，因为它可能需要组织的不同部分之间的强大协调，并且需要整合各种技术组件。这种困难部分原因在于，生产化需要将一个依赖于机器学习模型的新流程整合到现有系统中。这可能涉及处理为支持单一方法而开发的遗留系统，或者在组织内部导航复杂的变更控制和生产流程。此外，许多时候，现有系统没有支持来自机器学习模型预测的机制，因此必须开发新的应用程序和工作流程。预见到这些挑战是非常重要的，从业务运营方面开发全面的解决方案需要大量投资，以尽可能简化过渡并增加市场推出速度。
- en: The next step of the deployment stage is to operationalize the model (Step 9
    in [Figure 8-2](#the_ml_life_cycle_begins_with_defining)). This field of the practice
    is typically referred to as MLOps (ML Operations) and covers aspects related to
    automating, monitoring, testing, managing, and maintaining machine learning models
    in production. It is a necessary component for any company hoping to scale the
    number of machine learning–driven applications within their organization.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 部署阶段的下一步是将模型运营化（图 8-2中的第9步）[^1]。这一实践领域通常被称为MLOps（机器学习运营），涵盖了自动化、监控、测试、管理和维护生产中的机器学习模型相关的方方面面。对于任何希望在其组织内扩展机器学习驱动应用数量的公司来说，这是一个必要的组成部分。
- en: One of the key characteristics of operationalized models is automated workflow
    pipelines. The development stage of the ML life cycle is a multistep process.
    Building pipelines to automate these steps enables more efficient workflows and
    repeatable processes that improve future model development, and allows for increased
    agility in solving problems that arise. Today, open source tools like [Kubeflow](https://oreil.ly/I_cJf)
    provide this functionality and many large software companies have developed their
    own end-to-end ML platforms, like [Uber’s Michelangelo](https://oreil.ly/se4G9)
    or [Google’s TFX](https://oreil.ly/OznI3), which are also open source.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运营化模型的关键特征之一是自动化工作流管道。ML生命周期的开发阶段是一个多步骤过程。构建用于自动化这些步骤的管道能够实现更高效的工作流和可重复的过程，从而改进未来模型开发，并允许在解决出现问题时提高灵活性。今天，像[Kubeflow](https://oreil.ly/I_cJf)这样的开源工具提供了这种功能，许多大型软件公司也开发了自己的端到端ML平台，例如[Uber的Michelangelo](https://oreil.ly/se4G9)或[Google的TFX](https://oreil.ly/OznI3)，这些平台也是开源的。
- en: Successful operationalization incorporates components of continuous integration
    and continuous delivery (CI/CD) that are the familiar best practices of software
    development. These CI/CD practices are focused on reliability, reproducibility,
    speed, security, and version control within code development. ML/AI workflows
    benefit from the same considerations, though there are some notable differences.
    For example, in addition to the code that is used to develop the model, it is
    important to apply these CI/CD principles to the data, including data cleaning,
    versioning, and orchestration of data pipelines.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的运营化包括持续集成和持续交付（CI/CD）的组成部分，这些是软件开发的熟悉最佳实践。这些CI/CD实践侧重于代码开发中的可靠性、可重复性、速度、安全性和版本控制。ML/AI工作流也从相同的考虑因素中受益，尽管存在一些显著的差异。例如，除了用于开发模型的代码外，将这些CI/CD原则应用于数据，包括数据清理、版本控制和数据管道的编排，也非常重要。
- en: 'The final step to be considered in the deployment stage is to monitor and maintain
    the model. Once the model has been operationalized and is in production, it’s
    necessary to monitor the model’s performance. Over time, data distributions change,
    causing the model to become stale. This model staleness (see [Figure 8-3](#model_staleness_can_occur_for_many_reas))
    can occur for many reasons, from changes in customer behavior to shifts in the
    environment. For this reason, it is important to have in place mechanisms to efficiently
    monitor the machine learning model and all the various components that contribute
    to its performance, from data collection to the quality of the predictions during
    serving. The discussion of [“Design Pattern 18: Continued Model Evaluation”](ch05.xhtml#design_pattern_oneeight_continued_model)
    in [Chapter 5](ch05.xhtml#design_patterns_for_resilient_serving) covers this common
    problem and its solution in detail.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 部署阶段需考虑的最后一步是监控和维护模型。一旦模型被操作化并投入生产，监控模型的性能就变得必要了。随着时间的推移，数据分布会发生变化，导致模型变得陈旧。这种模型过时（见[图 8-3](#model_staleness_can_occur_for_many_reas)）可能由多种原因引起，从客户行为变化到环境变动。因此，建立有效监控机制以监控机器学习模型及其性能相关的各个组成部分（从数据收集到服务期间预测质量）非常重要。[第五章](ch05.xhtml#design_patterns_for_resilient_serving)的[“设计模式18：持续模型评估”](ch05.xhtml#design_pattern_oneeight_continued_model)详细讨论了这一常见问题及其解决方案。
- en: '![Model staleness can occur for many reasons. Retraining models periodically
    can help to improve their performance over time.](Images/mldp_0806.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![模型过时可能出现很多原因。定期重新训练模型有助于随着时间推移提高它们的性能。](Images/mldp_0806.png)'
- en: Figure 8-3\. Model staleness can occur for many reasons. Retraining models periodically
    can help to improve their performance over time.
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-3\. 模型过时可能出现很多原因。定期重新训练模型有助于随着时间推移提高它们的性能。
- en: For example, it is important to monitor the distribution of feature values to
    compare against the distributions that were used during the development steps.
    It is also important to monitor the distribution of label values to ensure that
    some data drift hasn’t caused an imbalance or shift in label distribution. Oftentimes,
    a machine learning model relies on data collected from an outside source. Perhaps
    our model relies on a third-party traffic API to predict wait times for car pickups
    or uses data from a weather API as input to a model that predicts flight delays.
    These APIs are not managed by our team. If that API fails or its output format
    changes in a significant way, it will have consequences for our production model.
    In this case, it is important to set up monitoring to check for changes in these
    upstream data sources. Lastly, it is important to set up systems to monitor prediction
    distributions and, when possible, measure the quality of those predictions in
    the production environment.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，监控特征值的分布以与开发阶段使用的分布进行比较是很重要的。监控标签值的分布也很重要，以确保数据漂移没有导致标签分布的不平衡或偏移。机器学习模型通常依赖于从外部来源收集的数据。也许我们的模型依赖于第三方交通API来预测汽车接送等待时间，或使用天气API的数据作为预测航班延误的模型的输入。这些API不由我们团队管理。如果该API失败或其输出格式发生显著变化，将会对我们的生产模型产生后果。在这种情况下，设置监控以检查这些上游数据源的变化非常重要。最后，建立系统来监控预测分布，并在可能时衡量生产环境中预测质量也是至关重要的。
- en: Upon completion of the monitoring step, it can be beneficial to revisit the
    business use case and objectively, accurately assess how the machine learning
    model has influenced business performance. Likely, this will lead to new insights
    and the start of new ML projects, and the life cycle begins again.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成监控步骤后，重新审视业务用例并客观、准确地评估机器学习模型如何影响业务绩效可能是有益的。很可能会带来新的见解并开启新的机器学习项目，生命周期再次开始。
- en: AI Readiness
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI 准备度
- en: 'We find that different organizations working on building machine learning solutions
    are at different stages of AI Readiness. According to a [white paper published
    by Google Cloud](https://oreil.ly/5GljC), a company’s maturity in incorporating
    AI into the business can typically be characterized into three phases: tactical,
    strategic, and transformational. Machine learning tools in these three phases
    go from involving primarily manual development in the tactical phase, to using
    pipelines in the strategic phase, to being fully automated in the transformational
    phase.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现，不同的组织在构建机器学习解决方案时处于AI准备的不同阶段。根据[Google Cloud发布的白皮书](https://oreil.ly/5GljC)，公司在将AI整合到业务中的成熟度通常可以划分为三个阶段：战术、战略和变革。这三个阶段中的机器学习工具从战术阶段的主要手动开发，到战略阶段的使用流水线，再到变革阶段的完全自动化。
- en: 'Tactical phase: Manual development'
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 战术阶段：手动开发
- en: The tactical phase of AI Readiness is often seen in organizations just beginning
    to explore the potential for AI to deliver, with focus on short-term projects.
    Here, the AI/ML use cases tend to be more narrow, focusing more on proofs of concept
    or prototypes; a direct link to the business goals may not always be clear. In
    this stage, organizations recognize the promise of advanced analytics work, but
    the execution is driven primarily by individual contributors or outsourced entirely
    to partners; access to large-scale, quality datasets within the organization can
    be difficult.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: AI准备的战术阶段通常出现在刚开始探索AI潜力以交付的组织中，重点放在短期项目上。在这里，AI/ML用例往往更加狭窄，更多地关注概念验证或原型;与业务目标的直接联系并不总是清晰的。在这个阶段，组织认识到先进分析工作的潜力，但执行主要由个人贡献者驱动或完全外包给合作伙伴;在组织内部获取大规模、高质量数据集可能会很困难。
- en: Typically, in this phase, there is no process to scale solutions consistently,
    and the ML tools used (see [Figure 8-4](#manual_development_of_ai_modelsdot_figu))
    are developed on an ad hoc basis. Data is warehoused offline or in isolated data
    islands and accessed manually for data exploration and analysis. There are no
    tools in place to automate the various phases of the ML development cycle and
    there is little attention paid to developing repeatable processes of the workflow.
    This makes it difficult to share assets within members of the organization, and
    there is no dedicated hardware for development.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在这个阶段，没有一致扩展解决方案的过程，并且使用的ML工具（见[图8-4](#manual_development_of_ai_modelsdot_figu)）是根据特定需求开发的。数据离线存储或在孤立的数据岛中，并手动访问进行数据探索和分析。目前没有工具可以自动化ML开发周期的各个阶段，也没有太多关注于开发工作流程的可重复过程。这使得在组织成员之间共享资产变得困难，并且没有专门的硬件用于开发。
- en: The extent of MLOps is limited to a repository of trained models, and there
    is little distinction between testing and production environments where the final
    model may be deployed as an API-based solution.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: MLOps的范围仅限于训练模型的存储库，并且在测试和生产环境之间几乎没有区别，最终模型可能会部署为基于API的解决方案。
- en: '![Manual development of AI models. Figure adapted from Google Cloud documentation.](Images/mldp_0807.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![AI模型的手动开发。图示改编自Google Cloud文档。](Images/mldp_0807.png)'
- en: Figure 8-4\. Manual development of AI models. Figure adapted from [Google Cloud
    documentation](https://oreil.ly/aC1HP).
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-4\. AI模型的手动开发。图示改编自[Google Cloud文档](https://oreil.ly/aC1HP)。
- en: 'Strategic phase: Utilizing pipelines'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 战略阶段：利用流水线
- en: Organizations in the strategic phase have aligned AI efforts with business objectives
    and priorities, and ML is seen as a pivotal accelerator for the business. As such,
    there is often senior executive sponsorship and dedicated budget for ML projects
    that are executed by skilled teams and strategic partners. There is infrastructure
    in place for these teams to easily share assets and develop ML systems that leverage
    both ready-to-use and custom models. There is a clear distinction between development
    and production environments.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 战略阶段的组织已经将AI工作与业务目标和优先事项对齐，ML被视为业务的关键推动因素。因此，通常会有高级执行赞助和专门的ML项目预算，由熟练的团队和战略合作伙伴执行。为这些团队提供了基础设施，以便轻松共享资产并开发利用现成和定制模型的ML系统。在开发和生产环境之间有明确的区别。
- en: Teams typically already have skills in data wrangling with expertise in descriptive
    and predictive analytics. Data is stored in an enterprise data warehouse, and
    there is a unified model for centralized data and ML asset management. The development
    of ML models occurs as an orchestrated experiment. The ML assets and source code
    for these pipelines is stored in a centralized source repository and easily shared
    among members of the organization.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 团队通常已具备数据清洗技能，擅长描述性和预测性分析。数据存储在企业数据仓库中，并有一个统一的模型用于集中管理数据和机器学习资产。ML模型的开发是作为一项协调的实验进行的。这些管道的ML资产和源代码存储在一个集中的源代码库中，并且在组织成员之间轻松共享。
- en: The data pipelines for developing ML models are automated utilizing a fully
    managed, serverless data service for ingestion and processing and are either scheduled
    or event driven. Additionally, the ML workflow for training, evaluation, and batch
    prediction is managed by an automated pipeline so that the stages of the ML life
    cycle, from data validation and preparation to model training and validation (see
    [Figure 8-5](#pipelines_phase_of_ai_developmentdot_fi)), are executed by a performance
    monitoring trigger. These models are stored in a centralized trained models registry
    and able to be deployed automatically based on predetermined model validation
    metrics.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 开发ML模型的数据管道是自动化的，利用完全托管的、无服务器的数据服务进行数据摄取和处理，可以按计划或事件驱动。此外，ML训练、评估和批量预测的工作流由自动化管道管理，以便通过性能监控触发器执行ML生命周期的各个阶段，从数据验证和准备到模型训练和验证（见
    [图 8-5](#pipelines_phase_of_ai_developmentdot_fi)）。
- en: There may be several ML systems deployed and maintained in production with logging,
    performance monitoring, and notifications in place. The ML systems leverage a
    model API that is capable of handling real-time data streams both for inference
    and to collect data that is fed into the automated ML pipeline to refresh the
    model for later training.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中可能部署和维护多个具有日志记录、性能监控和通知功能的机器学习系统。这些机器学习系统利用模型 API 处理实时数据流，既用于推理，也用于收集数据，这些数据被馈送到自动化机器学习管道中以更新模型以供后续训练。
- en: '![Pipelines phase of AI development. Figure adapted from Google Cloud documentation.](Images/mldp_0808.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![AI开发的管道阶段。图来源于Google Cloud文档。](Images/mldp_0808.png)'
- en: Figure 8-5\. Pipelines phase of AI development. Figure adapted from [Google
    Cloud documentation](https://oreil.ly/sMNo7).
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-5\. AI开发的管道阶段。图来源于[Google Cloud文档](https://oreil.ly/sMNo7)。
- en: 'Transformational phase: Fully automated processes'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转型阶段：完全自动化的流程
- en: Organizations in the transformational phase of AI Readiness are actively using
    AI to stimulate innovation, support agility, and cultivate a culture where experimentation
    and learning is ongoing. Strategic partnerships are used to innovate, co-create,
    and augment technical resources within the company. Many of the design patterns
    related to reproducibility and resilience in Chapters [5](ch05.xhtml#design_patterns_for_resilient_serving)
    and [6](ch06_split_000.xhtml#reproducibility_design_patterns) arise in this phase
    of AI Readiness.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正在进行AI准备转型阶段的组织正在积极使用AI来推动创新，支持敏捷性，并培养一个实验和学习不断进行的文化。战略合作伙伴关系用于创新、共同创造，并增强公司内的技术资源。与AI准备阶段相关的许多与可复现性和弹性相关的设计模式在第
    [5](ch05.xhtml#design_patterns_for_resilient_serving) 章和第 [6](ch06_split_000.xhtml#reproducibility_design_patterns)
    章中出现。
- en: In this phase, it is common to have product-specific AI teams embedded into
    the broader product teams and supported by the advanced analytics team. In this
    way, ML expertise is able to diffuse across various lines of business within the
    organization. The established common patterns and best practices as well as standard
    tools and libraries for accelerating ML projects are shared easily among different
    groups within the organization.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这一阶段，通常会将特定产品的AI团队嵌入更广泛的产品团队，并得到高级分析团队的支持。通过这种方式，ML专业知识能够在组织内各业务线中传播。建立的常见模式和最佳实践，以及用于加速ML项目的标准工具和库，在组织内不同的团队之间轻松共享。
- en: Datasets are stored in a platform that is accessible to all teams, making it
    easy to discover, share, and reuse datasets and ML assets. There are standardized
    ML feature stores, and collaborations across the entire organization are encouraged.
    Fully automated organizations operate an integrated ML experimentation and production
    platform where models are built and deployed and ML practices are accessible to
    everyone in the organization. That platform is supported by scalable and serverless
    computation for batch and online data ingestion and processing. Specialized ML
    accelerators such as GPUs and TPUs are available on demand and there are orchestrated
    experiments for end-to-end data and ML pipelines.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集存储在一个对所有团队都可访问的平台上，使得发现、共享和重复使用数据集和ML资产变得容易。有标准化的ML特征存储，并鼓励整个组织之间的合作。完全自动化的组织在集成ML实验和生产平台上运行，模型构建和部署以及ML实践对组织中的每个人都是可访问的。该平台由可扩展和无服务器的计算支持批处理和在线数据摄入和处理。例如，可按需使用专用的ML加速器如GPU和TPU，并对端到端数据和ML管道进行编排实验。
- en: The development and production environments are similar to the pipeline stage
    (see [Figure 8-6](#fully_automated_processes_support_ai_de)) but have incorporated
    CI/CD practices into each of the various stages of their ML workflow as well.
    These CI/CD best practices focus on reliability, reproducibility, and version
    control for the code to produce the ML models as well as the data and the data
    pipelines and their orchestration. This allows for building, testing, and packaging
    of various pipeline components. Model versioning is maintained by an ML Model
    Registry that also stores necessary ML metadata and artifacts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和生产环境类似于流水线阶段（见[图 8-6](#fully_automated_processes_support_ai_de)），但已将CI/CD实践整合到其ML工作流的各个阶段中。这些CI/CD最佳实践侧重于代码可靠性、可重复性和版本控制，以便生成ML模型以及数据和数据管道及其编排。这允许构建、测试和打包各种流水线组件。ML模型版本控制由ML模型注册表维护，该注册表还存储必要的ML元数据和工件。
- en: '![Fully automated processes support AI development. Figure adapted from Google
    Cloud documentation.](Images/mldp_0809.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![完全自动化的过程支持AI开发。图源自Google Cloud文档。](Images/mldp_0809.png)'
- en: Figure 8-6\. Fully automated processes support AI development. Figure adapted
    from [Google Cloud documentation.](https://oreil.ly/VX31C)
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-6\. 完全自动化的过程支持AI开发。图源自[Google Cloud文档。](https://oreil.ly/VX31C)
- en: Common Patterns by Use Case and Data Type
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按用例和数据类型的常见模式
- en: Many of the design patterns discussed in this book are utilized throughout the
    course of any machine learning development cycle and will likely be used regardless
    of the production use case—for example, Hyperparameter Tuning, Heuristic Benchmark,
    Repeatable Splitting, Model Versioning, Distributed Training, Workflow Pipelines,
    or Checkpoints. Other design patterns, you might find, are particularly useful
    for certain scenarios. Here, we’ll group together commonly used design patterns
    according to popular machine learning use cases.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本书讨论的许多设计模式在任何机器学习开发周期中都会被使用，并且可能会被用于生产用例，例如超参数调整、启发式基准、可重复分割、模型版本控制、分布式训练、工作流管道或检查点。其他设计模式可能会在特定场景中特别有用。在这里，我们将根据流行的机器学习用例将常用的设计模式分组在一起使用。
- en: Natural Language Understanding
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自然语言理解
- en: Natural language understanding (NLU) is a branch of AI that focuses on training
    a machine to understand the meaning behind text and language. NLU is used by speech
    agents like Amazon’s Alexa, Apple’s Siri, and Google’s Assistant to understand
    sentences like, “What is the weather forecast this weekend?” There are many use
    cases that fall under the umbrella of NLU and it can be applied to a lot of processes,
    such as text classification (email filtering), entity extraction, question answering,
    speech recognition, text summarization, and sentiment analysis.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言理解（NLU）是人工智能的一个分支，专注于训练机器理解文本和语言背后的含义。NLU被语音助手如亚马逊的Alexa、苹果的Siri和谷歌的Assistant用于理解句子，例如“这个周末天气预报如何？”有许多应用场景属于NLU的范畴，可以应用于许多过程，如文本分类（电子邮件过滤）、实体提取、问题回答、语音识别、文本摘要和情感分析。
- en: Embeddings
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入
- en: Hashed Feature
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希特征
- en: Neutral Class
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中性类
- en: Multimodal Input
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多模态输入
- en: Transfer Learning
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移学习
- en: Two-Phase Predictions
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两阶段预测
- en: Cascade
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级联
- en: Windowed Inference
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口推断
- en: Computer Vision
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算机视觉
- en: Computer vision is the broad parent name for AI that trains machines to understand
    visual input, such as images, videos, icons, and anything where pixels might be
    involved. Computer vision models aim to automate any task that might rely on human
    vision, from using an MRI to detect lung cancer to self-driving cars. Some classical
    applications of computer vision are image classification, video motion analysis,
    image segmentation, and image denoising.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机视觉是训练机器理解视觉输入（如图像、视频、图标等）的广泛父类AI。计算机视觉模型旨在自动化依赖于人类视觉的任何任务，从使用MRI检测肺癌到自动驾驶汽车。计算机视觉的一些经典应用包括图像分类、视频运动分析、图像分割和图像去噪。
- en: Reframing
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构
- en: Neutral Class
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中性类
- en: Multimodal Input
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多模态输入
- en: Transfer Learning
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移学习
- en: Embeddings
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入
- en: Multilabel
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多标签
- en: Cascade
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级联
- en: Two-Phase Predictions
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两阶段预测
- en: Predictive Analytics
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预测分析
- en: Predictive modeling uses historical data to find patterns and determine the
    likelihood of a certain event occurring in the future. Predictive models can be
    found across many different industry domains. For example, businesses might use
    predictive models to forecast revenue more accurately or anticipate future demand
    for products. In medicine, predictive models might be used to assess the risk
    of a patient developing a chronic disease or predict when a patient might not
    show up for a scheduled appointment. Other examples include energy forecasting,
    customer churn prediction, financial modeling, weather prediction, and predictive
    maintenance.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 预测建模使用历史数据来发现模式并确定未来事件发生的可能性。预测模型可以在许多不同的行业领域找到。例如，企业可能使用预测模型更准确地预测收入或预测产品的未来需求。在医学上，预测模型可能用于评估患者发展慢性疾病的风险或预测患者可能未按预约出现的时间。其他示例包括能源预测、客户流失预测、财务建模、天气预测和预测性维护。
- en: Feature Store
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征存储
- en: Feature Cross
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征交叉
- en: Embeddings
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入
- en: Ensemble
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成
- en: Transform
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换
- en: Reframing
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构
- en: Cascade
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级联
- en: Multilabel
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多标签
- en: Neutral Class
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中性类
- en: Windowed Inference
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口推断
- en: Batch Serving
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量服务
- en: IoT analytics is also a broad category that sits within predictive analytics.
    IoT models rely on data collected by internet-connected sensors called IoT devices.
    Consider a commercial aircraft that has thousands of sensors on it collecting
    more than 2 TB of data per day. Machine learning of IoT sensor device data can
    provide predictive models to warn against equipment failure before it happens.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网分析也是预测分析的一个广泛类别。物联网模型依赖于由称为物联网设备的互联网连接传感器收集的数据。考虑一架商用飞机，它有数千个传感器，每天收集超过2
    TB的数据。物联网传感器设备数据的机器学习可以提供预测模型，以在故障发生之前发出警告。
- en: Feature Store
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征存储
- en: Transform
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换
- en: Reframing
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构
- en: Hashed Feature
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散列特征
- en: Cascade
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级联
- en: Neutral Class
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中性类
- en: Two-Phase Predictions
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两阶段预测
- en: Stateless Serving Function
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态服务函数
- en: Windowed Inference
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口推断
- en: Recommendation Systems
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐系统
- en: Recommender systems are one of the most widespread applications of machine learning
    in business and they often arise whenever users interact with items. Recommender
    systems capture features of past behavior and similar users and recommend items
    most relevant for a given user. Think of how YouTube will recommend a series of
    videos for you to watch based on your watch history, or Amazon may recommend purchases
    based on items in your shopping cart. Recommendation systems are popular throughout
    many businesses, particularly for product recommendation, personalized and dynamic
    marketing, and streaming video or music platforms.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统是机器学习在业务中应用最广泛的领域之一，当用户与物品互动时通常会出现。推荐系统捕捉过去行为和类似用户的特征，并推荐对于给定用户最相关的物品。想象一下，YouTube会根据你的观看历史推荐一系列视频，或者亚马逊可能根据购物车中的商品推荐购买。推荐系统在许多企业中非常流行，特别是产品推荐、个性化和动态营销以及流媒体视频或音乐平台。
- en: Embeddings
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入
- en: Ensemble
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成
- en: Multilabel
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多标签
- en: Transfer Learning
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移学习
- en: Feature Store
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征存储
- en: Hashed Feature
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散列特征
- en: Reframing
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构
- en: Transform
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换
- en: Windowed Inference
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口推断
- en: Two-Phase Predictions
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两阶段预测
- en: Neutral Class
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中性类
- en: Multimodal Input
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多模态输入
- en: Batch Serving
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量服务
- en: Fraud and Anomaly Detection
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欺诈和异常检测
- en: Many financial institutions use machine learning for fraud detection to keep
    their consumers’ accounts safe. These machine learning models are trained to flag
    transactions that appear fraudulent based on certain characteristics or patterns
    that have been learned in the data.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 许多金融机构利用机器学习进行欺诈检测，以确保消费者账户的安全。这些机器学习模型经过训练，根据数据中学习到的某些特征或模式来标记可能是欺诈的交易。
- en: More broadly, anomaly detection is a technique used to find abnormal behavior
    or outlier elements in a dataset. Anomalies can arise as spikes or dips that deviate
    from the normal patterns, or they can be longer-term abnormal trends. Anomaly
    detection shows up through many different use cases in machine learning and might
    even be used in conjunction with a separate use case. For example, consider a
    machine learning model that identifies anomalous train tracks based on images.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 更广泛地说，异常检测是一种用于发现数据集中异常行为或离群元素的技术。异常可以表现为偏离正常模式的突增或突降，也可以是较长期的异常趋势。异常检测在机器学习中出现在许多不同的用例中，甚至可能与其他用例一起使用。例如，考虑一个基于图像识别异常火车轨道的机器学习模型。
- en: Rebalancing
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新平衡
- en: Feature Cross
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征交叉
- en: Embeddings
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入
- en: Ensemble
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成
- en: Two-Phase Predictions
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两阶段预测
- en: Transform
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换
- en: Feature Store
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征存储
- en: Cascade
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级联
- en: Neutral Class
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中性类别
- en: Reframing
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新构架
