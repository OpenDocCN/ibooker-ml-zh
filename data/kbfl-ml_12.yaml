- en: Appendix A. Argo Executor Configurations and Trade-Offs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A\. Argo 执行器配置和权衡
- en: 'Until recently, all Kubernetes implementations supported Docker APIs. The initial
    Argo implementation depended on them. With the introduction of [OpenShift 4](https://oreil.ly/bIoqk),
    which doesn’t support the Docker APIs, the situation changed. To support the absence
    of Docker APIs, Argo introduced several new executors: Docker, Kubelet, and Kubernetes
    APIs. The `containerRuntimeExecutor` config value in the Argo parameters file
    controls which executor is used. The pros and cons of each executor (based on
    the information here) are summarized in [Table A-1](#argo_k8s_table). This table
    should help you pick the correct value of the Argo executor.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，所有 Kubernetes 实现都支持 Docker API。最初的 Argo 实现依赖于它们。随着 [OpenShift 4](https://oreil.ly/bIoqk)
    的推出，不再支持 Docker API，情况发生了变化。为了支持没有 Docker API 的情况，Argo 引入了几个新的执行器：Docker、Kubelet
    和 Kubernetes API。在 Argo 参数文件中，`containerRuntimeExecutor` 配置值控制使用哪个执行器。根据这里的信息，每个执行器的优缺点总结在
    [表 A-1](#argo_k8s_table) 中。这张表应该帮助您选择正确的 Argo 执行器值。
- en: Table A-1\. Argo and Kubernetes APIs
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A-1\. Argo 和 Kubernetes API
- en: '| Executor | Docker | Kubelet | Kubernetes API | PNC |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 执行器 | Docker | Kubelet | Kubernetes API | PNC |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Pros | Supports all workflow examples. Most reliable, well tested, very scalable.
    Communicates with Docker daemon for heavy lifting. | Secure. Can’t escape pod’s
    service account privileges. Medium scalability. Log retrieval and container polling
    are done against Kubelet. | Secure. Can’t escape privileges of pod’s service account.
    No extra configuration. | Secure. Can’t escape service account privileges. Artifact
    collection can be done from base image layer. Scalable: process polling is done
    over procfs, not kubelet/k8s API. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 优点 | 支持所有工作流示例。最可靠、经过充分测试，非常可扩展。与 Docker 守护程序进行沟通，用于处理重型任务。 | 安全性高。无法绕过 Pod
    的服务账号权限。中等可扩展性。日志检索和容器轮询针对 Kubelet 执行。 | 安全性高。无法绕过 Pod 的服务账号权限。无需额外配置。 | 安全性高。无法绕过服务账号权限。可以从基础镜像层收集构件。可扩展性强：进程轮询通过
    procfs 完成，而非 kubelet/k8s API。 |'
- en: '| Cons | Least secure. Requires `docker.sock` of host to be mounted (often
    rejected by OPA). | Additional kubelet configuration may be required. Can only
    save params/artifacts in volumes (e.g., `emptyDir`), and not the base image layer
    (e.g., `/tmp`). | Least scalable. Log retrieval and container polling are done
    against k8s API server. Can only save params/artifacts in volumes (e.g., `emptyDir`),
    and not the base image layer (e.g., `/tmp`). | Processes no longer run with pid
    1\. Artifact collection may fail for containers completing too fast. Can’t capture
    artifact directories from base image layer with volume mounted under it. Immature.
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 缺点 | 安全性最低。需要挂载主机的 `docker.sock`（通常被 OPA 拒绝）。 | 可能需要额外的 kubelet 配置。只能在卷（例如
    `emptyDir`）中保存参数/构件，而不能保存基础镜像层（例如 `/tmp`）。 | 可扩展性最低。日志检索和容器轮询针对 k8s API 服务器执行。只能在卷（例如
    `emptyDir`）中保存参数/构件，而不能保存基础镜像层（例如 `/tmp`）。 | 进程不再以 pid 1 运行。对于完成过快的容器，可能会导致构件收集失败。无法从挂载在其下的卷中捕获基础镜像层的构件目录。尚未成熟。
    |'
- en: '| Argo Config | docker | kubelet | k8sapi | pns |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| Argo 配置 | docker | kubelet | k8sapi | pns |'
