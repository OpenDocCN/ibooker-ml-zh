- en: Chapter 7\. Supercharging Your Code Editor with Simple Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章\. 用简单技巧加速您的代码编辑器
- en: There are no shortcuts in life, but there are many in coding.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 生活中没有捷径，但编码中有许多捷径。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Juntao Qiu, developer and author](https://oreil.ly/ZABr2)'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[丘俊涛，开发者和作者](https://oreil.ly/ZABr2)'
- en: Most ML practitioners that we know love to code. Code is our vehicle for transporting
    ideas in our head (“will this feature engineering technique improve the model’s
    performance?”) into reality. In fact, many bemoan the fact that there are too
    many distractions, too many meetings, and not enough time to write code. However,
    when we do get time to code, it’s common to find ourselves wasting valuable time
    on tedious tasks such as manual testing (the focus of Chapters [4](ch04.html#effective_dependency_management_in_prac)
    and [5](ch05.html#automated_testing_move_fast_without_bre)), reading convoluted
    code (the focus of the next chapter), and unproductive coding practices (the focus
    of this chapter).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数我们认识的 ML 从业者喜欢编码。代码是我们头脑中想法的传输工具（“这种特征工程技术能提高模型的性能吗？”），变成现实。事实上，许多人抱怨有太多干扰，太多会议，没有足够的时间写代码。然而，当我们有时间编码时，常见的是我们会浪费宝贵的时间在像手动测试（第[4](ch04.html#effective_dependency_management_in_prac)章的重点）和（第[5](ch05.html#automated_testing_move_fast_without_bre)章的焦点），阅读复杂的代码（下一章的重点），以及无效的编码实践（本章的重点）等单调乏味的任务上。
- en: In this chapter, we will detail how you and your team can spend less time getting
    stuck or even lost in the weeds with unproductive coding practices. We’ll demonstrate
    how your integrated development environment (IDE) can help you to read and write
    code more effectively. An IDE is an application designed to aid developers, data
    scientists, and engineers to write, run, test, and debug code productively. It
    provides development tools such as a source code editor, integrated terminal,
    version control support, virtual environment management, and code suggestions.
    It can also assist you with refactoring toward a better designed and more readable
    codebase (see [Figure 7-1](#an_example_ide)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细介绍您和您的团队如何花更少的时间陷入无效编码实践的困境甚至迷失自我。我们将展示您的集成开发环境（IDE）如何帮助您更有效地阅读和编写代码。IDE
    是一个旨在帮助开发人员、数据科学家和工程师编写、运行、测试和调试代码的应用程序。它提供开发工具，如源代码编辑器、集成终端、版本控制支持、虚拟环境管理和代码建议。它还可以帮助您重构，使代码库设计更好、更可读（参见
    [图 7-1](#an_example_ide)）。
- en: 'To that end, this chapter will cover:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，本章将涵盖：
- en: How to configure your IDE in a few steps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在几步内配置您的 IDE
- en: Useful IDE features such as code completion, suggested fixes, effortless navigation,
    autoformatting, and refactoring
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的 IDE 功能，如代码补全，建议修复，轻松导航，自动格式化和重构
- en: Keyboard shortcuts for IDE features to help you code at the speed of thought
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE 功能的键盘快捷键，帮助您以思维速度编码
- en: '![](assets/emlt_0701.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/emlt_0701.png)'
- en: Figure 7-1\. An example IDE
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1\. 一个示例 IDE
- en: If code is like ocean waves, the techniques covered in this chapter will help
    you ride the waves and get to where you want to go without getting lost in the
    rip tides. Complemented with the refactoring techniques covered in the next chapter,
    you’ll be able to better understand, tame, and improve a complex codebase into
    something that helps, rather than hinders, your team.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码就像海浪一样，本章介绍的技术将帮助您驾驭这些波浪，达到您想要去的地方，而不会在逆流中迷失。配合下一章介绍的重构技术，您将能够更好地理解、驯服和改进复杂的代码库，使其成为有益而不是阻碍团队的东西。
- en: With the advent of generative AI and the rise of AI-assisted coding, tools such
    as [GitHub Copilot](https://oreil.ly/NZnKK) and [Blackbox AI](https://oreil.ly/zMpkt)
    are an increasingly important part of a developer’s toolkit. However, we’ve decided
    to exclude such tools from the exercises in this chapter for two reasons. First,
    there are already [plenty of tutorials](https://oreil.ly/MOq4r) demonstrating
    how you can use tools like GitHub Copilot in Python projects. Second, at the time
    of writing, the creators of GitHub Copilot are facing a [class action lawsuit](https://oreil.ly/XmRcE)
    for training its code-generation model on open source code, many of which are
    [under open source licenses](https://oreil.ly/QUnsy)—e.g., MIT license, Apache
    license, among others—that require attribution of the author’s name and copyright.
    Because the outcome of this lawsuit will affect an organization’s decision to
    use tools such as GitHub Copilot, we didn’t want to couple our book to this factor.
    Furthermore, our experience tells us that even without AI-assisted coding, we
    can still get plenty of mileage from the fundamental IDE techniques that we’ll
    cover in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着生成式人工智能的出现和AI辅助编码的兴起，诸如[GitHub Copilot](https://oreil.ly/NZnKK)和[Blackbox
    AI](https://oreil.ly/zMpkt)等工具正成为开发者工具包中越来越重要的一部分。然而，出于两个原因，我们决定在本章的练习中不包括这类工具。首先，已经有[大量教程](https://oreil.ly/MOq4r)展示了如何在Python项目中使用GitHub
    Copilot等工具。其次，在撰写本文时，GitHub Copilot的创建者正面临[集体诉讼](https://oreil.ly/XmRcE)，因其在开源代码上训练其代码生成模型，其中许多代码受到[开源许可证](https://oreil.ly/QUnsy)（如MIT许可证、Apache许可证等）的约束，这些许可证要求对作者的姓名和版权进行归属。由于这场诉讼的结果将影响组织是否决定使用GitHub
    Copilot等工具，我们不希望将我们的书籍与此因素捆绑在一起。此外，我们的经验告诉我们，即使没有AI辅助编码，我们仍然可以从我们将在本章中涵盖的基本IDE技术中获得大量收益。
- en: With that, let’s dive into our first section—the benefits and surprising simplicity
    of knowing our IDE.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个基础，让我们来探讨我们的第一个部分——了解我们的IDE的好处和令人惊讶的简单性。
- en: The Benefits (and Surprising Simplicity) of Knowing Our IDE
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解我们的IDE的好处（以及惊人的简单性）
- en: In this section, we’ll explore three pitfalls that ML practitioners often experience
    if they don’t properly utilize their IDE while coding. We’ll also highlight four
    ways in which your IDE can help you reason and code better. Finally, we’ll explore
    the barriers and apprehensions that some ML practitioners have regarding this
    practice, and make a case for embracing the full potential of our IDEs to enhance
    productivity and improve flow when building ML solutions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨机器学习从业者在编码时如果不正确使用他们的IDE经常遇到的三个陷阱。我们还将突出显示你的IDE可以帮助你更好地推理和编码的四种方式。最后，我们将探讨一些机器学习从业者在这一实践中遇到的障碍和担忧，并提出支持充分利用我们的IDE的潜力来增强生产力和改进在构建机器学习解决方案时的流程的理由。
- en: Why Should We Care About IDEs?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们要关注IDE呢？
- en: 'We often see ML practitioners using a powerful IDE such as Visual Studio Code
    (VS Code) or PyCharm but using it as if it were Notepad—just for manually typing
    code without using the IDE’s capabilities for suggested fixes, assisted refactoring,
    auto imports, and autoformatting, among others. As a result, their flow is often
    impeded by the following factors:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常看到机器学习从业者使用像Visual Studio Code（VS Code）或PyCharm这样强大的IDE，但他们却把它当成记事本，仅用于手动输入代码，而不利用IDE提供的建议修复、辅助重构、自动导入和自动格式化等功能。因此，他们的工作流常常受到以下因素的阻碍：
- en: Excessive cognitive load
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 过多的认知负荷
- en: They’ll see a screen with many red and amber squiggly lines (or worse, no squiggly
    lines at all, even when there are errors!) because the code editor wasn’t configured
    with the right virtual environment. The IDE is trying to tell them that there
    is an error (e.g., a missing import) on an exact line of code, but they choose
    to ignore it. As a result, they often detect errors much later during runtime—i.e.,
    when they run the code—instead of detecting them while they are coding and accidentally
    introducing errors.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们看到屏幕上出现许多红色和琥珀色的波浪线（或者更糟的是，根本没有波浪线，即使存在错误！），这是因为代码编辑器未配置正确的虚拟环境。IDE试图告诉他们在代码的确切行上存在错误（例如缺少导入），但他们选择忽略它。因此，他们通常在运行时才能检测到错误，而不是在编码过程中检测到并在意外引入错误时检测到错误。
- en: This adds to their cognitive load because they now need to spend time—amidst
    dashes of warnings—figuring out exactly where things went wrong and why. In addition,
    the delayed detection and resolution of errors leads to defects and rework later
    on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这增加了他们的认知负荷，因为现在他们需要花时间——在警告之间——准确地弄清楚事情出了什么问题以及为什么会这样。此外，延迟检测和解决错误会导致后续的缺陷和重做。
- en: Tedious and error-prone refactoring
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 繁琐且易错的重构
- en: When they want to refactor—even for something as simple as a poorly named variable—they
    manually find and replace the variable references, often across multiple files,
    and sometimes accidentally introduce errors because they missed a reference.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们想要进行重构时，甚至是像重新命名变量这样简单的操作，他们都会手动查找和替换变量引用，通常跨多个文件，有时会因为漏掉了某个引用而意外引入错误。
- en: Context switching
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文切换
- en: They often jump between their code editor and web browser, gingerly hopping
    between countless open tabs, to look up documentation and references. For example,
    they might do this to find out how to import a specific function (e.g., what’s
    the syntax for importing `cross_val_score`?), or to know the parameters of a function
    (e.g., what arguments does `cross_val_score()` accept?). The constant screen-toggling
    exposes them to other distractions and further adds to their cognitive load.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 他们经常在他们的代码编辑器和Web浏览器之间切换，小心翼翼地在无数打开的标签间跳转，查找文档和引用。例如，他们可能这样做来查找如何导入特定函数（例如，`cross_val_score`的语法是什么？）或者了解一个函数的参数（例如，`cross_val_score()`接受哪些参数？）。频繁切换屏幕使他们暴露于其他干扰，进一步增加他们的认知负荷。
- en: 'All of these distractions take up valuable cognitive resources and time and
    slow us down in solving the problems that we want to solve. Thankfully, it doesn’t
    have to be this way. Instead, we can make use of the following IDE features to
    help us code effectively:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些干扰都会占用宝贵的认知资源和时间，并减慢我们解决问题的速度。幸运的是，我们可以利用以下IDE功能来帮助我们有效编码：
- en: Code suggestions
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 代码建议
- en: IDEs can provide context-aware code completion suggestions, real-time error
    highlighting, and on-the-fly code fixes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: IDE可以提供上下文感知的代码完成建议、实时错误高亮显示以及即时代码修复。
- en: Refactoring capabilities
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重构能力
- en: IDEs can help you execute your ideas for refactoring, such as rename variable,
    extract variable, extract method, among many others, without requiring you to
    get into the weeds of manipulating characters across multiple files, and potentially
    making a mistake along the way.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: IDE可以帮助您执行重构的想法，比如重命名变量、提取变量、提取方法等，而无需让您深入到跨多个文件操作字符的细节中，并且潜在地在操作过程中犯错。
- en: Code navigation
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 代码导航
- en: You can directly “teleport” to any file, class, function, or variable that you
    have in mind, without needing to traverse files one click at a time. You can also
    zoom in and out of layers of the call stack without getting overwhelmed by countless
    open tabs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接“跳转”到你想要的任何文件、类、函数或变量，而无需一次次点击遍历文件。你还可以在调用堆栈的各个层级间放大或缩小视图，而不会被无数打开的标签所困扰。
- en: Keyboard shortcuts
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘快捷键
- en: With keyboard shortcuts, the IDE becomes an extension of your mind and helps
    you execute ideas at the speed of thought, without the friction of multiple mouse
    clicks and constant scrolling through visual distractions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过键盘快捷键，IDE成为你思维的延伸，帮助你以思考的速度执行想法，而无需多次鼠标点击和不断滚动视觉干扰。
- en: 'The best part is: These are learnable and accessible skills that we can all
    pick up. We learned these powerful IDE features incrementally through our delivery
    work, pair programming, and reading documentation. It’s a low-cost investment
    of a few hours with high returns in the form of reduced cognitive load, greater
    effectiveness, and improved satisfaction.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最棒的部分是：这些都是可以学习和掌握的技能。我们通过交付工作、配对编程和阅读文档逐步学会了这些强大的IDE功能。这是一个低成本的投资，只需花费几个小时，回报是减少认知负荷、提高效率和满意度。
- en: In addition, these skills are portable across various development tools, such
    as local or remote Jupyter Notebook servers, and this is possible for both [VS
    Code](https://oreil.ly/5Gsi3) and [PyCharm](https://oreil.ly/YtjB3). As long as
    IDE integrations for the compute runtime exist, you can apply the practices in
    this chapter regardless of whether you’re developing on your local machine, a
    remote compute instance, GitHub codespaces (both for [VS Code](https://oreil.ly/8NXzC)
    and [PyCharm](https://oreil.ly/BQw7z)), or managed notebook services such as [AWS
    SageMaker Studio](https://oreil.ly/0kXHk).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些技能在各种开发工具中都是可移植的，例如本地或远程Jupyter Notebook服务器，这在[VS Code](https://oreil.ly/5Gsi3)和[PyCharm](https://oreil.ly/YtjB3)中都是可能的。只要计算运行时的IDE集成存在，您可以无论是在本地计算机、远程计算实例、GitHub
    codespaces（[VS Code](https://oreil.ly/8NXzC)和[PyCharm](https://oreil.ly/BQw7z)）还是管理的笔记本服务（例如[AWS
    SageMaker Studio](https://oreil.ly/0kXHk)），都可以应用本章的实践。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There are two things to take note of. First, not all cloud providers offer ways
    to integrate their service with these IDEs. For example, you can [connect PyCharm
    to Google Compute Engine instances](https://oreil.ly/zx3I8), but not to Google
    Colab notebooks (at least not at the time of writing). Second, PyCharm’s Jupyter
    Notebook integration will require a Professional Edition license (we’ll discuss
    this topic in further detail at the end of this chapter).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有两件事需要注意。首先，不是所有的云供应商都提供将其服务与这些IDE集成的方式。例如，你可以[连接PyCharm到Google Compute Engine实例](https://oreil.ly/zx3I8)，但不能连接到Google
    Colab笔记本（至少在撰写本文时是这样的）。其次，PyCharm的Jupyter Notebook集成将需要专业版许可证（我们将在本章末进一步讨论这个主题）。
- en: If IDEs Are So Important, Why Haven’t I Learned About Them Yet?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果IDE这么重要，为什么我还没学到它？
- en: '“Know Your IDE” is a principle from the software engineering world that can
    help ML practitioners be more effective. In fact, it’s so useful that it even
    made it onto the list of [*97 Things Every Programmer Should Know*](https://oreil.ly/ObcVZ).
    However, many ML practitioners neglect this practice for three reasons:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “了解你的IDE”是软件工程领域的一个原则，可以帮助ML从业者更有效地工作。实际上，它非常有用，甚至被列入[*97件每个程序员都应该知道的事情*](https://oreil.ly/ObcVZ)。然而，许多ML从业者因为三个原因而忽视这一实践：
- en: They feel it’s not important (“I want to do ML and solve hard problems, not
    pore over details of IDE configuration and shortcuts”).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们觉得这不重要（“我想做机器学习和解决难题，而不是深入研究IDE配置和快捷方式的细节”）。
- en: All these IDE features can seem overwhelming and scary, and reasonably so since
    this topic is not usually taught in academic programs.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有这些IDE功能看起来可能令人不知所措和害怕，这是可以理解的，因为这个主题通常不在学术课程中教授。
- en: Some may not even know that the IDE can be configured to be a powerful and helpful
    coding assistant!
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些人甚至不知道IDE可以配置成一个强大和有用的编码助手！
- en: 'In the following sections, we’ll demonstrate that knowing your IDE will *speed
    you up, not slow you down*. Imagine you’re heading toward a destination that’s
    20 km away, and you’re given a tool: a bicycle, but it’s not yet properly set
    up. Would you just start walking because assembling the bike is a waste of time,
    or would you invest a few hours assembling the bike and enjoy the velocity and
    the wind in your hair as you ride toward your destination?'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将演示了解你的IDE将*加快你的速度，而不是减慢你的速度*。想象一下，你正朝着一个距离为20公里的目的地前进，你得到了一个工具：一辆自行车，但它还没有正确设置。你会因为组装自行车是浪费时间而选择步行，还是会花几个小时组装自行车，并在骑行时享受速度和风吹过你头发的感觉？
- en: We’ll also demonstrate that it’s simpler than it looks. A new terrain and situation
    can be daunting, but a seasoned guide can help make it less so. We’ll share day-to-day
    IDE practices that we use in our projects—practices that *you* can apply to leverage
    your IDE to achieve more with less effort.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将演示它比看起来要简单。一个新的地形和情境可能令人生畏，但经验丰富的指导可以帮助减轻这种感觉。我们将分享我们在项目中使用的日常IDE实践——这些实践*你*可以应用到你的IDE上，以更少的努力实现更多。
- en: In the past few years, we have paired with many data scientists and ML engineers.
    One bit of feedback that we often receive is that these IDE productivity practices
    helped them reduce the cognitive overhead and allowed them to focus on solving
    the problems they want to solve.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，我们与许多数据科学家和ML工程师合作。我们经常收到的反馈之一是，这些IDE生产力实践帮助他们减少认知负荷，使他们能够专注于解决他们想要解决的问题。
- en: With that, let’s dive in!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，让我们开始吧！
- en: 'The Plan: Getting Productive in Two Stages'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计划：分两个阶段提高生产力
- en: 'In this section, we’ll walk through how you can fully leverage your IDE for
    any Python project in two stages:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细介绍如何在两个阶段内充分利用你的IDE来处理任何Python项目：
- en: 'Configure the IDE for a given project by: (i) creating a virtual environment,
    and (ii) telling the IDE where to find the Python interpreter in the virtual environment.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式配置给定项目的IDE：（i）创建虚拟环境，和（ii）告诉IDE在虚拟环境中找到Python解释器的位置。
- en: Use the IDE and shortcuts (i.e., profit!). Because you’ve told your IDE to use
    the virtual environment you created, it can now make helpful suggestions and execute
    context-aware tasks (e.g., refactoring).
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用IDE和快捷键（即，效益！）。因为你已告诉你的IDE使用你创建的虚拟环境，它现在可以提供建议并执行上下文感知任务（例如，重构）。
- en: This pattern will work regardless of which dependency management tool you use
    (e.g., Poetry, conda, venv). As long as you create a virtual environment for your
    project and tell your IDE where to find the virtual environment, you can benefit
    from these IDE features.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用哪种依赖管理工具（例如Poetry、conda、venv），此模式都将适用。只要为项目创建虚拟环境并告知IDE虚拟环境的位置，您就可以从这些IDE功能中受益。
- en: We recommend that you code along using [the exercise prepared for this chapter](https://oreil.ly/z1XxU).
    As Peter M. Senge once said, “It would be nonsensical to say, ‘I just read a great
    book about bicycle riding—I’ve now learned that.’” Experiential knowledge is more
    fun than conceptual knowledge, and it’ll help you apply what you learn to your
    projects right away.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您在使用[为本章准备的练习](https://oreil.ly/z1XxU)时跟着编码。正如彼得·M·森格曾经说过：“说‘我刚读了一本关于骑自行车的好书——我现在学会了’是毫无意义的。”
    实践知识比概念知识更有趣，它将帮助您立即将所学应用于项目中。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This exercise has been tested on Python 3.10 and 3.11\. If you’re on later versions
    of Python (e.g., Python 3.12) and encounter issues when running `poetry install`,
    please use Python 3.10 or 3.11 instead.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习已在Python 3.10和3.11上测试。如果您使用的是更高版本的Python（例如Python 3.12），并且在运行`poetry install`时遇到问题，请改用Python
    3.10或3.11。
- en: To install and use a specific version of Python, you can refer to [pyenv’s documentation](https://oreil.ly/jtNdz).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装和使用特定版本的Python，您可以参考[pyenv文档](https://oreil.ly/jtNdz)。
- en: 'Note that for Poetry, you’d need to tell Poetry to use the active version of
    Python that you’ve selected using pyenv by running: `poetry config virtualenvs.prefer-active-python
    true`. For more information, see [issue on Poetry](https://oreil.ly/3ac00).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于Poetry，您需要告诉Poetry使用您选择的pyenv的活动版本来运行：通过运行`poetry config virtualenvs.prefer-active-python
    true`。更多信息，请参见[Poetry的问题](https://oreil.ly/3ac00)。
- en: 'Stage 1: Configuring Your IDE'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阶段1：配置您的IDE
- en: In this section, we’ll describe how you can configure your IDE with the virtual
    environment for this project.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将描述如何为此项目配置IDE与虚拟环境。
- en: Install IDE and basic navigation shortcuts
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装IDE和基本导航快捷键
- en: If you haven’t already done so, you can download [PyCharm](https://oreil.ly/wFMf_)
    (either Professional Edition or Community Edition^([1](ch07.html#ch01fn31))) or
    [VS Code](https://oreil.ly/n89Xw) and follow the installation instructions. If
    you have doubts about any of the installation prompts, following the default options
    would be a good start. You may be prompted to restart your computer if you’re
    installing it for the first time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，您可以下载[PyCharm](https://oreil.ly/wFMf_)（专业版或社区版^([1](ch07.html#ch01fn31))）或[VS
    Code](https://oreil.ly/n89Xw)，并按照安装说明操作。如果您对任何安装提示感到疑惑，使用默认选项将是一个良好的起点。如果您首次安装，可能需要重新启动计算机。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Below are some important notation conventions used in this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章节中使用的一些重要符号约定。
- en: '*Mac:*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*Mac：*'
- en: ⇧ Shift
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ⇧ Shift
- en: ⌘ Command
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ⌘ Command
- en: ⌥ Option
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ⌥ Option
- en: Ctrl
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ctrl
- en: '*Windows/Linux:*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*Windows/Linux：*'
- en: ⇧ Shift
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ⇧ Shift
- en: Ctrl
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ctrl
- en: Alt
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alt
- en: If a command has the same shortcuts for all operating systems (OS), we will
    omit the OS in our table. Otherwise, we will indicate the OS.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个命令在所有操作系统（OS）上具有相同的快捷键，则我们将在表格中省略OS。否则，我们将指明OS。
- en: When it’s done installing, open the IDE of your choice. For Windows users, launch
    the IDE as administrator (right-click the IDE icon, run as administrator) because
    you will need admin privileges to install dependencies in the next step.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，请打开您选择的IDE。对于Windows用户，请以管理员身份运行IDE（右键单击IDE图标，以管理员身份运行），因为您需要管理员权限来在下一步中安装依赖项。
- en: In the IDE, warm up with the IDE navigation shortcuts shown in [Table 7-1](#basic_navigation_shortcuts),
    which we’ll use frequently in this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDE中，可以使用我们在[表格 7-1](#basic_navigation_shortcuts)中经常使用的IDE导航快捷键进行热身。
- en: Table 7-1\. Basic navigation shortcuts
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 7-1\. 基本导航快捷键
- en: '| Task | PyCharm | VS Code |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Quickly find any file, action, command, class, symbol, setting, etc. | *Search
    everywhere* ⇧⇧ | *Open command palette* F1 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 快速查找任何文件、动作、命令、类、符号、设置等 | *到处搜索* ⇧⇧ | *打开命令面板* F1 |'
- en: '| Toggle open/close terminal | *View: Terminal* Mac: ⌥ F12'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '| 切换打开/关闭终端 | *查看：终端* Mac: ⌥ F12'
- en: 'Windows/Linux: Alt F12 | *View: Toggle Terminal* Ctrl ` |'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'Windows/Linux: Alt F12 | *查看：切换终端* Ctrl ` |'
- en: '| Toggle open/close file explorer sidebar | *View: Project* Mac: ⌘ 1'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '| 切换打开/关闭文件资源管理器侧边栏 | *查看：项目* Mac: ⌘ 1'
- en: 'Windows/Linux: Alt 1 | *View: Toggle Primary Sidebar Visibility* Mac: ⌘ B'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'Windows/Linux: Alt 1 | *查看：切换主侧边栏可见性* Mac: ⌘ B'
- en: 'Windows/Linux: Ctrl B |'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Windows/Linux：Ctrl B |
- en: Clone code repository
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克隆代码仓库
- en: 'To follow along, clone this chapter’s [code repository](https://oreil.ly/hcioz)
    using the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟进，请使用以下命令克隆本章的[代码仓库](https://oreil.ly/hcioz)：
- en: '[PRE0]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a virtual environment
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个虚拟环境
- en: Open the code repository in an IDE of your choice—either PyCharm or VS Code.
    When prompted about setting up the Poetry environment, you can ignore or cancel
    it because we will install it using our go script in the next step.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在您选择的IDE中打开代码仓库，可以是PyCharm或VS Code。在提示设置Poetry环境时，您可以忽略或取消，因为我们将在下一步中使用我们的go脚本安装它。
- en: 'Next, readers working on a Mac or Linux machine can open the IDE’s terminal
    (see shortcut in [Table 7-1](#basic_navigation_shortcuts)) and run the following
    command to create the virtual environment for this project. This step will install
    the virtual environment on the host—i.e., outside of the Docker container (we’ll
    explain why we do this in a sidebar just before this chapter’s conclusion):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Mac或Linux上的读者可以打开IDE的终端（在[表7-1](#basic_navigation_shortcuts)中有快捷方式），并运行以下命令来为该项目创建虚拟环境。此步骤将在主机上安装虚拟环境，即在Docker容器外部（我们将在本章结尾前的侧栏中解释为什么这样做）：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Windows users should follow these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户应按照以下步骤操作：
- en: Download and install [Python3](https://oreil.ly/U9ML-) if not already installed.
    During installation, when prompted, select Add Python to PATH.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未安装，请下载并安装[Python3](https://oreil.ly/U9ML-)。在安装过程中，当提示时，请选择将Python添加到PATH。
- en: In Windows explorer/search, go to Manage App Execution Aliases and turn off
    App Installer for Python. This resolves the issue where the `python` executable
    is not found in the PATH.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows资源管理器/搜索中，转到“管理应用程序执行别名”，并关闭Python的应用程序安装程序。这将解决在路径中找不到`python`可执行文件的问题。
- en: 'Run the following go script in the PowerShell or command prompt terminal:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PowerShell或命令提示符终端中运行以下go脚本：
- en: '[PRE2]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you see an HTTPSConnectionPool `read timed out` error, just run this command
    a few more times until `poetry install` succeeds.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果出现HTTPSConnectionPool `read timed out`错误，请多运行几次该命令，直到`poetry install`成功为止。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows users, this exercise has been tested on Windows 10\. If you encounter
    any issues running the commands on Windows Powershell or Command Prompt, please
    install the Windows Subsystem for Linux (WSL) (see [installation steps](https://oreil.ly/wHrmJ))
    and use the Linux go script to follow along in this chapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，此练习已在Windows 10上进行了测试。如果在Windows Powershell或命令提示符上运行命令时遇到任何问题，请安装Windows子系统Linux（WSL）（参见[安装步骤](https://oreil.ly/wHrmJ)），并使用Linux的go脚本来跟进本章内容。
- en: This should take a few minutes to complete if you’re running it for the first
    time. When the go script completes successfully, it will print the path to the
    Python interpreter, which we will use in the next step.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次运行，这将需要几分钟时间完成。当go脚本成功完成时，它将打印Python解释器的路径，我们将在下一步中使用它。
- en: 'Configure virtual environment: PyCharm'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置虚拟环境：PyCharm
- en: 'PyCharm’s official documentation on [how to configure a virtual environment](https://oreil.ly/M67G9)
    is brief and easy to follow:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm关于[如何配置虚拟环境](https://oreil.ly/M67G9)的官方文档简短且易于理解：
- en: On the bottom right of the screen, click the [Python Interpreter tab](https://oreil.ly/fyYpR)
    and choose Add Interpreter (see [Figure 7-2](#on_the_bottom_right_of_pycharmcomma_cli)).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕右下角，点击[Python Interpreter选项卡](https://oreil.ly/fyYpR)，然后选择添加解释器（参见[图7-2](#on_the_bottom_right_of_pycharmcomma_cli)）。
- en: In the left-hand pane of the Add Python Interpreter pop-up dialog, select Virtualenv
    Environment, and select Existing environment since you have already created your
    virtual environment when running the go script.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加Python解释器”弹出对话框的左侧窗格中，选择Virtualenv环境，并选择“已有环境”，因为在运行go脚本时已创建了虚拟环境。
- en: Choose the desired interpreter from the list. If the desired interpreter is
    not on the list, click on the ellipsis (...), and paste the path printed at the
    end of the go script (see [Figure 7-3](#how_to_configure_pycharm_to_use_the_vir)).
    You can also obtain this interpreter path by running `echo "$(poetry env info
    -p)/bin/python"`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择所需的解释器。如果所需的解释器不在列表中，请单击省略号(...)，并粘贴go脚本末尾打印的路径（参见[图7-3](#how_to_configure_pycharm_to_use_the_vir)）。您也可以通过运行`echo
    "$(poetry env info -p)/bin/python"`获取此解释器路径。
- en: Click OK to complete the setup.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击OK以完成设置。
- en: '![](assets/emlt_0702.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/emlt_0702.png)'
- en: Figure 7-2\. On the bottom right of PyCharm, click on the interpreter tab and
    select Python Interpreter
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-2\. 在PyCharm右下角，点击解释器选项卡，选择Python解释器。
- en: '![](assets/emlt_0703.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/emlt_0703.png)'
- en: Figure 7-3\. How to configure PyCharm to use the virtual environment for this
    project
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-3\. 如何配置 PyCharm 使用此项目的虚拟环境
- en: For PyCharm users, there is a final step to mark our *./src* directory as the
    Sources Root directory, so that we can use all of the IDE features (e.g., auto
    import, get parameter information) on our own source code (see [Figure 7-4](#steps_to_mark_dotsolidussrc_directory_a)).
    To do that, right-click the src directory, click on Mark Directory As, and select
    Sources Root. (We don’t recommend it, but if you want to get into the rabbit hole
    of why PyCharm doesn’t support editable packages, you can see [this open issue](https://oreil.ly/HuaEo).)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PyCharm 用户，还有一个最后的步骤，将我们的 *./src* 目录标记为源代码根目录，这样我们可以在自己的源代码上使用所有 IDE 功能（例如自动导入、获取参数信息）（见
    [图 7-4](#steps_to_mark_dotsolidussrc_directory_a)）。为此，请右键单击 src 目录，然后单击“标记为目录”，选择“源代码根目录”（我们不建议这样做，但如果您想深入了解为什么
    PyCharm 不支持可编辑包，您可以查看 [此开放问题](https://oreil.ly/HuaEo)）。
- en: '![](assets/emlt_0704.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/emlt_0704.png)'
- en: Figure 7-4\. Steps to mark ./src directory as Sources Root in PyCharm
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-4\. 在 PyCharm 中将 ./src 目录标记为源代码根目录的步骤
- en: 'Configure virtual environment: VS Code'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置虚拟环境：VS Code
- en: 'If you haven’t already done so, install the official VS Code Python extension
    ([ms-python.python](https://oreil.ly/sIyf2)):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未安装，请安装官方的 VS Code Python 扩展 ([ms-python.python](https://oreil.ly/sIyf2))：
- en: Open the command palette (F1).
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令面板（F1）。
- en: Search for “Install extensions”.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索“安装扩展”。
- en: On the left pane, search for “ms-python.python” and install it.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中搜索“ms-python.python”，然后安装它。
- en: 'VS Code’s official documentation on [how to configure a virtual environment](https://oreil.ly/ens06)
    is also brief and easy to follow:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 的官方文档关于[如何配置虚拟环境](https://oreil.ly/ens06)也很简明扼要，易于理解：
- en: 'Select and activate the virtual environment. Open command palette (F1), type
    “Python: Select Interpreter”.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '选择并激活虚拟环境。打开命令面板（F1），输入“Python: Select Interpreter”。'
- en: 'The *Python: Select Interpreter* command displays a list of available Python
    environments. You can select the one for this project (`ide-productivity-tutorial-xxx`).
    If you don’t see that option, you can also copy and paste the full path printed
    at the end of the go script (see [Figure 7-5](#how_to_configure_vs_code_to_use_the_vir)).'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Python: Select Interpreter* 命令显示可用的 Python 环境列表。您可以选择此项目的那个 (`ide-productivity-tutorial-xxx`)。如果您找不到该选项，还可以复制并粘贴
    go 脚本末尾打印的完整路径（见 [图 7-5](#how_to_configure_vs_code_to_use_the_vir)）。'
- en: '![](assets/emlt_0705.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/emlt_0705.png)'
- en: Figure 7-5\. How to configure VS Code to use the virtual environment for this
    project
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-5\. 如何配置 VS Code 使用此项目的虚拟环境
- en: After you’ve done this, the editor will know about the Python virtual environment
    and all the dependencies you’ve installed in your project, and it can become your
    helpful assistant. Open any Python file in this project and you should see your
    virtual environment in the bottom right of your screen (see [Figure 7-6](#the_bottom_right_of_your_ide_will_indic)).
    Depending on when you are reading this book and what version of the IDE you’re
    using, the preceding list of instructions may differ slightly. If ever you get
    stuck, the official documentation—referenced earlier—is always a trusty friend
    with up-to-date information.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，编辑器将了解 Python 虚拟环境及您项目中安装的所有依赖项，并可成为您的助手。在项目中打开任何 Python 文件，您应该能在屏幕右下角看到您的虚拟环境（见
    [图 7-6](#the_bottom_right_of_your_ide_will_indic)）。根据您阅读本书的时间和使用的 IDE 版本，前述说明可能略有不同。如果遇到困难，请随时查阅官方文档——前面已提及它始终是一个值得信赖的朋友，提供最新的信息。
- en: '![](assets/emlt_0706.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/emlt_0706.png)'
- en: Figure 7-6\. The bottom right of your IDE will indicate the virtual environment
    it has been configured to use
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-6\. IDE 右下角将指示配置的虚拟环境
- en: Testing that we’ve configured everything correctly
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试我们是否正确配置了一切
- en: 'As a smoke test to check if we’ve configured the Python interpreter correctly,
    let’s do our first warm-up exercise:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 作为冒烟测试，检查我们是否正确配置了 Python 解释器，让我们进行第一个热身练习：
- en: 'Navigate to *src/ide_productivity/0_hello_ide.py*. Notice the squiggly warning
    line below the reference to `np (numpy)`? Hover over it and the IDE will tell
    us the issue: We have a missing import!'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 *src/ide_productivity/0_hello_ide.py*。注意引用`np (numpy)`下面的波浪警告线？将鼠标悬停在上面，IDE将告诉我们问题所在：缺少导入！
- en: Resolve this by placing your cursor on `np` and hitting the auto-fix shortcut.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标放在 `np` 上，然后按下自动修复快捷键来解决此问题。
- en: 'For PyCharm:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 PyCharm：
- en: 'Mac: ⌥ Enter'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Mac: ⌥ Enter'
- en: 'Windows/Linux: Alt Enter'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows/Linux: Alt Enter'
- en: 'For VS Code:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 VS Code：
- en: 'Mac: ⌘ .'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac：⌘ .
- en: 'Windows/Linux: Ctrl .'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows/Linux：Ctrl .
- en: You’ll see a suggestion to fix this by importing numpy. If you don’t see the
    suggestion, wait a few moments and try again (the virtual environment is a big
    directory!). Hit Enter to accept the suggestion, and you’ll see the issue is fixed.
    Thanks IDE!
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到建议通过导入 numpy 来修复这个问题。如果没有看到建议，请稍等片刻再试一次（虚拟环境是一个大目录！）。按 Enter 键接受建议，你会看到问题已经解决。谢谢
    IDE！
- en: 'Finally, you can test that the issue has been fixed by running the script in
    the project’s virtual environment:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以通过在项目的虚拟环境中运行脚本来测试问题是否已解决：
- en: '[PRE3]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And that’s it! Now the IDE can help you with many tasks, which we’ll explore
    in the following section.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在 IDE 可以帮助您完成许多任务，我们将在下一节中探讨这些任务。
- en: 'Stage 2: The Star of the Show—Keyboard Shortcuts'
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二阶段：明星亮相——键盘快捷键
- en: This is the best part of the chapter. You’ve spent a few minutes doing some
    fairly mundane work to configure your IDE properly and now it’s time to get a
    return on your investment.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章的精华部分。您花了几分钟时间进行一些相当乏味的工作，以正确配置您的 IDE，现在是时候获得投资回报了。
- en: For the exercises in this section, we encourage you to read the code sample,
    try each shortcut, run the code in the terminal (*python src/ide_productivity/name_of_file.py*),
    and verify that you’ve completed the exercise. You can subsequently apply these
    skills in your own projects. Have fun!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的练习中，我们鼓励您阅读代码示例，尝试每个快捷键，在终端中运行代码（*python src/ide_productivity/name_of_file.py*），并验证您是否已完成练习。随后，您可以在自己的项目中应用这些技能。祝您玩得开心！
- en: Coding
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编码
- en: Let’s see how the IDE can help you with code completion suggestions, inline
    documentation, suggested fixes, and linting, among other tasks. Code along in
    *src/ide​_pro⁠ductivity/1_intellisense.py* for this section*.*
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 看看 IDE 如何帮助您完成代码建议、内联文档、建议修复和 linting 等任务。在本节的 *src/ide_productivity/1_intellisense.py*
    中跟着做吧！
- en: Code completion suggestions
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码完成建议
- en: PyCharm calls this [code completion](https://oreil.ly/Uaam0) and VS Code calls
    it [IntelliSense](https://oreil.ly/0Oc2g). They both refer to the IDE’s ability
    to make code suggestions (e.g., methods that you can call, parameters that you
    can pass in) that are reachable from the current caret position (see [Table 7-2](#code_completion_shortcut)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 称之为 [代码完成](https://oreil.ly/Uaam0)，而 VS Code 称之为 [IntelliSense](https://oreil.ly/0Oc2g)。它们都指的是
    IDE 提供的能力，可以提供代码建议（例如可以调用的方法，可以传递的参数），这些建议可以从当前插入符位置到达（参见 [表 7-2](#code_completion_shortcut)）。
- en: Note
  id: totrans-148
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember, we’ll only note each shortcut once if it’s the same for both PyCharm
    and VS Code.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果 PyCharm 和 VS Code 的快捷方式相同，我们只会提及每个快捷方式一次。
- en: Table 7-2\. Code completion shortcut
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-2\. 代码完成快捷键
- en: '| Task | PyCharm | VS Code |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Code completion / IntelliSense | Ctrl Space |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 代码完成 / IntelliSense | Ctrl Space |'
- en: Try it out in [Exercise 7-1](#example_ch07_1708021952941).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [练习 7-1](#example_ch07_1708021952941) 中试一下。
- en: Example 7-1\. Calculate the mean age of passengers
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-1\. 计算乘客的平均年龄
- en: 'Task: Put a dot (.) after the series, and you can browse through a list of
    Series methods that you could use to calculate the mean for the series. If you
    miss the suggestion, you can trigger the suggestions again using the shortcut
    (Ctrl Space).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 任务：在系列后面加上一个点（.），然后您可以浏览可用于计算系列均值的系列方法列表。如果您错过了建议，您可以使用快捷键（Ctrl Space）再次触发建议。
- en: '[PRE4]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inline documentation / parameter information
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内联文档 / 参数信息
- en: 'When we’re coding, we often wonder things like: What arguments or keyword arguments
    does this function (e.g., `df.astype()`) accept? The shortcuts in [Table 7-3](#inline_documentation_solidus_parameter)
    help you get answers to those questions right in your IDE, so that you don’t have
    to toggle between windows and get lost in open browser tabs.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编码时，我们经常会想知道像这样的函数接受什么参数或关键字参数（例如 `df.astype()`）。[表 7-3](#inline_documentation_solidus_parameter)
    中的快捷键帮助您在 IDE 中获得这些问题的答案，这样您就无需在窗口之间切换并迷失在打开的浏览器选项卡中。
- en: Table 7-3\. Inline documentation / parameter information
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-3\. 内联文档 / 参数信息
- en: '| Task | PyCharm | VS Code |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Load documentation for a function | *Quick documentation* Mac: F1'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '| 加载函数的文档 | *快速文档* Mac：F1'
- en: 'Windows/Linux: Ctrl Q | *Definition preview hover* Hover mouse over any method
    name. If you don’t see any helpful suggestions, add a type hint (e.g., `df: pd.DataFrame`).
    |'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'Windows/Linux：Ctrl Q | *定义预览悬停* 将鼠标悬停在任何方法名称上。如果没有看到有用的建议，请添加类型提示（例如 `df: pd.DataFrame`）。
    |'
- en: '| Get information on parameters of a function | *Parameter information* Mac:
    ⌘ P'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取函数参数信息 | *参数信息* Mac：⌘ P'
- en: 'Windows/Linux: Ctrl P | *Trigger parameter hints* Mac: ⇧ ⌘ Space'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Windows/Linux：Ctrl P | *触发参数提示* Mac：⇧ ⌘ Space
- en: 'Windows/Linux: ⇧ Ctrl Space |'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Windows/Linux：⇧ Ctrl Space |
- en: Try it out in [Exercise 7-2](#example_ch07_1708022983624).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Exercise 7-2](#example_ch07_1708022983624)中试一试。
- en: Example 7-2\. Convert the age column to integers
  id: totrans-169
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 7-2\. 将年龄列转换为整数
- en: 'Task 1: Place your cursor on the function `astype()` and hit the shortcut for
    Quick Documentation. Can you scroll through and see documentation and examples
    on how you can convert data types?'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 任务1：将光标放在函数`astype()`上，然后按快捷键快速查看文档。你能浏览并查看如何转换数据类型的文档和示例吗？
- en: 'Task 2: Place your cursor on the parenthesis of `astype()` and hit the shortcut
    for Parameter Hints. Can you identify the first parameter that this function accepts?'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 任务2：将光标放在`astype()`的括号上，然后按快捷键显示参数提示。你能识别这个函数接受的第一个参数吗？
- en: '[PRE5]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Auto-fix suggestions
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自动修复建议
- en: One of the most powerful and useful shortcuts is for auto-fixing warnings and
    errors.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 自动修复警告和错误的最强大和有用的快捷键之一。
- en: For example, perhaps we’re following a tutorial or documentation and the authors
    have neglected to include the import statement for a function (e.g., `cross_val_score()`).
    The IDE will flag a missing import as an error and, as the next exercise will
    demonstrate, the shortcut shown in [Table 7-4](#auto_fix_suggestions) can help
    you fix such errors—and other errors—easily.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，也许我们正在遵循一个教程或文档，作者忘记包含函数的导入语句（例如，`cross_val_score()`）。IDE将缺少的导入标记为错误，并且正如下一个练习将展示的那样，[Table 7-4](#auto_fix_suggestions)中显示的快捷键可以帮助你轻松修复这类错误——以及其他错误。
- en: Table 7-4\. Auto-fix suggestions
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Table 7-4\. 自动修复建议
- en: '| Task | PyCharm | VS Code |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Get suggestions for auto-fixing warnings and errors | *Show intention actions*
    Mac: ⌥ Enter'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取自动修复警告和错误建议 | *显示意图操作* Mac：⌥ Enter'
- en: 'Windows/Linux: Alt Enter | *Quick fix* Mac: ⌘ .'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Windows/Linux：Alt Enter | *快速修复* Mac：⌘ .
- en: 'Windows/Linux: Ctrl . |'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Windows/Linux：Ctrl . |
- en: Try it out in [Exercise 7-3](#example_ch07_1708023395550).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Exercise 7-3](#example_ch07_1708023395550)中试一试。
- en: Example 7-3\. Auto-fix (missing import)
  id: totrans-183
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 7-3\. 自动修复（缺少导入）
- en: 'Task: Hover over the squiggly line to see the error (undefined variable) and
    use the auto-fix shortcut to fix the error.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 任务：悬停在波浪线下方以查看错误（未定义的变量），并使用自动修复快捷方式修复错误。
- en: '[PRE6]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: While this auto-fix feature is useful, it goes without saying that we shouldn’t
    accept the IDE’s suggestions thoughtlessly. Always double-check auto-fix updates
    before accepting them and—as with all code changes—run automated tests to validate
    the code change.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个自动修复功能很有用，但我们无需毫无思考地接受IDE的建议。在接受自动修复更新之前，始终要仔细检查，并且——与所有代码更改一样——运行自动化测试来验证代码更改。
- en: Linting
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linting
- en: Linters help you check for errors, enforce a coding standard, identify problematic
    [code smells](https://oreil.ly/Xu_Rh), and even make refactoring suggestions.^([2](ch07.html#ch01fn32))
    Linters analyze your code without actually running it—that’s why linting is also
    referred to as “static analysis”—and can help you detect issues and errors, even
    while you are coding.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Linters帮助你检查错误，强制执行编码标准，识别问题的[代码异味](https://oreil.ly/Xu_Rh)，甚至提出重构建议。^([2](ch07.html#ch01fn32))
    Linters分析你的代码而不实际运行它——这就是为什么linting也被称为“静态分析”——甚至可以在你编码时帮助你检测问题和错误。
- en: When you and your teammates are coding, the linter can tell you, “There’s an
    error here! You’ve passed the wrong type of arguments to this function”—helping
    you catch bugs even as you are coding.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当你和你的队友编写代码时，linter可以告诉你，“这里有一个错误！你给这个函数传递了错误类型的参数”——帮助你在编码过程中捕捉错误。
- en: For this exercise to make sense, try the task both before *and* after enabling
    linting (see [Table 7-5](#linting-id00022)), and you’ll notice how the linter
    helps you detect an error in `greet()`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这个练习有意义，在启用linting之前*和*之后尝试这个任务（参见[Table 7-5](#linting-id00022)），你会注意到linter如何帮助你检测`greet()`中的错误。
- en: Table 7-5\. Linting
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Table 7-5\. Linting
- en: '| Task | PyCharm | VS Code |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Enable lintingYou can see the linter’s warnings by either:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '| 启用linting您可以通过以下方式查看linter的警告：'
- en: Clicking on the “Problems” tab near the IDE’s terminal
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击IDE终端附近的“Problems”选项卡
- en: Hovering over code with amber/red highlights
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在带有琥珀色/红色高亮的代码上悬停
- en: '| No action needed.PyCharm’s default linter is automatically enabled when you
    configure the virtual environment. | At the time of writing, VS Code recommends
    configuring via VS Code extensions.To install the linter extension, which we specified
    in *.vscode/extensions.json*, open your command palette (F1) and search for “Extensions:
    Configure Recommended Extensions”.Install the recommended extensions (in this
    case, [pylint](https://oreil.ly/SGToK)) if it’s not yet installed. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 无需操作。在配置虚拟环境时，PyCharm会自动启用默认的linter。 | 在撰写本文时，VS Code建议通过VS Code扩展进行配置。要安装我们在
    *.vscode/extensions.json* 中指定的linter扩展，请打开命令面板（F1），搜索“Extensions: Configure Recommended
    Extensions”。如果尚未安装建议的扩展（例如，[pylint](https://oreil.ly/SGToK)），请进行安装。 |'
- en: '| Go to next error | F2 | F8 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 转到下一个错误 | F2 | F8 |'
- en: Try it out in [Exercise 7-4](#example_ch07_1708023530497).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [练习 7-4](#example_ch07_1708023530497) 中尝试一下。
- en: Example 7-4\. Linting
  id: totrans-200
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-4\. 代码检查
- en: 'Task: Uncomment the last line. Notice the linter’s warning for `greet()`? Can
    you read the error by hovering the warning line and find a fix?'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 任务：取消对最后一行的注释。注意`greet()`的linter警告？您能通过悬停在警告行上并找到解决方法来阅读错误吗？
- en: '[PRE7]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Move/copy lines
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移动/复制行
- en: The shortcuts in [Table 7-6](#move_solidus_copy_lines-id00026) are helpful when
    you need to move or copy lines or blocks of code.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要移动或复制行或代码块时，[表 7-6](#move_solidus_copy_lines-id00026) 中的快捷键非常有用。
- en: Table 7-6\. Move/copy lines
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-6\. 移动/复制行
- en: '| Task | PyCharm | VS Code |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Move selection up/down | Mac: ⇧ ⌥ up/down Windows/Linux: ⇧ Alt up/down |
    Mac: ⌥ up/down Windows/Linux: Alt up/down |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| 上/下移动选择 | Mac: ⇧ ⌥ 上/下 Windows/Linux: ⇧ Alt 上/下 | Mac: ⌥ 上/下 Windows/Linux:
    Alt 上/下 |'
- en: '| Duplicate selection up/down | Mac: ⌘ D Windows/Linux: Ctrl D | Mac: ⇧ ⌥ up/down
    Windows/Linux: ⇧ Alt up/down |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| 选择上/下重复项 | Mac: ⌘ D Windows/Linux: Ctrl D | Mac: ⇧ ⌥ 上/下 Windows/Linux: ⇧
    Alt 上/下 |'
- en: '| Select next occurrence | Mac: Ctrl G Windows/Linux: Alt J | Mac: ⌘ D Windows/Linux:
    Ctrl D |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 选择下一个出现项 | Mac: Ctrl G Windows/Linux: Alt J | Mac: ⌘ D Windows/Linux: Ctrl
    D |'
- en: Now that we’ve covered the basics of how your IDE can help you with coding (e.g.,
    code completion suggestions, inline documentation, suggested fixes, linting),
    let’s look at how it can help you with formatting.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了IDE如何帮助您编写代码的基础知识（例如，代码完成建议、内联文档、建议修复、代码检查），让我们来看看它如何帮助您进行格式化。
- en: Formatting
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式化
- en: In this section, we will go through IDE features that help team members maintain
    a consistent code formatting. You can code along in *src/ide_productivity/2_formatting.py.*
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍帮助团队成员保持一致代码格式的IDE功能。您可以在 *src/ide_productivity/2_formatting.py* 中进行代码编写。
- en: Reformat code
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重新格式化代码
- en: Have you ever had to manually fix the formatting (e.g., indentation, or extra/missing
    spaces) for 10 lines of code? Was it tedious? How about 200 lines of code? Or
    have you ever bit your lip during a pull request review even though the code was
    very hard to read due to inconsistent formatting?
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否曾经不得不手动修复10行代码的格式（例如，缩进或额外/缺少空格）？这样做是不是很烦琐？那么200行呢？或者您是否曾因格式不一致而在拉取请求审查期间强忍着？
- en: 'Implementing consistent and automated formatting from the get-go prevents git
    commits or pull requests from being polluted by irrelevant formatting changes.
    Here are some real-world scenarios that you may have encountered:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始实施一致且自动化的格式化可以防止git提交或拉取请求因不相关的格式更改而混乱。以下是您可能遇到的一些真实场景：
- en: One teammate, who has properly set up a formatter, just wants to change one
    line of code but ends up creating a pull request that has 10s or 100s of lines
    of unrelated formatting changes.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个团队成员，已经正确设置格式化程序，只想更改一行代码，结果却创建了一个包含数十行或数百行无关格式更改的拉取请求。
- en: Two teammates, who had set up different formatters (e.g., black and autopep8),
    and their commits keep undoing what the other person did. This leads to frequent
    merge conflicts that take time to fix.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两位团队成员分别设置了不同的格式化程序（例如，black 和 autopep8），他们的提交一直在撤销彼此的工作。这导致频繁的合并冲突，需要时间来解决。
- en: Formatting configuration and shortcuts can help you avoid such annoyances and
    distractions by enabling your team to apply consistent formatting with just one
    shortcut.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过格式化配置和快捷键可以帮助您避免此类麻烦和分散注意力，使团队只需一个快捷键即可应用一致的格式化。
- en: 'To further verify your team is using the same formatter and configuration,
    the [pre-commit hooks](https://oreil.ly/-sIkl) and CI pipeline can include a step—e.g.,
    `black --check .`—to check if the code is properly formatted. In this project,
    we’ve set up git hooks using [lefthook](https://oreil.ly/-sIkl). We installed
    lefthook and the git hooks in the go script, and specified what hooks to run in
    *lefthook.yml*. We’ve specified two pre-commit hooks: one for linting and one
    for checking formatting. You can see them in action by making a commit—you’d see
    the git hook checking if all local files (both committed and uncommitted changes)
    are consistent with linting and formatting rules.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步验证团队是否使用相同的格式化程序和配置，[pre-commit hooks](https://oreil.ly/-sIkl) 和 CI pipeline
    可以包含一个步骤——例如 `black --check .`——来检查代码是否正确格式化。在这个项目中，我们使用 [lefthook](https://oreil.ly/-sIkl)
    设置了 git hooks。我们在 go 脚本中安装了 lefthook 和 git hooks，并在 *lefthook.yml* 中指定要运行的钩子。我们指定了两个
    pre-commit 钩子：一个用于 linting，一个用于检查格式。你可以通过进行提交来看它们的实际效果——git hook 会检查所有本地文件（已提交和未提交的更改），以确保它们符合
    linting 和格式化规则。
- en: Example 7-5\. Fix code formatting and organize imports
  id: totrans-221
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-5. 修复代码格式和整理导入
- en: 'Task 1: Notice the formatting inconsistencies (e.g., mixed single and double
    quotes, mixed indentation)? Hit the shortcut to format the code. Notice how the
    code style is now consistent (e.g., no more mix of single quotes and double quotes)?'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 任务 1：注意格式不一致（例如混合使用单引号和双引号、混合缩进）？使用快捷键格式化代码。注意代码风格现在是一致的（例如不再混合使用单引号和双引号）？
- en: 'Task 2: Notice the unused imports at the top? Hit the shortcut to organize
    imports, and notice the imports are now tidy.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 任务 2：注意顶部未使用的导入？使用快捷键整理导入，注意导入现在是整洁的。
- en: Note
  id: totrans-224
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For VS Code users, after you’ve gone through the steps to select a linter, you’ll
    see changes like this in *.vscode/settings.json:*
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 VS Code 用户，在选择了 linter 后，你会在 *.vscode/settings.json* 中看到类似这样的变化：
- en: '[PRE8]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It’s a good habit to commit and check in this setting so that the team shares
    the same configuration for linting, formatting, and so on. Checking in a shared
    configuration is better than manual configuration using [click-ops](https://oreil.ly/f9FDF)—an
    operations task that is accomplished by clicking on a GUI instead of reproducible,
    “as-code” automation. That is because while things may work on your machine now,
    it will be tedious to replicate what you’ve got working for your teammates and
    it will be hard to create team alignment. Doing this helps to prevent these minor
    differences from becoming major distractions during code reviews.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种设置中，承诺并检查是一个好习惯，以便团队共享相同的配置进行代码检查、格式化等操作。将共享配置提交更胜于使用[click-ops](https://oreil.ly/f9FDF)手动配置——这是通过点击
    GUI 完成的运维任务，而非可复制的“如代码”自动化。这是因为虽然现在你的机器上可能运行正常，但复制这些工作给你的队友将变得乏味，并且很难达成团队一致。这样做有助于防止这些小差异在代码审查过程中成为重大干扰。
- en: 'Next, let’s look at how the IDE can help us develop an essential habit that
    every team needs in order to maintain a readable and healthy codebase: refactoring!'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 IDE 如何帮助我们养成每个团队在维护可读性和健康代码库中都需要的基本习惯：重构！
- en: Refactoring
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重构
- en: In this section, we’ll go through the IDE features that help you refactor effortlessly.
    Refactoring is the act of restructuring code in a way that improves readability,
    clarity, and maintainability without altering its functionality. It’s important
    to note that refactoring without tests is a very risky undertaking, and in the
    next chapter we’ll describe how you can use characterization tests to create a
    safety harness before refactoring.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍 IDE 功能，帮助你轻松进行重构。重构是以一种改善代码可读性、清晰度和可维护性的方式重组代码，而不改变其功能。需要注意的是，没有测试的重构是非常危险的，下一章中我们将描述如何使用特性测试来创建重构前的安全保护。
- en: You can code along in *src/ide_productivity/3_refactoring.py.*
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *src/ide_productivity/3_refactoring.py* 中进行代码编写。
- en: Rename variable
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重命名变量
- en: The “rename variable” shortcut (see [Table 7-8](#rename_variable)) allows you
    to easily rename poorly named variables (e.g., `_new_df`). The IDE will automatically
    rename all references to the variable, even across multiple files. In [Chapter 8](ch08.html#refactoring_and_technical_debt_manageme),
    we will illustrate the cumulative benefit of something as simple as a sensible
    variable name.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: “重命名变量”快捷键（见[表 7-8](#rename_variable)）允许你轻松重命名命名不规范的变量（例如 `_new_df`）。IDE 将自动重命名所有对该变量的引用，甚至跨多个文件。在[第 8 章](ch08.html#refactoring_and_technical_debt_manageme)中，我们将演示合理的变量命名所带来的累积效益。
- en: When refactoring becomes hard and error-prone, the result is that team members
    fear refactoring, leading to an accumulating complexity in the codebase. Thankfully,
    this shortcut makes it easy for you to rename variables, functions, methods, and
    classes. In PyCharm, you can even rename files and modules and PyCharm will automatically
    update all references to the module name (e.g., in import statements).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当重构变得困难且容易出错时，结果是团队成员害怕重构，导致代码库中复杂性逐渐增加。幸运的是，这个快捷键使得重命名变量、函数、方法和类变得容易。在 PyCharm
    中，您甚至可以重命名文件和模块，并且 PyCharm 将自动更新对模块名称的所有引用（例如，在导入语句中）。
- en: Table 7-8\. Rename variable
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-8\. 重命名变量
- en: '| Task | PyCharm | VS Code |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Rename variable | ⇧ F6 | F2 |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 重命名变量 | ⇧ F6 | F2 |'
- en: Try it out in [Exercise 7-6](#example_ch07_1708023795699).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [练习 7-6](#example_ch07_1708023795699) 中试一试。
- en: Example 7-6\. Rename variable
  id: totrans-240
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-6\. 重命名变量
- en: 'Task 1: Rename `df` to something more meaningful (e.g., `passengers`).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '任务 1: 将 `df` 重命名为更有意义的东西（例如 `passengers`）。'
- en: 'Task 2: Rename `do_something()` to something else (e.g., `greet()`). Notice
    how all references to that method have been renamed (see `src/helpers.py`)?'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '任务 2: 将 `do_something()` 重命名为其他名称（例如 `greet()`）。注意看所有对该方法的引用都已重命名（见 `src/helpers.py`）？'
- en: Extract variable/method/function
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提取变量/方法/函数
- en: These shortcuts (see [Table 7-9](#extract_variable_solidus_method_solidus))
    help you to easily execute common refactoring techniques that will make your code
    more readable and maintainable.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这些快捷键（参见 [表 7-9](#extract_variable_solidus_method_solidus)）帮助您轻松执行常见的重构技术，使您的代码更易读和可维护。
- en: '[“Extract method”](https://oreil.ly/vNCGG) sounds like a complicated phrase,
    but it’s actually a simple practice of, well, extracting a code fragment (it can
    be a line or a block) into a function or method with a sensible name that describes
    the purpose of the method. It can be used to hide complex implementation details
    (10 lines of long complex code) into a single readable method name (e.g., `train_model()`).'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[“提取方法”](https://oreil.ly/vNCGG) 听起来像一个复杂的短语，但实际上是一个简单的实践，将代码片段（可以是一行或一块）提取到一个具有描述方法目的合理名称的函数或方法中。它可以用来将复杂的实现细节（10
    行长的复杂代码）隐藏到一个可读的单一方法名称中（例如 `train_model()`）。'
- en: Table 7-9\. Extract variable/method/function
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-9\. 提取变量/方法/函数
- en: '| Task | PyCharm | VS Code |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Extract variable | Mac: ⌘ ⌥ V Windows/Linux: Ctrl Alt V | Mac: ⌘ . Windows/Linux:
    Ctrl . |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 提取变量 | Mac：⌘ ⌥ V Windows/Linux：Ctrl Alt V | Mac：⌘ . Windows/Linux：Ctrl .
    |'
- en: '| Extract method/function | Mac: ⌘ ⌥ M Windows/Linux: Ctrl Alt M | Same as
    above |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 提取方法/函数 | Mac：⌘ ⌥ M Windows/Linux：Ctrl Alt M | 与上面相同 |'
- en: '| Inline variable | Mac: ⌘ ⌥ N Windows/Linux: Ctrl Alt N | (not supported at
    the time of writing) |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 内联变量 | Mac：⌘ ⌥ N Windows/Linux：Ctrl Alt N | （在撰写本文时不支持） |'
- en: Try it out in [Exercise 7-7](#example_ch07_1708023847854).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [练习 7-7](#example_ch07_1708023847854) 中试一试。
- en: Example 7-7\. Extract method
  id: totrans-253
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-7\. 提取方法
- en: 'Task: Select the next three lines of code in this exercise, hit the shortcut
    for extract method, and give the function a name (e.g., `add_prettified_ticket_column`).'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 任务：在本练习中选择下面的三行代码，按提取方法的快捷键，并给函数起个名字（例如 `add_prettified_ticket_column`）。
- en: '[PRE9]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now that we’ve seen how the IDE simplifies refactoring, let’s look at how it
    can help us to navigate and make sense of a large codebase.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到 IDE 如何简化重构，让我们看看它如何帮助我们导航和理解大型代码库。
- en: Navigating code without getting lost
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在不迷失的情况下导航代码
- en: In this section, we’ll cover shortcuts that can help you effectively navigate
    code and avoid getting overwhelmed by too many open tabs in your IDE or getting
    lost in the countless lines of code.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些可以帮助您有效导航代码的快捷键，避免在 IDE 中打开太多标签或在无数行代码中迷失。
- en: Opening things (files, classes, methods, functions) by name
  id: totrans-259
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过名称打开文件、类、方法、函数
- en: We often see ML practitioners navigating code on the web browser (e.g., GitHub
    or GitLab). While that works when you’re just reading a small amount of code,
    it becomes cognitively demanding when you need to navigate in and out of functions,
    as we often do. The result is an overwhelming number of open tabs. The IDE shortcuts
    in [Table 7-10](#navigating_by_name) help you to navigate in and out of layers
    of abstraction, seeing valuable git information (who committed the code change,
    when, and why) and getting the information you want without the many open tabs
    and disruption to your flow.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常看到机器学习从业者在网络浏览器中浏览代码（例如 GitHub 或 GitLab）。当你只是阅读少量代码时，这种方法可行，但当你需要在函数之间导航时，这会对认知能力造成负担。[表 7-10](#navigating_by_name)
    中的 IDE 快捷键可以帮助您在不同抽象层之间导航，查看有价值的 git 信息（谁提交了代码更改、何时以及为什么），并获取您想要的信息，而无需打开许多标签或打断您的工作流程。
- en: Table 7-10\. Navigating by name
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-10\. 按名称导航
- en: '| Task | PyCharm | VS Code |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Open file by name | Mac: ⌘ ⇧ O Windows/Linux: Ctrl ⇧ O | Mac: ⌘ P Windows/Linux:
    Ctrl P |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 按名称打开文件 | Mac：⌘ ⇧ O Windows/Linux：Ctrl ⇧ O | Mac：⌘ P Windows/Linux：Ctrl P
    |'
- en: '| Go to symbol (e.g. variables, functions, methods, classes) | Mac: ⌘ ⌥ O Windows/Linux:
    Ctrl Alt O | Mac: ⌘ ⇧ O Windows/Linux: Ctrl ⇧ O |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| 转到符号（例如变量、函数、方法、类） | Mac：⌘ ⌥ O Windows/Linux：Ctrl Alt O | Mac：⌘ ⇧ O Windows/Linux：Ctrl
    ⇧ O |'
- en: Navigating the flow of code
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导航代码流程
- en: When working in a large codebase, we’re often wading through large bodies of
    text and it’s easy to get lost or overwhelmed. Sometimes we end up in an open
    file after hopping through multiple functions, and we forget what we were trying
    to do in the first place.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当在大型代码库中工作时，我们经常需要浏览大量文本，很容易迷失或感到不知所措。有时，在跳转多个函数后，我们最终进入一个打开的文件，并且忘记了最初想要做什么。
- en: The shortcuts in [Table 7-11](#code_navigation) will help you easily zoom in
    and out of layers of abstractions, reduce cognitive load, and allow you to focus
    on the task at hand.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 7-11](#code_navigation) 中的快捷键将帮助您轻松缩放抽象层，减少认知负荷，并使您能够专注于手头的任务。'
- en: Table 7-11\. Code navigation
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-11\. 代码导航
- en: '| Task | PyCharm | VS Code |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '--- | --- | --- |'
- en: '| Go to function definition | Mac: ⌘ B Windows/Linux: Ctrl B | F12 |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| 转到函数定义 | Mac：⌘ B Windows/Linux：Ctrl B | F12 |'
- en: '| View function definition | Mac: ⌥ Space Windows/Linux: Ctrl Shift I | Mac:
    ⌥ F12 Windows/Linux: Alt F12 |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| 查看函数定义 | Mac：⌥ Space Windows/Linux：Ctrl Shift I | Mac：⌥ F12 Windows/Linux：Alt
    F12 |'
- en: '| Navigating backward/forward in the sequence of files and code that you’ve
    visited | Mac: ⌘ [ or ] Windows/Linux: Ctrl Alt ← or → | Mac: Ctrl - or Ctrl Shift
    - Windows/Linux: Alt ← or → |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| 在你访问过的文件和代码序列中向后/向前导航 | Mac：⌘ [ 或 ] Windows/Linux：Ctrl Alt ← 或 → | Mac：Ctrl
    - 或 Ctrl Shift - Windows/Linux：Alt ← 或 → |'
- en: '| Find usages | Mac: ⌥ F7 Windows/Linux: Alt F7 | ⇧ F12 |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 查找用法 | Mac：⌥ F7 Windows/Linux：Alt F7 | ⇧ F12 |'
- en: '| Collapse code region in scope (see benefits in the following sidebar) | Mac:
    ⌘ - Windows/Linux: Ctrl - | Mac: ⌘ ⌥ [ Windows/Linux: Ctrl ⇧ [ |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| 折叠范围内代码区域（请查看侧边栏中的好处） | Mac：⌘ - Windows/Linux：Ctrl - | Mac：⌘ ⌥ [ Windows/Linux：Ctrl
    ⇧ [ |'
- en: '| Expand code region in scope (see the following sidebar) | Mac: ⌘ + Windows/Linux:
    Ctrl + | Mac: ⌘ ⌥ ] Windows/Linux: Ctrl ⇧ ] |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| 展开范围内代码区域（请查看下面的侧边栏） | Mac：⌘ + Windows/Linux：Ctrl + | Mac：⌘ ⌥ ] Windows/Linux：Ctrl
    ⇧ ] |'
- en: '| Collapse code all regions in file | Mac: ⌘ ⇧ - Windows/Linux: Ctrl ⇧ - |
    Mac: ⌘ K ⌘ 0 Windows/Linux: Ctrl K Ctrl 0 |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| 折叠文件中所有区域的代码 | Mac：⌘ ⇧ - Windows/Linux：Ctrl ⇧ - | Mac：⌘ K ⌘ 0 Windows/Linux：Ctrl
    K Ctrl 0 |'
- en: '| Expand code all regions in file | Mac: ⌘ ⇧ + Windows/Linux: Ctrl ⇧ + | Mac:
    ⌘ K ⌘ J Windows/Linux: Ctrl K Ctrl J |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| 展开文件中所有区域的代码 | Mac：⌘ ⇧ + Windows/Linux：Ctrl ⇧ + | Mac：⌘ K ⌘ J Windows/Linux：Ctrl
    K Ctrl J |'
- en: '| Search files | Mac: ⌘ ⇧ F Windows/Linux: Ctrl ⇧ F | Mac: ⌘ ⇧ F Windows/Linux:
    Ctrl ⇧ F |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 搜索文件 | Mac：⌘ ⇧ F Windows/Linux：Ctrl ⇧ F | Mac：⌘ ⇧ F Windows/Linux：Ctrl ⇧
    F |'
- en: '| Navigate tabs | Mac: ⇧ ⌘ ] or [ Windows/Linux: Alt ← or → | Mac: Ctrl [number]
    Windows/Linux: Ctrl Tab |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| 导航选项卡 | Mac：⇧ ⌘ ] 或 [ Windows/Linux：Alt ← 或 → | Mac：Ctrl [number] Windows/Linux：Ctrl
    Tab |'
- en: Try out each shortcut and notice how it can help you reduce visual clutter and
    cognitive load.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试每个快捷键，注意它如何帮助你减少视觉混乱和认知负荷。
- en: Screen real estate management
  id: totrans-283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 屏幕房地产管理
- en: The shortcuts in [Table 7-12](#screen_real_estate_management-id00031) can help
    you to reduce screen toggling, so that you can clear your headspace and attain
    focus. Reducing unnecessary visual distractions and cognitive load gives us more
    clarity for solving the problem at hand.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 7-12](#screen_real_estate_management-id00031) 中的快捷键可以帮助你减少屏幕切换，从而清理头脑空间，集中注意力。减少不必要的视觉干扰和认知负荷为解决手头的问题提供更多清晰度。'
- en: For example, splitting the screen on the left and right is useful for putting
    test and code side by side, and saves you from having to overload your working
    memory (“What was I looking at just now?”).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将屏幕左右分割对于将测试和代码并排放置非常有用，并且可以帮助您避免过载工作记忆（“我刚才在看什么？”）。
- en: Table 7-12\. Screen real estate management
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7-12\. 屏幕房地产管理
- en: '| Task | PyCharm | VS Code |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | PyCharm | VS Code |'
- en: '| --- | --- | --- |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Close all other tabs | (No default shortcut, but you can [configure a custom
    shortcut](https://oreil.ly/12IQL)) | Mac: ⌘ ⌥ T Windows/Linux: Ctrl Alt T |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| 关闭所有其他选项卡 | （没有默认快捷键，但您可以[配置自定义快捷键](https://oreil.ly/12IQL)） | Mac: ⌘ ⌥ T
    Windows/Linux: Ctrl Alt T |'
- en: '| Split screen | Search everywhere (⇧⇧) and search for “Split Right” | Mac:
    ⌘ \ Windows/Linux: Ctrl \ |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| 分屏 | 到处搜索（⇧⇧）并搜索“Split Right” | Mac: ⌘ \ Windows/Linux: Ctrl \ |'
- en: And with that, we’ve covered the IDE shortcuts for this chapter. The next time
    you need to wade through large amounts of code to do something, try out these
    navigational shortcuts to get to your destination without getting lost in the
    weeds.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经介绍了本章的IDE快捷方式。下次当您需要浏览大量代码以执行某些操作时，请尝试使用这些导航快捷方式，以便在不迷失在细节中的情况下到达目的地。
- en: You Did It!
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您做到了！
- en: By this point in the chapter, you’ve learned several new techniques that will
    help you and your team to reduce cognitive load and improve your flow while coding.
    In the remainder of this chapter, we will go through some guidelines we employ
    to create team alignment and bring everyone up to a consistent baseline level
    in a project. We will also touch on some other useful IDE features that you can
    look further into.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 到了本章的这一点，您已经学会了几种新技术，这些技术将帮助您和您的团队减少认知负荷，并在编码时提高工作流。在本章的剩余部分中，我们将介绍一些我们用来创建团队对齐并使每个人在项目中达到一致基准水平的指南。我们还将涉及一些其他有用的IDE功能，您可以进一步了解。
- en: Guidelines for setting up a code repository for your team
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为团队设置代码仓库的指南
- en: 'Here are some guidelines that can help you bootstrap a new project—or improve
    an existing project—with the good habits we’ve been discussing baked in:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些指南，可以帮助您启动一个新项目——或者改进现有项目——并结合我们讨论过的良好习惯：
- en: Configuration-as-code
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 以代码配置
- en: All team members should be able to load project-level configurations and have
    the IDE respect those rules. As much as possible, avoid installing and configuring
    anything that’s needed by the team using graphical user interfaces (GUI) and click-ops.
    If there’s anything you want to do (e.g., set up linting for your project), ensure
    that it’s done as code, that the code is checked in, and that your teammates are
    able to load the configuration and run the exact same task as you.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 所有团队成员都应能够加载项目级配置，并确保IDE遵循这些规则。尽量避免使用图形用户界面（GUI）和点击操作来安装和配置团队需要的任何内容。如果有任何您想要做的事情（例如为项目设置代码检查），请确保这是以代码的形式完成的，代码已经提交，并且您的团队成员能够加载配置并运行与您完全相同的任务。
- en: 'For example, in this chapter’s *.vscode/settings.json*, we’ve configured the
    following for the project:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在本章的 *.vscode/settings.json* 中，我们为项目配置了以下内容：
- en: A default linter
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的代码检查器
- en: A default formatter
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认格式化程序
- en: Auto save
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动保存
- en: Toggle word wrap (so that you don’t have to scroll left and right)
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换自动换行（这样您就不必左右滚动）
- en: There’s certainly room for personal preferences. Think of these as a default
    to get everyone up to a baseline level of hygiene, rather than squashing everyone
    down to the lowest common denominator. And while we’re on the topic of personal
    preference, [Figure 7-9](#quotation_markborrow_your_laptopquotati) shows a funny
    little comic on over-customization.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，个人偏好有很大的空间。把这些看作是将每个人都提升到基准卫生水平，而不是将每个人压缩到最低公共分母。顺便说一句，在个人喜好的话题上，[图 7-9](#quotation_markborrow_your_laptopquotati)
    展示了一部关于过度定制的有趣漫画。
- en: '![](assets/emlt_0709.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/emlt_0709.png)'
- en: 'Figure 7-9\. “Borrow Your Laptop” (source: [xkcd](https://oreil.ly/TW4IR),
    used under [CC BY-NC 2.5](https://oreil.ly/dw8XI))'
  id: totrans-305
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-9\. “借用您的笔记本电脑”（来源：[xkcd](https://oreil.ly/TW4IR)，根据[CC BY-NC 2.5](https://oreil.ly/dw8XI)使用）
- en: Team-level consistency
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 团队级别的一致性
- en: Whichever tool you choose—e.g., a specific linting or formatting library—aim
    to create consistency and alignment within the team. Where there are disagreements,
    have a conversation and work out which tool is most suitable for the team. Otherwise,
    this unresolved conflict will manifest itself as chaos in the code that you produce
    and annoying disruptions in the team’s workflow.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种工具，比如某个特定的代码检查或格式化库，都应该致力于在团队内部创建一致性和对齐性。在存在分歧的情况下，请进行对话并确定哪种工具最适合团队。否则，这种未解决的冲突将表现为你的代码中的混乱，并且会干扰团队的工作流程。
- en: As detailed earlier, you can enforce your agreed practices by committing your
    configuration in your codebase, and automatically enforce checks using [pre-commit
    hooks](https://oreil.ly/-sIkl) and on the project’s CI pipeline.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你可以通过在代码库中提交你的配置，并使用[pre-commit hooks](https://oreil.ly/-sIkl)自动执行检查，来强制执行你们约定的实践，并在项目的CI管道上自动执行检查。
- en: Keep the scroll bar region clean
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 保持滚动条区域清洁
- en: If you look closely at the scroll bar in your IDE, you may notice some amber
    or red lines. (PyCharm calls this the Error Stripe and VS Code the Overview Ruler).
    When this is littered with amber and red warnings, it makes it very easy for you
    to miss or misattribute actual errors and issues that your IDE is trying to warn
    you about. The converse is true, and you can think more clearly and detect issues
    more quickly when you’re coding.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察IDE中的滚动条，你可能会注意到一些琥珀色或红色的线条（PyCharm称之为错误条纹，VS Code称之为概览标尺）。当这些线条布满琥珀色和红色的警告时，你很容易忽视或错误地归因于IDE试图警告你的实际错误和问题。相反，当你编码时，你可以更清晰地思考并更快地发现问题。
- en: You don’t have to memorize the shortcuts
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必记住所有的快捷键
- en: 'When in doubt, you can find the shortcut by opening the command palette (VS
    Code: F1) or Search Everywhere (PyCharm: Shift Shift) and type in the command
    you’re looking for (e.g., “Refactor”). If a shortcut exists for it, it will show
    up next to the command. These basic navigation shortcuts are listed in [Table 7-1](#basic_navigation_shortcuts).'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有疑问时，可以通过打开命令面板（VS Code：F1）或者全局搜索（PyCharm：Shift Shift），输入你要找的命令（例如，“重构”），找到快捷方式。如果存在相关快捷方式，它将显示在命令旁边。这些基本的导航快捷键列在[表 7-1](#basic_navigation_shortcuts)中。
- en: 'Remember, the internet and IDE documentation are your friends. There are many
    helpful tutorials and documentation on the internet. For example, here’s a [PyCharm
    IDE shortcuts tutorial](https://oreil.ly/KDJRb) and a [VS Code IDE shortcuts tutorial](https://oreil.ly/5K1mK).
    In addition, these official references are useful:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，互联网和IDE文档是你的朋友。互联网上有许多有用的教程和文档。例如，这里有一个[PyCharm IDE快捷键教程](https://oreil.ly/KDJRb)和一个[VS
    Code IDE快捷键教程](https://oreil.ly/5K1mK)。此外，这些官方参考资料也很有用：
- en: VS Code shortcut references ([Documentation](https://oreil.ly/X1Tvi), [Mac](https://oreil.ly/QEs2Z),
    [Windows](https://oreil.ly/ofQp-), [Linux](https://oreil.ly/SDxct))
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS Code快捷键参考文档（[Documentation](https://oreil.ly/X1Tvi)，[Mac](https://oreil.ly/QEs2Z)，[Windows](https://oreil.ly/ofQp-)，[Linux](https://oreil.ly/SDxct)）
- en: PyCharm shortcut references ([Documentation](https://oreil.ly/tbd_a), [Mac](https://oreil.ly/RPbYd),
    [Windows and Linux](https://oreil.ly/3pslk))
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyCharm快捷键参考文档（[Documentation](https://oreil.ly/tbd_a)，[Mac](https://oreil.ly/RPbYd)，[Windows
    and Linux](https://oreil.ly/3pslk)）
- en: Additional tools and techniques
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加工具和技术
- en: Both PyCharm and VS Code have introduced many useful features in recent years.
    In this section, we’ll spotlight three of them. These are the tools we most often
    use (and see others use) in our line of work. There are certainly other tools
    and plug-ins that are useful for solving specific problems or in specific languages,
    and you can explore those other tools easily in the respective IDE’s marketplaces
    or in developer blogs.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，PyCharm和VS Code都推出了许多有用的功能。在本节中，我们将重点介绍其中的三个。这些是我们在工作中经常使用（并看到其他人使用）的工具。当然，还有其他工具和插件可以用于解决特定问题或在特定语言中使用，你可以在各自的IDE市场或开发者博客中轻松探索这些工具。
- en: Remote code collaboration tools
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 远程代码协作工具
- en: '[VS Code LiveShare](https://oreil.ly/V7lZw) and [PyCharm CodeWithMe](https://oreil.ly/JLQdH)
    are both great for remote pair programming. We’ve used both tools and are happy
    with how they allow us to collaborate and pair program remotely. There’s not much
    we have to say beyond the official documentation!'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[VS Code LiveShare](https://oreil.ly/V7lZw)和[PyCharm CodeWithMe](https://oreil.ly/JLQdH)都非常适合远程对编程。我们都使用过这两种工具，并对它们允许我们远程协作和对编程的方式感到满意。除了官方文档外，我们没有更多要说的！'
- en: Using the IDE’s debugger
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IDE的调试器
- en: The IDE’s debugger is a useful tool that allows you to pause and step through
    your code and inspect its state at each step. This can sometimes be quicker than
    visually parsing print statements and rerunning code again and again. It won’t
    take long to learn how to use it, and in our experience it’s well worth the investment.
    You can refer to [VS Code’s documentation](https://oreil.ly/eli3P) and [PyCharm’s
    documentation](https://oreil.ly/XHq9g) on debuggers.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: IDE的调试器是一个有用的工具，允许您暂停并逐步执行代码，并在每个步骤检查其状态。这有时比视觉上解析打印语句并一遍又一遍重新运行代码更快。学习如何使用它不会花费很多时间，在我们的经验中，这个投资是非常值得的。您可以参考[VS
    Code的文档](https://oreil.ly/eli3P)和[PyCharm的文档](https://oreil.ly/XHq9g)了解调试器。
- en: GitHub Copilot
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot
- en: As we discussed earlier, GitHub Copilot is an AI assistant that can—based on
    all the open source code that it’s been trained on—provide you with suggestions
    for whole lines or entire functions. It works with both [VS Code](https://oreil.ly/9rS8j)
    and [PyCharm](https://oreil.ly/N2lhV).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，GitHub Copilot是一个AI助理，基于它训练过的所有开源代码，可以为您提供整行或整个函数的建议。它可以与[VS Code](https://oreil.ly/9rS8j)和[PyCharm](https://oreil.ly/N2lhV)一起使用。
- en: Conclusion
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In a team, we feel most accomplished when we solve problems and make progress,
    not when we’re [bikeshedding](https://oreil.ly/rkETt)—wasting time and energy
    in discussion of marginal technical issues.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队中，当我们解决问题并取得进展时，我们感到最有成就感，而不是在[bikeshedding](https://oreil.ly/rkETt)上浪费时间和精力——即在讨论边缘技术问题时。
- en: Here lies the paradox—when we neglect these seemingly inconsequential things
    (e.g., linting, formatting, IDE shortcuts), things keep getting in our way and
    hamper our ability to read, write, and review code. It’s quite common to see teams
    waste precious energy on minutiae such as proper indentation during code reviews,
    instead of addressing larger and more important solution design considerations.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是悖论之所在——当我们忽视这些看似不重要的事物（例如代码审查时的代码检查、格式化、IDE快捷键），事情就会阻碍我们读、写和审查代码的能力。我们经常看到团队在代码审查中浪费宝贵的精力，例如关于适当缩进的细微之处，而不是解决更大、更重要的解决方案设计考虑。
- en: In contrast, knowing the tools of our trade and learning how to leverage them
    effectively will help you and your team stay in the flow when you’re solving problems,
    designing solutions, and reviewing code.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相反，了解我们行业的工具并学会如何有效利用它们将帮助您和您的团队在解决问题、设计解决方案和审查代码时保持流程。
- en: 'As a challenge to you, see if you can complete the following tasks in your
    personal or work project:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个挑战，看看您是否可以在个人或工作项目中完成以下任务：
- en: Can you configure your IDE (PyCharm or VS Code) to the virtual environment for
    one of your projects?
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您能够配置您的IDE（PyCharm或VS Code）到一个项目的虚拟环境吗？
- en: Can you try something fun (e.g., rename a variable, refactor a block of code
    into a function)?
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您能尝试一些有趣的事情（例如重命名变量，将一段代码重构为函数）吗？
- en: 'Equipped with these techniques, let’s now dive deeper into an exciting topic
    that will help you write code that is more readable, maintainable, and evolvable:
    refactoring!'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握了这些技巧，现在让我们深入探讨一个令人兴奋的主题，它将帮助您编写更易读、易维护和易演变的代码：重构！
- en: ^([1](ch07.html#ch01fn31-marker)) For PyCharm, you can either download the Professional
    Edition (30-day free trial) or the Community Edition, both of which you can find
    on the [“Download PyCharm” page](https://oreil.ly/wgbFd). You can refer to the
    [feature comparison page](https://oreil.ly/HytJm) to see the differences between
    the Professional Edition and Community Edition. The main advantage of Professional
    Edition for ML workflows is Jupyter Notebooks and virtual environment integration
    for Docker or Windows WSL. We recommend using PyCharm Professional Edition as
    it’ll make it easier for you to configure a virtual environment that’s inside
    a Docker container (which is the case for Chapters [3](ch03.html#effective_dependency_management_princip)
    to [6](ch06.html#automated_testing_ml_model_tests)). Having said that, we didn’t
    want the license cost to be a barrier, so we’ve written this book to work with
    either version of PyCharm.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch07.html#ch01fn31-marker)) 对于PyCharm，您可以下载专业版（30天免费试用）或社区版，两者均可在[“下载PyCharm”页面](https://oreil.ly/wgbFd)找到。您可以参考[功能比较页面](https://oreil.ly/HytJm)了解专业版和社区版之间的区别。专业版在ML工作流程方面的主要优势是支持Jupyter
    Notebooks和Docker或Windows WSL的虚拟环境集成。我们建议使用PyCharm专业版，因为这将使您更容易配置一个在Docker容器内的虚拟环境（这适用于第[3](ch03.html#effective_dependency_management_princip)到[6](ch06.html#automated_testing_ml_model_tests)章）。尽管如此，我们不希望许可成本成为障碍，因此我们编写了这本书，可以与PyCharm的任何版本配合使用。
- en: ^([2](ch07.html#ch01fn32-marker)) This definition of a linter is paraphrased
    from [pylint’s official documentation](https://oreil.ly/oRPGL).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch07.html#ch01fn32-marker)) 这个对 linter 的定义是从[pylint 官方文档](https://oreil.ly/oRPGL)改编的。
- en: ^([3](ch07.html#ch01fn33-marker)) From our experience, the benefits—through
    the time and effort saved as the team becomes enabled to code more effectively
    with the right tools—justify the relatively small costs of licenses for an organization.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch07.html#ch01fn33-marker)) 根据我们的经验，通过团队能够有效地使用正确工具编写代码，节省的时间和精力远远超过组织为许可证支付的相对较小的成本。
