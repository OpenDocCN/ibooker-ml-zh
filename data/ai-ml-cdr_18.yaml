- en: Chapter 15\. An Introduction to TensorFlow.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 15 章。TensorFlow.js 简介
- en: In addition to TensorFlow Lite, which enables running on native mobile or embedded
    systems, the TensorFlow ecosystem also includes TensorFlow.js, which lets you
    develop ML models using the popular JavaScript language to use directly in the
    browser, or on a backend with Node.js. It allows you to train new models as well
    as running inference on them, and includes tools that let you convert your Python-based
    models into JavaScript-compatible ones. In this chapter you’ll get an introduction
    to how TensorFlow.js fits into the overall ecosystem and a tour of its architecture,
    and you’ll learn how to build your own models using a free, open source IDE that
    integrates with your browser.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 TensorFlow Lite，它可以在原生移动或嵌入式系统上运行，TensorFlow 生态系统还包括 TensorFlow.js，它允许您使用流行的
    JavaScript 语言在浏览器中直接开发 ML 模型，或在 Node.js 上的后端使用。它允许您训练新模型并对其进行推断，并包括工具，可让您将基于 Python
    的模型转换为与 JavaScript 兼容的模型。在本章中，您将介绍 TensorFlow.js 如何适应整体生态系统以及其架构的概述，并学习如何使用一个与浏览器集成的免费开源
    IDE 构建您自己的模型。
- en: What Is TensorFlow.js?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 TensorFlow.js？
- en: The TensorFlow ecosystem is summarized in [Figure 15-1](#the_tensorflow_ecosystem).
    It comprises a suite of tools for *training* models, a repository for *preexisting*
    models and layers, and a set of technologies that allow you to *deploy* models
    for your end users to take advantage of.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 生态系统总结在[图 15-1](#tensorflow_ecosystem)中。它包括一套用于*训练*模型的工具，一个用于*预先存在*模型和层的存储库，以及一组技术，允许您为最终用户*部署*模型以获益。
- en: Like TensorFlow Lite (Chapters [12](ch12.xhtml#an_introduction_to_tensorflow_lite)–[14](ch14.xhtml#using_tensorflow_lite_in_ios_apps))
    and TensorFlow Serving ([Chapter 19](ch19.xhtml#deployment_with_tensorflow_serving)),
    TensorFlow.js *mostly* lives on the right side of this diagram, because while
    it’s primarily intended as a runtime for models, it can also be used for training
    models and should be considered a first-class language alongside Python and Swift
    for this task. TensorFlow.js can be run in the browser or on backends like Node.js,
    but for the purposes of this book we’ll focus primarily on the browser.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与 TensorFlow Lite（第 [12](ch12.xhtml#an_introduction_to_tensorflow_lite)–[14](ch14.xhtml#using_tensorflow_lite_in_ios_apps)
    章）和 TensorFlow Serving（第 [19](ch19.xhtml#deployment_with_tensorflow_serving) 章）类似，TensorFlow.js
    主要位于图表的右侧，因为虽然它主要用作模型的运行时，但也可用于训练模型，并且在这项任务中应被视为一流语言，与 Python 和 Swift 并驾齐驱。TensorFlow.js
    可以在浏览器中运行或在像 Node.js 这样的后端上运行，但出于本书的目的，我们将主要关注浏览器。
- en: '![The TensorFlow ecosystem](Images/aiml_1501.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![TensorFlow 生态系统](Images/aiml_1501.png)'
- en: Figure 15-1\. The TensorFlow ecosystem
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-1\. TensorFlow 生态系统
- en: The architecture of how TensorFlow.js gives you browser-based training and inference
    is shown in [Figure 15-2](#tensorflowdotjs_high_level_architecture).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow.js 如何通过浏览器进行训练和推断的架构显示在[图 15-2](#tensorflowdotjs_high_level_architecture)中。
- en: '![TensorFlow.js high-level architecture](Images/aiml_1502.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![TensorFlow.js 高级架构](Images/aiml_1502.png)'
- en: Figure 15-2\. TensorFlow.js high-level architecture
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-2\. TensorFlow.js 高级架构
- en: As a developer, you’ll typically use the Layers API, which gives Keras-like
    syntax in JavaScript, allowing you to use the skills you learned at the beginning
    of this book in JavaScript. This is underpinned by the Core API, which gives,
    as its name suggests, the core TensorFlow functionality in JavaScript. As well
    as providing the basis for the Layers API, it allows you to reuse existing Python-based
    models by means of a conversion toolkit that puts them into a JSON-based format
    for easy consumption.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，您通常会使用 Layers API，在 JavaScript 中提供类似 Keras 的语法，使您可以在 JavaScript 中使用您在本书开头学到的技能。这是由
    Core API 支持的，正如其名称所示，在 JavaScript 中提供核心 TensorFlow 功能。除了为 Layers API 提供基础外，它还通过转换工具包允许您重用现有的基于
    Python 的模型，将其转换为基于 JSON 的格式以便轻松消费。
- en: The Core API then can run in a web browser, taking advantage of GPU-based acceleration
    using WebGL, or on Node.js, where, depending on the configuration of the environment,
    it can take advantage of TPU- or GPU-based acceleration in addition to the CPU.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 核心 API 可以在 Web 浏览器中运行，并利用基于 WebGL 的 GPU 加速，或者在 Node.js 上运行，在这种环境配置下，除了 CPU 外，还可以利用
    TPU 或 GPU 加速。
- en: If you’re not used to web development in either HTML or JavaScript, don’t worry;
    this chapter will serve as a primer, giving you enough background to help you
    build your first models. While you can use any web/JavaScript development environment
    you like, I would recommend one called [Brackets](http://brackets.io) to new users.
    In the next section you’ll see how to install that and get it up and running,
    after which you’ll build your first model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉 HTML 或 JavaScript 的网页开发，不要担心；本章将作为入门指南，为你提供足够的背景帮助你构建你的第一个模型。虽然你可以使用任何你喜欢的
    web/JavaScript 开发环境，但我推荐一款称为[Brackets](http://brackets.io)的新用户。在下一节中，你将看到如何安装它并使其运行，之后你将构建你的第一个模型。
- en: Installing and Using the Brackets IDE
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和使用 Brackets IDE
- en: Brackets is a free, open source text editor that is extremely useful for web
    developers—in particular new ones—in that it integrates neatly with the browser,
    allowing you to serve your files locally so you can test and debug them. Often,
    when setting up web development environments, that’s the tricky part. It’s easy
    to write HTML or JavaScript code, but without a server to serve them to your browser,
    it’s hard to really test and debug them. Brackets is available for Windows, Mac,
    and Linux, so whatever operating system you’re using, the experience should be
    similar. For this chapter, I tried it out on Mint Linux, and it worked really
    well!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Brackets 是一个免费的开源文本编辑器，非常适合网页开发者，特别是新手，因为它与浏览器集成得非常好，允许你本地提供文件以便测试和调试。通常，在设置网页开发环境时，这是棘手的部分。编写
    HTML 或 JavaScript 代码很容易，但如果没有服务器将它们提供给浏览器，要真正测试和调试它们是困难的。Brackets 可在 Windows、Mac
    和 Linux 上使用，所以无论你使用哪种操作系统，体验应该是类似的。对于本章，我在 Mint Linux 上试用了它，效果非常好！
- en: After you download and install Brackets, run it and you’ll see the Getting Started
    page, similar to [Figure 15-3](#brackets_welcome_screen). In the top-right corner
    you’ll see a lightning bolt icon.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并运行 Brackets 后，你会看到类似于[图 15-3](#brackets_welcome_screen)的入门页面。在右上角，你会看到一个闪电图标。
- en: '![Brackets welcome screen](Images/aiml_1503.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Brackets 欢迎页面](Images/aiml_1503.png)'
- en: Figure 15-3\. Brackets welcome screen
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-3\. Brackets 欢迎页面
- en: 'Click that and your web browser will launch. As you edit the HTML code in Brackets,
    the browser will live update. So, for example, if you change the code on line
    13 that says:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它，你的网页浏览器将启动。当你在 Brackets 中编辑 HTML 代码时，浏览器将实时更新。例如，如果你修改第 13 行的代码：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'to something else, such as:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到其他东西，比如：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ll see the contents in the browser change in real time to match your edits,
    as shown in [Figure 15-4](#real_time_updates_in_the_browser).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到浏览器中的内容实时更改以匹配你的编辑，如图 15-4 所示。
- en: '![Real-time updates in the browser](Images/aiml_1504.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器中的实时更新](Images/aiml_1504.png)'
- en: Figure 15-4\. Real-time updates in the browser
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-4\. 浏览器中的实时更新
- en: I find this really handy for HTML and JavaScript development in the browser,
    because the environment just gets out of the way and lets you focus on your code.
    With so many new concepts, particularly in machine learning, this is invaluable
    because it helps you work without too many distractions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现这对于在浏览器中进行 HTML 和 JavaScript 开发非常方便，因为它让环境尽量不干扰你，让你可以专注于代码。尤其是在机器学习等许多新概念中，这是非常宝贵的，因为它帮助你在没有太多干扰的情况下工作。
- en: You’ll notice, on the Getting Started page, that you’re working in just a plain
    directory that Brackets serves files from. If you want to use your own, just create
    a directory in your filesystem and open that. New files you create in Brackets
    will be created and run from there. Make sure it’s a directory you have write
    access to so you can save your work!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在入门页面上，你会注意到你只是在一个普通的目录中工作，Brackets 从中提供文件。如果你想使用自己的目录，只需在文件系统中创建一个目录并打开它。你在
    Brackets 中创建的新文件将从那里创建和运行。确保它是你有写访问权限的目录，这样你就可以保存你的工作！
- en: Now that you have a development environment up and running, it’s time to create
    your first machine learning model in JavaScript. For this we’ll go back to our
    “Hello World” scenario where you train a model that infers the relationship between
    two numbers. If you’ve been working through this book from the beginning, you’ve
    seen this model many times already, but it’s still a useful one for helping you
    understand the syntactical differences you’ll need to consider when programming
    in JavaScript!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经搭建好开发环境，是时候在 JavaScript 中创建你的第一个机器学习模型了。我们将回到我们的“Hello World”场景，训练一个能够推断两个数字之间关系的模型。如果你从头开始阅读这本书，你可能已经多次看到这个模型，但它仍然是一个有用的模型，可以帮助你理解在
    JavaScript 编程时需要考虑的语法差异！
- en: Building Your First TensorFlow.js Model
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的第一个 TensorFlow.js 模型
- en: 'Before using TensorFlow.js in the browser, you’ll need to host the JavaScript
    in an HTML file. Create one and populate it with this skeleton HTML:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中使用 TensorFlow.js 之前，你需要将 JavaScript 托管在一个 HTML 文件中。创建一个文件，并使用以下基本 HTML
    结构填充它：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, beneath the `<head>` section and before the `<body>` tag, you can insert
    a `<script>` tag specifying the location of the TensorFlow.js library:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `<head>` 部分和 `<body>` 标签之前，你可以插入一个 `<script>` 标签，指定 TensorFlow.js 库的位置：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you were to run the page now, TensorFlow.js would be downloaded, but you
    wouldn’t see any impact.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在运行页面，TensorFlow.js 将被下载，但你不会看到任何影响。
- en: Next, add another `<script>` tag immediately below the first one. Within it,
    you can create a model definition. Note that while it’s very similar to how you
    would do it in TensorFlow in Python (refer back to [Chapter 1](ch01.xhtml#introduction_to_tensorflow)
    for details), there are some differences. For example, in JavaScript every line
    ends with a semicolon. Also, parameters to functions such as `model.add` or `model.compile`
    are in JSON notation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在第一个 `<script>` 标签的下方立即添加另一个 `<script>` 标签。在其中，你可以创建一个模型定义。请注意，虽然它与在 Python
    中使用 TensorFlow 的方式非常相似（详细信息请参阅[第1章](ch01.xhtml#introduction_to_tensorflow)），但也有一些差异。例如，在
    JavaScript 中，每一行都以分号结束。还有，诸如 `model.add` 或 `model.compile` 这类函数的参数使用 JSON 表示法。
- en: 'This model is the familiar “Hello World” one, consisting of a single layer
    with a single neuron. It will be compiled with mean squared error as the loss
    function and stochastic gradient descent as the optimizer:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型是熟悉的“Hello World”模型，由单个神经元组成的单层。它将使用均方误差作为损失函数，并使用随机梯度下降作为优化器进行编译：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, you can add the data. This is a little different from Python, where you
    had Numpy arrays. Of course, these aren’t available in JavaScript, so you’ll use
    the `tf.tensor2d` structure instead. It’s close, but there’s one key difference:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以添加数据。这与 Python 有些不同，Python 使用 Numpy 数组。当然，在 JavaScript 中这些不可用，所以你将使用
    `tf.tensor2d` 结构。它很接近，但有一个关键的区别：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that, as well as the list of values, you also have a second array that
    defines the *shape* of the first one. So, your `tensor2d` is initialized with
    a 6 × 1 list of values, followed by an array containing `[6,1]`. If you were to
    feed seven values in, the second parameter would be `[7,1]`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，除了值列表外，你还有第二个数组，用于定义第一个数组的*形状*。因此，你的 `tensor2d` 初始化为一个 6 × 1 的值列表，后跟一个包含
    `[6,1]` 的数组。如果你要输入七个值，则第二个参数将是 `[7,1]`。
- en: 'To do the training, you can then create a function called `doTraining`. This
    will train the model using `model.fit`, and, as before, the parameters to it will
    be formatted as a JSON list:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行训练，你可以创建一个名为 `doTraining` 的函数。这将使用 `model.fit` 训练模型，并且与之前一样，它的参数将以 JSON 列表的格式进行格式化：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It’s an asynchronous operation—the training will take a period of time—so it’s
    best to create this as an async function. Then you `await` the `model.fit`, passing
    it the number of epochs as a parameter. You can also specify a callback that will
    write out the loss for each epoch when it ends.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个异步操作——训练会花费一段时间——因此最好将其创建为异步函数。然后，你可以`await` `model.fit`，将 epochs 数作为参数传递进去。你也可以指定一个回调函数，在每个
    epoch 结束时输出损失。
- en: 'The last thing to do is call this `doTraining` method, passing it the model
    and reporting on the result after it finishes training:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要做的就是调用这个 `doTraining` 方法，将模型传递给它，并在训练完成后报告结果：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This calls `model.predict`, passing it a single value to get a prediction from.
    Because it is using a `tensor2d` as well as the value to predict, you also have
    to pass a second parameter with the shape of the first. So to predict the result
    for 10, you create a `tensor2d` with this value in an array and then pass in the
    shape of that array.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这会调用 `model.predict`，将单个值传递给它以获取预测结果。因为它使用了一个 `tensor2d` 以及要预测的值，你还必须传递第二个参数，这个参数是第一个数组的形状。所以要预测
    10 的结果，你创建一个包含该值的数组的 `tensor2d`，然后传递该数组的形状。
- en: 'For convenience, here’s the complete code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为方便起见，这里是完整的代码：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When you run this page, it will appear as if nothing has happened. Wait a few
    seconds, and then a dialog will appear like the one in [Figure 15-5](#results_of_the_inference_after_training).
    This is the alert dialog that is shown with the results of the prediction for
    `[10]`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个页面时，看起来好像什么都没有发生。等待几秒钟，然后会出现一个对话框，类似于[图 15-5](#results_of_the_inference_after_training)
    中显示的那个。这是一个警告对话框，显示了对 `[10]` 的预测结果。
- en: '![Results of the inference after training](Images/aiml_1505.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![训练后推理的结果](Images/aiml_1505.png)'
- en: Figure 15-5\. Results of the inference after training
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-5\. 训练后推理的结果
- en: It can be a little disconcerting to have that long pause before the dialog is
    shown—as you’ve probably guessed, the model was training during that period. Recall
    that in the `doTraining` function, you created a callback that writes the loss
    per epoch to the console log. If you want to see this, you can do so with the
    browser’s developer tools. In Chrome you can access these by clicking the three
    dots in the upper-right corner and selecting More Tools → Developer Tools, or
    by pressing Ctrl-Shift-I.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话框显示之前有那么长时间的停顿可能会让人感到有些不安 —— 正如你可能已经猜到的那样，模型在那段时间内正在训练。回想一下，在 `doTraining`
    函数中，你创建了一个回调函数，将每个时期的损失写入控制台日志中。如果你想看到这个，可以使用浏览器的开发者工具来查看。在 Chrome 中，你可以通过点击右上角的三个点，选择“更多工具”
    → “开发者工具”，或者按 Ctrl-Shift-I 来访问这些工具。
- en: Once you have them, select Console at the top of the pane and refresh the page.
    As the model retrains, you’ll see the loss per epoch (see [Figure 15-6](#exploring_the_per_epoch_loss_in_the_bro)).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有了它们，选择窗格顶部的控制台并刷新页面。当模型重新训练时，你将看到每个时期的损失（见[图 15-6](#exploring_the_per_epoch_loss_in_the_bro)）。
- en: '![Exploring the per-epoch loss in the browser’s developer tools](Images/aiml_1506.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![在浏览器的开发者工具中探索每个时期的损失](Images/aiml_1506.png)'
- en: Figure 15-6\. Exploring the per-epoch loss in the browser’s developer tools
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-6\. 在浏览器的开发者工具中探索每个时期的损失
- en: Now that you’ve gone through your first (and simplest) model, you’re ready to
    build something a little more complex.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了第一个（也是最简单的）模型，准备构建一个稍微复杂一点的东西。
- en: Creating an Iris Classifier
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个鸢尾花分类器
- en: The last example was a very simple one, so let’s work on one that’s a little
    more complex next. If you’ve done any work with machine learning, you’ve probably
    heard about the Iris dataset, which is a perfect one for learning ML.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个例子非常简单，所以接下来让我们来处理一个稍微复杂一点的例子。如果你做过任何与机器学习相关的工作，你可能听说过鸢尾花数据集，这是一个学习机器学习的完美选择。
- en: The dataset contains 150 data items with four attributes each, describing three
    classes of flower. The attributes are sepal length and width, and petal length
    and width. When plotted against each other, clear clusters of flower types are
    seen ([Figure 15-7](#plotting_features_in_the_iris_dataset)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集包含 150 个数据项，每个数据项有四个描述三种花类的属性。这些属性是萼片长度和宽度，以及花瓣长度和宽度。当它们相互对比时，可以看到清晰的花类簇群（见[图
    15-7](#plotting_features_in_the_iris_dataset)）。
- en: '![Plotting features in the Iris dataset](Images/aiml_1507.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![在鸢尾花数据集中绘制特征](Images/aiml_1507.png)'
- en: 'Figure 15-7\. Plotting features in the Iris dataset (source: Nicoguaro, available
    on [Wikimedia Commons](https://oreil.ly/zgf7c))'
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-7\. 在鸢尾花数据集中绘制特征（来源：Nicoguaro，可在[维基媒体公共资源](https://oreil.ly/zgf7c)上找到）
- en: '[Figure 15-7](#plotting_features_in_the_iris_dataset) shows the complexity
    of the problem, even with a simple dataset like this. How does one separate the
    three types of flowers using rules? The petal length versus petal width plots
    come close, with the *Iris setosa* samples (in red) being very distinct from the
    others, but the blue and green sets are intertwined. This makes for an ideal learning
    set in ML: it’s small, so fast to train, and you can use it to solve a problem
    that’s difficult to do in rules-based programming!'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-7](#plotting_features_in_the_iris_dataset)显示了这个问题的复杂性，即使是像这样的简单数据集也是如此。如何使用规则分离三种类型的花？花瓣长度与花瓣宽度的图表接近，*Iris
    setosa*样本（红色）与其他样本非常不同，但蓝色和绿色的样本交织在一起。这使得它成为ML中的理想学习集：它很小，所以训练快速，您可以用它来解决基于规则的编程很难解决的问题！'
- en: You can download the dataset from the [UCI Machine Learning Repository](https://oreil.ly/aIVGp),
    or use the version in the book’s [GitHub repository](https://oreil.ly/91b40),
    which I’ve converted to CSV to make it easier to use in JavaScript.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[UCI机器学习库](https://oreil.ly/aIVGp)下载数据集，或使用书中的[GitHub仓库](https://oreil.ly/91b40)中的版本，我已将其转换为CSV以便在JavaScript中更轻松地使用。
- en: 'The CSV looks like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件如下所示：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The four data points for each flower are the first four values. The label is
    the fifth value, one of `setosa`, `versicolor`, or `virginica`. The first line
    in the CSV file contains the column labels. Keep that in mind—it will be useful
    later!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 每种花的四个数据点是前四个值。标签是第五个值，是`setosa`、`versicolor`或`virginica`中的一个。CSV文件的第一行包含列标签。记住这一点，以后会有用！
- en: 'To get started, create a basic HTML page as before, and add the `<script>`
    tag to load TensorFlow.js:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请像以前一样创建一个基本的HTML页面，并添加`<script>`标签以加载TensorFlow.js：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To load a CSV file, TensorFlow.js has the `tf.data.csv` API that you can give
    a URL to. This also allows you to specify which column is the label. Because the
    first line in the CSV file I’ve prepared contains column names, you can specify
    which one contains the labels, which in this case is `species`, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载CSV文件，TensorFlow.js 提供了`tf.data.csv` API，您可以向其提供一个URL。这还允许您指定哪一列是标签。因为我准备的CSV文件的第一行包含列名，您可以指定哪一列包含标签，本例中是`species`，如下所示：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The labels are strings, which you don’t really want to train a neural network
    with. This is going to be a multiclass classifier with three output neurons, each
    containing the probability that the input data represents the respective species
    of flower. Thus, a one-hot encoding of the labels is perfect.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是字符串，您实际上不希望用神经网络训练它们。这将是一个多类分类器，具有三个输出神经元，每个神经元包含输入数据代表相应花种的概率。因此，标签的独热编码非常适合。
- en: This way, if you represent `setosa` as [1, 0, 0], showing that you want the
    first neuron to light up for this class, `virginica` as [0, 1, 0], and `versicolor`
    as [0, 0, 1], you’re effectively defining the template for how the final layer
    neurons should behave for each class.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果您将`setosa`表示为[1, 0, 0]，表明您希望该类的第一个神经元被激活，将`virginica`表示为[0, 1, 0]，`versicolor`表示为[0,
    0, 1]，则您有效地定义了每个类的最终层神经元应如何行为的模板。
- en: 'Because you used `tf.data` to load the data, you have the ability to use a
    mapping function that will take in your `xs` (features) and `ys` (labels) and
    map them differently. So, to keep the features intact and one-hot encode the labels,
    you can write code like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您使用了`tf.data`加载数据，您可以使用一个映射函数来单独处理`xs`（特征）和`ys`（标签）。因此，要保持特征不变并对标签进行独热编码，可以编写如下代码：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the labels are stored as an array of three values. Each value defaults
    to 0, unless the species matches the given string, in which case it will be a
    1\. Thus, `setosa` will be encoded as [1, 0, 0], and so on.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意标签存储为三个值的数组。除非物种与给定字符串匹配，否则每个值默认为0，此时它将是1。因此，`setosa`将被编码为[1, 0, 0]，依此类推。
- en: The mapping function will return the `xs` unaltered and the `ys` one-hot encoded.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 映射函数将保持`xs`不变，并对`ys`进行独热编码。
- en: 'You can now define your model. Your input layer’s shape is the number of features,
    which is the number of columns in the CSV file minus 1 (because one of the columns
    represents the labels):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以定义您的模型了。输入层的形状是特征的数量，即CSV文件中的列数减去1（因为其中一列代表标签）：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Your final layer has three units because of the three classes that are one-hot
    encoded in the training data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您的最终层有三个单元，因为训练数据中有三个进行了独热编码的类。
- en: 'Next, you’ll specify the loss function and optimizer. Because this is a multiple-category
    classifier, make sure you use a categorical loss function such as categorical
    cross entropy. You can use an optimizer such as `adam` in the `tf.train` namespace
    and pass it parameters like the learning rate (here, `0.06`):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将指定损失函数和优化器。因为这是一个多类别分类器，确保你使用类别交叉熵等分类损失函数。你可以使用 `tf.train` 命名空间中的 `adam`
    优化器，并传递学习率等参数（这里是 `0.06`）：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Because the data was formatted as a dataset, you can use `model.fitDataset`
    for training instead of `model.fit`. To train for one hundred epochs and catch
    the loss in the console, you can use a callback like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因为数据格式化为数据集，你可以使用 `model.fitDataset` 进行训练，而不是 `model.fit`。要进行一百轮的训练并在控制台捕获损失，可以使用如下的回调函数：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To test the model after it has finished training, you can load values into
    a `tensor2d`. Don’t forget that when using a `tensor2d`, you also have to specify
    the shape of the data. In this case, to test a set of four values, you would define
    them in a `tensor2d` like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型训练完成后，要测试模型，你可以将值加载到 `tensor2d` 中。不要忘记，在使用 `tensor2d` 时，还必须指定数据的形状。在这种情况下，要测试四个值的集合，你可以像这样在
    `tensor2d` 中定义它们：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can then get a prediction by passing this to `model.predict`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过将其传递给 `model.predict` 来获取预测值：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You’ll get a tensor value back that looks something like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会得到一个类似这样的张量值：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To get the largest value, you can use the `argMax` function:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最大值，你可以使用 `argMax` 函数：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will return `[0]` for the preceding data because the neuron at position
    0 had the highest probability.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前述数据，这将返回 `[0]`，因为位置 0 的神经元具有最高的概率。
- en: To unpack this into a value, you can use `.dataSync`. This operation synchronously
    downloads a value from the tensor. It does block the UI thread, so be careful
    when using it!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其解包为一个值，你可以使用 `.dataSync`。这个操作会同步从张量中下载一个值。它会阻塞 UI 线程，所以在使用时要小心！
- en: 'The following code will simply return `0` instead of `[0]`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码会简单地返回 `0` 而不是 `[0]`：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To map this back to a string with the class name, you can then use this code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了将其映射回带有类名的字符串，你可以使用以下代码：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now you’ve seen how to load data from a CSV file, turn it into a dataset, and
    then fit a model from that dataset, as well as how to run predictions from that
    model. You’re well equipped to experiment with other datasets of your choosing
    to further hone your skills!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何从 CSV 文件加载数据，将其转换为数据集，然后从该数据集拟合模型，以及如何运行模型的预测。你已经准备好尝试其他自选数据集，进一步磨练你的技能了！
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter introduced you to TensorFlow.js and how it can be used to train
    models and perform inference in the browser. You saw how to use the open source
    Brackets IDE to code and test your models on a local web server, and used this
    to train your first two models: a “Hello World” linear regression model and a
    basic classifier for the popular Iris dataset. These were very simple scenarios,
    but in [Chapter 16](ch16.xhtml#coding_techniques_for_computer_vision_i) you’ll
    take things to the next level and see how to train computer vision models with
    TensorFlow.js.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你介绍了 TensorFlow.js 及其在浏览器中训练模型和执行推断的用法。你了解了如何使用开源的 Brackets IDE 来编写和在本地 Web
    服务器上测试你的模型，并用它来训练你的第一个两个模型：一个“Hello World”线性回归模型和一个基本的鸢尾花数据集分类器。这些都是非常简单的场景，但在
    [第16章](ch16.xhtml#coding_techniques_for_computer_vision_i) 中，你将把事情推向更高的水平，看看如何使用
    TensorFlow.js 训练计算机视觉模型。
