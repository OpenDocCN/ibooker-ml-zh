- en: Chapter 9\. Understanding Sequence and Time Series Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章\. 理解序列和时间序列数据
- en: Time series are everywhere. You’ve probably seen them in things like weather
    forecasts, stock prices, and historic trends like Moore’s law ([Figure 9-1](#mooreapostrophes_law)).
    If you’re not familiar with Moore’s law, it predicts that the number of transistors
    on a microchip will roughly double every two years. For almost 50 years it has
    proven to be an accurate predictor of the future of computing power and cost.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列无处不在。你可能在天气预报、股票价格以及像摩尔定律（[图 9-1](#mooreapostrophes_law)）这样的历史趋势中见过它们。如果你对摩尔定律不熟悉，它预测微芯片上的晶体管数量大约每两年翻一番。几乎50年来，它已被证明是计算能力和成本未来的准确预测者。
- en: '![Moore’s law](Images/aiml_0901.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![摩尔定律](Images/aiml_0901.png)'
- en: Figure 9-1\. Moore’s law
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-1\. 摩尔定律
- en: Time series data is a set of values that are spaced over time. When plotted,
    the x-axis is usually temporal in nature. Often there are a number of values plotted
    on the time axis, such as in this example where the number of transistors is one
    plot and the predicted value from Moore’s law is the other. This is called a *multivariate*
    time series. If there’s just a single value—for example, volume of rainfall over
    time—it’s called a *univariate* time series.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据是一组随时间间隔的值。当绘制时，x轴通常是时间性质的。通常在时间轴上会绘制多个值，比如在这个例子中，晶体管数量是一个绘图，而来自摩尔定律的预测值是另一个。这被称为*多变量*时间序列。如果只有一个值，例如随时间变化的降雨量，那就称为*单变量*时间序列。
- en: With Moore’s law, predictions are simple because there’s a fixed and simple
    rule that allows us to roughly predict the future—a rule that has held for about
    50 years.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在摩尔定律的影响下，预测变得简单，因为存在一个固定且简单的规则，使我们能够粗略地预测未来——这一规则已经持续了大约50年。
- en: But what about a time series like that in [Figure 9-2](#a_real_world_time_series)?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么像[图 9-2](#a_real_world_time_series)中的时间序列呢？
- en: '![A real-world time series](Images/aiml_0902.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![真实世界时间序列](Images/aiml_0902.png)'
- en: Figure 9-2\. A real-world time series
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-2\. 真实世界时间序列
- en: While this time series was artificially created (you’ll see how to do that later
    in this chapter), it has all the attributes of a complex real-world time series
    like a stock chart or seasonal rainfall. Despite the seeming randomness, time
    series have some common attributes that are helpful in designing ML models that
    can predict them, as described in the next section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个时间序列是人为创建的（稍后在本章中你将看到如何做到这一点），但它具有像股票图表或季节性降雨等复杂真实世界时间序列的所有属性。尽管看似随机，时间序列具有一些共同属性，这些属性对设计能够预测它们的机器学习模型非常有帮助，如下一节所述。
- en: Common Attributes of Time Series
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列的共同属性
- en: While time series might appear random and noisy, often there are common attributes
    that are predictable. In this section we’ll explore some of these.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管时间序列可能看起来随机和嘈杂，通常存在可预测的共同属性。在本节中，我们将探讨其中一些。
- en: Trend
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势
- en: 'Time series typically move in a specific direction. In the case of Moore’s
    law, it’s easy to see that over time the values on the y-axis increase, and there’s
    an upward trend. There’s also an upward trend in the time series in [Figure 9-2](#a_real_world_time_series).
    Of course, this won’t always be the case: some time series may be roughly level
    over time, despite seasonal changes, and others have a downward trend. For example,
    this is the case in the inverse version of Moore’s law that predicts the price
    per transistor.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列通常沿特定方向移动。在摩尔定律的情况下，很容易看出随着时间推移，y轴上的值增加，并且存在向上的趋势。在[图 9-2](#a_real_world_time_series)中的时间序列中也存在向上的趋势。当然，并非总是如此：有些时间序列可能随时间大致保持水平，尽管存在季节性变化，而其他时间序列则呈下降趋势。例如，在预测每个晶体管价格的反向版本中就是如此。
- en: Seasonality
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 季节性
- en: Many time series have a repeating pattern over time, with the repeats happening
    at regular intervals called *seasons*. Consider, for example, temperature in weather.
    We typically have four seasons per year, with the temperature being highest in
    summer. So if you plotted weather over several years, you’d see peaks happening
    every four seasons, giving us the concept of seasonality. But this phenomenon
    isn’t limited to weather—consider, for example, [Figure 9-3](#website_traffic),
    which is a plot of traffic to a website.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时间序列随时间的重复模式具有周期性，这些重复以称为*季节*的规则间隔发生。例如，天气中的温度。我们通常每年有四个季节，夏季温度最高。因此，如果你绘制几年的天气数据，你会看到每四个季节发生一次高峰，这给了我们季节性的概念。但这种现象不仅限于天气——例如，考虑[图 9-3](#website_traffic)，这是一个显示网站流量的图表。
- en: '![Website traffic](Images/aiml_0903.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![网站流量](Images/aiml_0903.png)'
- en: Figure 9-3\. Website traffic
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-3\. 网站流量
- en: It’s plotted week by week, and you can see regular dips. Can you guess what
    they are? The site in this case is one that provides information for software
    developers, and as you would expect, it gets less traffic on weekends! Thus, the
    time series has a seasonality of five high days and two low days. The data is
    plotted over several months, with the Christmas and New Year’s holidays roughly
    in the middle, so you can see an additional seasonality there. If I had plotted
    it over some years, you’d clearly see the additional end-of-year dip.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它是逐周绘制的，您可以看到定期的低谷。您能猜到它们是什么吗？本例中的网站为软件开发人员提供信息，并且正如您所预期的那样，周末其流量较少！因此，这个时间序列每周有五天高峰和两天低谷的季节性。数据绘制了几个月，圣诞节和新年假期大致位于中间，所以您可以看到额外的季节性。如果我将其绘制多年，您将清楚地看到年底的额外低谷。
- en: There are many ways that seasonality can manifest in a time series. Traffic
    to a retail website, for instance, might peak on the weekends.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 季节性在时间序列中表现出多种方式。例如，零售网站的流量可能在周末达到高峰。
- en: Autocorrelation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自相关
- en: Another feature that you may see in time series is when there’s predictable
    behavior after an event. You can see this in [Figure 9-4](#autocorrelation), where
    there are clear spikes, but after each spike, there’s a deterministic decay. This
    is called *autocorrelation*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间序列中可能会看到的另一个特征是事件后的可预测行为。您可以在[图 9-4](#autocorrelation)中看到这一点，在那里有明显的峰值，但在每个峰值后，有确定性的衰减。这被称为*自相关*。
- en: In this case, we can see a particular set of behavior, which is repeated. Autocorrelations
    may be hidden in a time series pattern, but they have inherent predictability,
    so a time series containing many of them may be predictable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以看到一组特定的行为，这些行为是重复的。自相关可能隐藏在时间序列模式中，但它们具有固有的可预测性，因此包含许多自相关的时间序列可能是可预测的。
- en: '![Autocorrelation](Images/aiml_0904.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![自相关](Images/aiml_0904.png)'
- en: Figure 9-4\. Autocorrelation
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-4\. 自相关
- en: Noise
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 噪声
- en: As its name suggests, noise is a set of seemingly random perturbations in a
    time series. These perturbations lead to a high level of unpredictability and
    can mask trends, seasonal behavior, and autocorrelation. For example, [Figure 9-5](#autocorrelated_series_with_added_noise)
    shows the same autocorrelation from [Figure 9-4](#autocorrelation), but with a
    little noise added. Suddenly it’s much harder to see the autocorrelation and predict
    values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，噪声是时间序列中一组看似随机的扰动。这些扰动导致了高度的不可预测性，可以掩盖趋势、季节性行为和自相关。例如，[图 9-5](#autocorrelated_series_with_added_noise)展示了从[图
    9-4](#autocorrelation)中得到的同样的自相关，但添加了一些噪声。突然间，很难看出自相关并预测数值。
- en: '![Autocorrelated series with added noise](Images/aiml_0905.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![添加噪声的自相关序列](Images/aiml_0905.png)'
- en: Figure 9-5\. Autocorrelated series with added noise
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-5\. 添加噪声的自相关序列
- en: Given all of these factors, let’s explore how you can make predictions on time
    series that contain these attributes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于所有这些因素，让我们探讨如何在包含这些属性的时间序列上进行预测。
- en: Techniques for Predicting Time Series
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预测时间序列的技术
- en: Before we get into ML-based prediction—the topic of the next few chapters—we’ll
    explore some more naive prediction methods. These will enable you to establish
    a baseline that you can use to measure the accuracy of your ML predictions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨基于机器学习的预测——接下来几章的主题之前——我们将探讨一些更为天真的预测方法。这些方法将使您能够建立一个可以用来衡量您的机器学习预测准确性的基线。
- en: Naive Prediction to Create a Baseline
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基线的天真预测
- en: The most basic method to predict a time series is to say that the predicted
    value at time *t* + 1 is the same as the value from time *t*, effectively shifting
    the time series by a single period.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 预测时间序列最基本的方法是说，在时间 *t* + 1 处的预测值与时间 *t* 的值相同，实质上将时间序列向前推移一个周期。
- en: 'Let’s begin by creating a time series that has trend, seasonality, and noise:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建具有趋势、季节性和噪声的时间序列开始：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After plotting this you’ll see something like [Figure 9-6](#a_time_series_showing_trendcomma_season).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制后，您会看到类似[图 9-6](#a_time_series_showing_trendcomma_season)的情况。
- en: '![A time series showing trend, seasonality, and noise](Images/aiml_0906.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![显示趋势、季节性和噪声的时间序列](Images/aiml_0906.png)'
- en: Figure 9-6\. A time series showing trend, seasonality, and noise
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-6\. 显示趋势、季节性和噪声的时间序列
- en: Now that you have the data, you can split it like any data source into a training
    set, a validation set, and a test set. When there’s some seasonality in the data,
    as you can see in this case, it’s a good idea when splitting the series to ensure
    that there are whole seasons in each split. So, for example, if you wanted to
    split the data in [Figure 9-6](#a_time_series_showing_trendcomma_season) into
    training and validation sets, a good place to do this might be at time step 1,000,
    giving you training data up to step 1,000 and validation data after step 1,000.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了数据，您可以像任何数据源一样将其分割为训练集、验证集和测试集。当数据存在某种季节性时，正如在这种情况下所看到的，将系列拆分时，确保每个拆分中都有完整的季节是个好主意。因此，例如，如果您想将数据在[图 9-6](#a_time_series_showing_trendcomma_season)中拆分为训练集和验证集，一个很好的分割点可能是在时间步1,000处，这样您就可以获得从步1,000开始的训练数据和步1,000之后的验证数据。
- en: You don’t actually need to do the split here because you’re just doing a naive
    forecast where each value *t* is simply the value at step *t* – 1, but for the
    purposes of illustration in the next few figures we’ll zoom in on the data from
    time step 1,000 onwards.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上在这里不需要分割数据，因为您只是进行了一个简单的天真预测，其中每个值*t*只是前一步*t* – 1处的值。但是为了在接下来的几个图中进行说明，我们将放大从时间步1,000开始的数据。
- en: 'To predict the series from a split time period onwards, where the period that
    you want to split from is in the variable `split_time`, you can use code like
    this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要从分割的时间段开始预测系列，其中您希望分割的期间在变量`split_time`中，您可以使用以下代码：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Figure 9-7](#naive_forecast_on_time_series) shows the validation set (from
    time step 1,000 onwards, which you get by setting `split_time` to `1000`) with
    the naive prediction overlaid.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-7](#naive_forecast_on_time_series) 显示了验证集（从时间步1,000开始，可以通过将`split_time`设置为`1000`来获得）与天真预测的叠加。'
- en: '![Naive forecast on time series](Images/aiml_0907.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![时间序列的天真预测](Images/aiml_0907.png)'
- en: Figure 9-7\. Naive forecast on time series
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-7\. 时间序列的天真预测
- en: It looks pretty good—there is a relationship between the values—and, when charted
    over time, the predictions appear to closely match the original values. But how
    would you measure the accuracy?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来还不错 —— 值之间存在一定的关系，并且随着时间的推移，预测似乎与原始值紧密匹配。但是如何衡量准确性呢？
- en: Measuring Prediction Accuracy
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测量预测准确性
- en: 'There are a number of ways to measure prediction accuracy, but we’ll concentrate
    on two of them: the *mean squared error* (MSE) and *mean absolute error* (MAE).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以衡量预测准确性，但我们将集中在两种上：*均方误差*（MSE）和*平均绝对误差*（MAE）。
- en: With MSE, you simply take the difference between the predicted value and the
    actual value at time *t*, square it (to remove negatives), and then find the average
    over all of them.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MSE，您只需获取时间*t*处预测值与实际值之间的差值，平方（以去除负值），然后计算所有这些值的平均值。
- en: With MAE, you calculate the difference between the predicted value and the actual
    value at time *t*, take its absolute value to remove negatives (instead of squaring),
    and find the average over all of them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MAE，您计算预测值与时间*t*处的实际值之间的差值，取其绝对值以去除负值（而不是平方），然后计算所有这些值的平均值。
- en: 'For the naive forecast you just created based on our synthetic time series,
    you can get the MSE and MAE like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 基于我们的合成时间序列创建的天真预测，您可以像这样获取MSE和MAE：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I got an MSE of 76.47 and an MAE of 6.89\. As with any prediction, if you can
    reduce the error, you can increase the accuracy of your predictions. We’ll look
    at how to do that next.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到了MSE为76.47和MAE为6.89。与任何预测一样，如果能减少误差，就能提高预测的准确性。接下来我们将看看如何实现这一点。
- en: 'Less Naive: Using Moving Average for Prediction'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不那么天真：使用移动平均线进行预测
- en: 'The previous naive prediction took the value at time *t* – 1 to be the forecasted
    value at time *t*. Using a moving average is similar, but instead of just taking
    the value from *t* – 1, it takes a group of values (say, 30), averages them out,
    and sets that to be the predicted value at time *t*. Here’s the code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的天真预测将时间*t*处的值取为时间*t*的预测值。使用移动平均线类似，但不只是取*t* – 1处的值，而是取一组值（比如30个），求其平均值，并将其设置为时间*t*处的预测值。以下是代码：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Figure 9-8](#plotting_the_moving_average) shows the plot of the moving average
    against the data.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-8](#plotting_the_moving_average) 显示了移动平均线与数据的图表。'
- en: '![Plotting the moving average](Images/aiml_0908.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![绘制移动平均线](Images/aiml_0908.png)'
- en: Figure 9-8\. Plotting the moving average
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-8\. 绘制移动平均线
- en: When I plotted this time series I got an MSE and MAE of 49 and 5.5, respectively,
    so it’s definitely improved the prediction a little. But this approach doesn’t
    take into account the trend or the seasonality, so we may be able to improve it
    further with a little analysis.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我绘制这个时间序列时，得到的MSE和MAE分别为49和5.5，因此预测明显有所改善。但这种方法没有考虑趋势或季节性，因此我们可能可以通过一些分析进一步改进。
- en: Improving the Moving Average Analysis
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进移动平均分析
- en: 'Given that the seasonality in this time series is 365 days, you can smooth
    out the trend and seasonality using a technique called *differencing*, which just
    subtracts the value at *t* – 365 from the value at *t*. This will flatten out
    the diagram. Here’s the code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于该时间序列的季节性为365天，您可以使用一种称为*differencing*的技术来平滑趋势和季节性，它只是从*t*时刻减去*t - 365*时刻的值。这将使图表变平。以下是代码：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can now calculate a moving average of *these* values and add back in the
    past values:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以计算这些值的移动平均，并添加回过去的值：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you plot this (see [Figure 9-9](#improved_moving_average)), you can already
    see an improvement in the predicted values: the trend line is very close to the
    actual values, albeit with the noise smoothed out. Seasonality seems to be working,
    as does the trend.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当您绘制图表时（参见[图 9-9](#improved_moving_average)），您已经可以看到预测值有所改善：趋势线非常接近实际值，尽管噪音已经平滑化。季节性似乎有效，趋势也是如此。
- en: '![Improved moving average](Images/aiml_0909.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![改进的移动平均](Images/aiml_0909.png)'
- en: Figure 9-9\. Improved moving average
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-9\. 改进的移动平均
- en: This impression is confirmed by calculating the MSE and MAE—in this case I got
    40.9 and 5.13, respectively, showing a clear improvement in the predictions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过计算均方误差（MSE）和平均绝对误差（MAE）来确认这一印象，在本例中分别为40.9和5.13，显示了预测结果的明显改进。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced time series data and some of the common attributes of
    time series. You created a synthetic time series and saw how you can start making
    naive predictions on it. From these predictions, you established baseline measurements
    using mean squared error and mean average error. It was a nice break from TensorFlow,
    but in the next chapter you’ll go back to using TensorFlow and ML to see if you
    can improve on your predictions!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了时间序列数据及其常见属性。您创建了一个合成时间序列，并学习了如何开始进行简单的预测。从这些预测中，您使用均方误差和平均绝对误差建立了基准度量。这是从
    TensorFlow 中的一个不错的转换，但在下一章中，您将回到使用 TensorFlow 和机器学习，看看能否进一步改进您的预测！
