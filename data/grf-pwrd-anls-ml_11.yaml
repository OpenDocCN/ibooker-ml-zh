- en: Chapter 9\. Analyzing Airline Flight Routes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。分析航空公司航线
- en: 'Graph algorithms are an essential tool for performing graph analytics. While
    one can study the algorithms themselves from a textbook, a practitioner needs
    to gain hands-on experience using a graph algorithm library and applying algorithms
    to real-world use cases. This chapter will use graph algorithms to analyze a global
    airline flight route network. We will apply three categories of algorithms: shortest
    path, centrality, and community detection.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 图算法是进行图分析的必要工具。虽然人们可以从教科书中学习算法本身，但从业者需要获得使用图算法库并将算法应用于真实用例的实践经验。本章将使用图算法来分析全球航线网络。我们将应用三类算法：最短路径、中心性和社区检测。
- en: 'After completing this chapter, you should be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您应能够：
- en: Install and run TigerGraph GDS algorithms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并运行TigerGraph GDS算法
- en: Set required and optional parameters for algorithms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置算法的必需和可选参数
- en: Modify a GSQL algorithm or other query to make a customized version
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改GSQL算法或其他查询，以制作定制版本
- en: Use the Explore Graph feature to display selected vertices and edges, including
    creating an attribute filter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“探索图”功能显示选定的顶点和边，包括创建属性过滤器
- en: Understand the application of shortest path, centrality, and community algorithms
    to a routing network
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解最短路径、中心性和社区算法在路由网络中的应用
- en: 'Goal: Analyzing Airline Flight Routes'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标：分析航空公司航线
- en: Schiphol Airport in Amsterdam is located in the relatively small country of
    the Netherlands. Despite the Netherlands having only 17 million residents, its
    biggest airport is a top-tier hub for transferring over 25 million passengers
    and 1.6 million tonnes of cargo in 2021.^([1](ch09.html#ch01fn30)) To achieve
    such a feat, airports like Schiphol face the challenge of scheduling hundreds
    of aircraft for thousands of flights. Schiphol Airport had almost 500 million
    air transport movements in 2019, just prior to the COVID-19 pandemic. An airport
    is a time-sensitive business that operates under complex logistical constraints
    such as flight connectivity for each route. The goal of an airport is to maximize
    the total profit by scheduling these routes in the most cost-efficient way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 阿姆斯特丹的史基浦机场位于相对较小的荷兰国家。尽管荷兰只有1700万居民，但它最大的机场是2021年转运了超过2500万乘客和160万吨货物的顶级枢纽。（[1](ch09.html#ch01fn30)）要达到这样的壮举，像史基浦这样的机场面临着为数千次航班安排上百架飞机的挑战。史基浦机场在2019年新冠疫情爆发前几乎有5亿次航空交通运输。机场是一个时间敏感的业务，它在复杂的后勤约束条件下运作，比如为每条航线提供飞行连通性。机场的目标是通过以最节约成本的方式安排这些航线，最大化总利润。
- en: Once airlines have established their flight schedules, passengers then have
    the task of choosing the routes that make the most sense for them. For some routes,
    fliers will be able to choose from multiple options. Fliers may want a route that
    makes the fewest connections, or they may want the shortest route. Today, fliers
    can use online search tools that can incorporate the benefits and costs of each
    flight, such as the shortest route. Just as the PageRank algorithm was the start
    for Google’s web search utility, shortest path algorithms were the core for airline
    flight search tools. Some fliers seek additional analysis of the flight network.
    Persons who fly to a wide range of destinations on a regular basis, such as salespersons
    and consultants, may want to know which airports are the best hubs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦航空公司建立了他们的航班时间表，乘客就需要选择对他们最有意义的航线。对于一些航线，乘客可以选择多种选项。乘客可能希望选择最少连接的航线，或者他们可能希望选择最短的航线。今天，乘客可以使用在线搜索工具，这些工具可以整合每次航班的利弊，比如最短航线。就像PageRank算法是Google网络搜索实用程序的起点一样，最短路径算法是航空公司航班搜索工具的核心。一些乘客寻求对航班网络的进一步分析。那些经常飞往各种目的地的人，比如销售人员和顾问，可能想知道哪些机场是最佳枢纽。
- en: Some industries may benefit from finding communities of connected airports where
    there are actually *fewer* connections to the larger network of airports as a
    whole. For example, a wildlife photography tour agency may be interested in selling
    package tours in a remote area. If that area is less connected to large hubs,
    it is likely to be more remote and therefore more popular with photographers looking
    to get “off the beaten track.” Ideally, that remote region would have its own
    local community of flight routes to facilitate travel to different locations.
    Another example might be a consultant for an airline company looking for underserved
    routes. A graph of what communities are relatively isolated from the rest of the
    world could be a starting point for suggestions for new routes to open up.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些行业可能会从寻找连接的机场社区中受益，尤其是那些与整体机场网络连接较少的地方。例如，野生动物摄影旅行社可能有兴趣销售偏远地区的套餐旅游。如果该地区与大型枢纽的连接较少，那么它可能更为偏远，因此更受摄影师欢迎，他们希望走"少有人走的路"。理想情况下，该偏远地区将拥有自己的本地航线社区，以便于前往不同的目的地。另一个例子可能是一家航空公司顾问寻找未开发的航线。图表明相对于世界其他地方而言，哪些社区相对孤立，可能是提出开通新航线建议的起点。
- en: 'Solution: Graph Algorithms on a Flight Route Network'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案：航班路由网络上的图算法
- en: Flight traffic forms a network of airports connected by flights. Therefore,
    graph analytics is a natural way to visualize and analyze routes and their influence
    on airport business. We can use directional graphs to incorporate the departure
    location and the destination of each flight and use edge attributes to include
    costs such as distance, time, or carbon exhaust. Just by forming the graph, we
    can easily make basic observations such as the number of incoming or outgoing
    flights from an airport. However, by using graph algorithms, we can perform more
    complex analyses such as identifying the most influential airports and the most
    cost-efficient paths.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 航班流量形成了一个由航班连接的机场网络。因此，图分析是可视化和分析路线及其对机场业务影响的一种自然方式。我们可以使用有向图来结合每个航班的出发地和目的地，并使用边属性来包括距离、时间或碳排放等成本。仅通过构建图形，我们可以轻松地进行基本观察，如一个机场的进出航班数量。然而，通过使用图算法，我们可以进行更复杂的分析，如识别最有影响力的机场和最经济的路径。
- en: We can define the most efficient route for our use case using edge attributes.
    For example, if we are looking for the shortest route, we can include the flight
    distance as an attribute. In other cases, where we are looking for the cheapest
    flight, we can include the price of each flight between airports, or we can include
    CO[2] emissions on each edge attribute if we are interested in finding the most
    sustainable flight option.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用边属性定义我们用例的最有效路径。例如，如果我们寻找最短的路径，我们可以将航程距离作为属性包含进去。在其他情况下，如果我们寻找最便宜的航班，我们可以包含每个机场之间的航班价格，或者如果我们有兴趣找到最可持续的飞行选项，则可以在每个边属性中包含二氧化碳排放。
- en: Implementing an Airport and Flight Route Analyzer
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施机场和航班路由分析器
- en: Now we show some of these graph algorithms in action, using another TigerGraph
    Cloud Starter Kit.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们展示一些这些图算法的实际操作，使用另一个TigerGraph Cloud入门套件。
- en: The Graph Algorithms Starter Kit
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图算法入门套件
- en: Using TigerGraph Cloud, deploy a new cloud database instance and select “Graph
    Algorithms - Centrality Algorithms” as the use case. Once this starter kit is
    installed, load the data following the steps listed in the section [“Load data
    and install queries for a starter kit”](ch03.html#load_data_and_install_queries_for_a_sta)
    in [Chapter 3](ch03.html#see_your_customers_and_business_better).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TigerGraph Cloud，部署一个新的云数据库实例，并选择“图算法 - 中心性算法”作为用例。一旦安装了这个入门套件，按照第三章中“加载数据和安装查询的入门套件”一节中列出的步骤加载数据。
- en: Graph Schema and Dataset
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图模式和数据集
- en: The dataset represents actual airports and flight routes circa 2014 obtained
    from [OpenFlights.org](http://openflights.org).^([2](ch09.html#ch01fn31)) There
    is only one vertex type, `**Airport**`, with attributes for ID, name, city, country,
    IATA code,^([3](ch09.html#ch01fn32)) latitude, and longitude. An additional attribute
    called score is included as a generic placeholder to store the result of an algorithm.
    For example, if we were to run PageRank on the graph, that would generate a PageRank
    score for each vertex. We could store those values in this attribute. We have
    data for 7,935 airports. Having a single vertex type makes this graph ideal for
    direct analysis with standardized graph algorithms, most of which assume a graph
    with a single vertex type.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据集代表约 2014 年从 [OpenFlights.org](http://openflights.org) 获取的实际机场和航班路线。只有一种顶点类型，`**Airport**`，带有
    ID、名称、城市、国家、IATA 代码、^([3](ch09.html#ch01fn32)) 纬度和经度等属性。还包括一个称为分数的附加属性，作为存储算法结果的通用占位符。例如，如果我们在图上运行
    PageRank，那么会为每个顶点生成一个 PageRank 分数。我们可以将这些值存储在这个属性中。共有 7,935 个机场的数据。拥有单一顶点类型使得这个图适合使用标准化的图算法进行直接分析，其中大多数算法假设图具有单一顶点类型。
- en: The two edge types, `**flight_route**` and `**flight_to**`, come from the same
    source file *routes.dat*, a list of scheduled commercial service from one airport
    to another. The table has a row for each airline that offers nonstop service from
    one city to another, regardless of frequency. The `**flight_to**` edges are directed.
    The `**flight_route**` edges are undirected, meaning there is nonstop service
    between these cities, but ignoring the direction. There are 19,268 `**flight_route**`
    edges and 37,606 `**flight_to**` edges, almost twice the number of `**flight_route**`
    edges, meaning nonstop service is usually bidirectional. The simplicity of the
    schema in [Figure 9-1](#schema_for_flight_route_dataset) is a good reminder of
    the difference between schema complexity (here, one vertex type and two edge types)
    and data complexity (about 8,000 vertices and 57,000 edges).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 两种边类型，`**flight_route**` 和 `**flight_to**`，来自同一来源文件 *routes.dat*，这是一个计划的商业服务航班列表，从一个机场到另一个机场。该表中每条航线表示一个航空公司提供的两个城市之间的直达服务，不考虑频率。`**flight_to**`
    边是有向的。`**flight_route**` 边是无向的，意味着这些城市之间有直达服务，但忽略方向。共有19,268 条 `**flight_route**`
    边和 37,606 条 `**flight_to**` 边，几乎是 `**flight_route**` 边的两倍，表明直达服务通常是双向的。[图 9-1](#schema_for_flight_route_dataset)
    中的模式的简单性提醒我们模式复杂性（这里是一个顶点类型和两种边类型）与数据复杂性（大约 8,000 个顶点和 57,000 条边）之间的差异是一个好的例子。
- en: '![Schema for flight route dataset](assets/gpam_0901.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![航班路线数据集的模式](assets/gpam_0901.png)'
- en: Figure 9-1\. Schema for flight route dataset (see a larger version of this figure
    at [https://oreil.ly/gpam0901](https://oreil.ly/gpam0901))
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-1\. 航班路线数据集的模式（请在 [https://oreil.ly/gpam0901](https://oreil.ly/gpam0901)
    查看此图的较大版本）
- en: Installing Algorithms from the GDS Library
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 GDS 库中的算法
- en: 'One of the beauties of graph algorithms is that they have standard definitions
    and will work on any graph that meets their conditions. For example, a shortest
    path algorithm for unweighted edges should work on *any* graph. As of May 2023,
    the TigerGraph GDS (Graph Data Science) Library contains more than 55 algorithms,
    available on GitHub.^([4](ch09.html#ch01fn33)) They are offered in two formats
    to let users choose convenience over performance: schema-free and template.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图算法的美妙之处之一是它们具有标准定义，并且可以在满足其条件的任何图上运行。例如，对于非加权边的最短路径算法应该在*任何*图上工作。截至 2023 年
    5 月，TigerGraph GDS（图数据科学）库包含超过 55 种算法，可在 GitHub 上获取。^([4](ch09.html#ch01fn33))
    为了让用户在便利性和性能之间做选择，它们以两种格式提供：无模式和模板。
- en: Schema-free algorithms are written as open source GSQL queries where the vertex
    type, edge type, and relevant attributes of vertices or edges are runtime parameters.
    They only need to be installed once, and then they are ready to be used for any
    graph. Template algorithms are written in proto-GSQL. The user does not perform
    an explicit install operation. Template algorithms are executed using `CALL` instead
    of `INSTALL` and RUN. If a `CALL` statement specifies schema details (vertex type,
    edge type, and attributes) that have not been `CALL`ed before, then the database
    installs an optimized version of the template query with those schema details
    hardcoded. `CALL` then runs this schema-specific algorithm. If a `CALL` statement
    uses schema details that have been used before, then the database skips installation
    and just runs the installed algorithm. [Table 9-1](#comparing_schema_free_and_template_algo)
    compares the two types.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无模式算法被编写为开源的 GSQL 查询，其中顶点类型、边类型和相关的顶点或边的属性是运行时参数。它们只需安装一次，然后就可以用于任何图。模板算法以 proto-GSQL
    编写。用户不需要执行显式安装操作。模板算法使用 `CALL` 而不是 `INSTALL` 和 `RUN` 运行。如果 `CALL` 语句指定了之前未使用过的模式详细信息（顶点类型、边类型和属性），则数据库会安装带有这些模式详细信息硬编码的优化版本的模板查询。然后
    `CALL` 运行这个特定于模式的算法。如果 `CALL` 语句使用了之前已使用过的模式详细信息，则数据库跳过安装并直接运行已安装的算法。[表 9-1](#comparing_schema_free_and_template_algo)
    对比了这两种类型。
- en: Table 9-1\. Comparing schema-free and template algorithms
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-1\. 比较无模式和模板算法
- en: '|   | Schema-free algorithms | Template algorithms |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | 无模式算法 | 模板算法 |'
- en: '| --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Installation** | Once | Once for each combination (vertex type, edge type,
    graph attributes) used in a `CALL` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **   | **安装** | 一次 | 每个组合（顶点类型、边类型、图属性）在 `CALL` 中使用时需要一次 |'
- en: '| **Runtime performance** | Somewhat slower, may use more memory | Optimized:
    faster and less memory |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **运行时性能** | 较慢，可能使用更多内存 | 优化：更快速，内存占用更少 |'
- en: '| **Commands** | `INSTALL`, `RUN` | `CALL` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | `INSTALL`、`RUN` | `CALL` |'
- en: '| **User customization** | Simple, just like GSQL queries | Indirect, due to
    template nature |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **用户定制** | 简单，就像 GSQL 查询一样 | 间接，由于模板的性质 |'
- en: 'We will use schema-free algorithms. Follow these steps to install the schema-free
    algorithms we will use to analyze the flight route network:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用无模式算法。按照以下步骤安装我们将用于分析飞行路线网络的无模式算法：
- en: On the Write Queries page of GraphStudio, look for and click the Add New Query
    button (a dark circle with a + symbol) at the bottom of the GSQL queries pane.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GraphStudio 的写查询页面上，查找并点击 GSQL 查询窗格底部的添加新查询按钮（一个带有 + 符号的黑色圆圈）。
- en: A panel will pop up.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个面板将弹出。
- en: Click CHOOSE FROM LIBRARY.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击从库中选择。
- en: A new panel with a list of algorithm categories appears. Click on the arrow
    to the right of Centrality. Select the boxes next to Betweenness Centrality and
    Closeness Centrality. Also select Community → Connected Components and Path →
    Shortest Path. Then click INSTALL. Installation will take a few minutes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现一个包含算法类别列表的新面板。点击 Centrality 右侧的箭头。选择 Betweenness Centrality 和 Closeness
    Centrality 旁边的框。还选择 Community → Connected Components 和 Path → Shortest Path。然后点击
    INSTALL。安装过程需要几分钟。
- en: Queries and Analytics
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询和分析
- en: This starter kit covers three categories of graph algorithms, which all provide
    useful answers and analyses about flight routes. In addition, there are a few
    utility queries that help to prepare the data in order to inspect the individual
    records.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个入门套件涵盖了三类图算法，它们都提供关于航线的有用答案和分析。此外，还有一些实用查询，可以帮助准备数据以检查各个记录。
- en: Utility queries
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 实用查询
- en: Calculate flight distances
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 计算飞行距离
- en: The original dataset does not tell us the distances traveled. This query uses
    latitude and longitude to calculate the length of a direct flight between two
    airports.^([5](ch09.html#ch01fn34))
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始数据集没有告诉我们旅行距离。此查询使用纬度和经度计算两个机场之间直接航班的长度。^([5](ch09.html#ch01fn34))
- en: Search for vertex
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索顶点
- en: Not every airport in the dataset has an IATA code. To identify an airport, we
    may need to search based on the city or airport name. This query provides a general
    vertex search function.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据集中并非每个机场都有 IATA 代码。为了识别一个机场，我们可能需要根据城市或机场名称进行搜索。此查询提供了一个通用的顶点搜索功能。
- en: Path algorithms
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 路径算法
- en: Many travelers want to find the routes with the fewest connections, shortest
    distance traveled, or lowest cost. The Shortest Path algorithm will find the route
    from one vertex to another having the fewest segments. The Shortest Path, Weighted
    algorithm works with data where each edge has a numeric weight that could represent
    a real-world factor like time, distance, or dollars. It finds the path from one
    vertex to another that has the least total weight.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 许多旅行者希望找到连接最少、行驶距离最短或成本最低的路线。最短路径算法将找到从一个顶点到另一个顶点的路线，其中段数最少。加权最短路径算法处理每个边具有数值权重的数据，该权重可以代表实际因素，如时间、距离或金钱。它找到从一个顶点到另一个顶点的路径，其总权重最小。
- en: Centrality algorithms
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 中心性算法
- en: This kit uses Closeness Centrality and Betweenness Centrality to rank the routing
    importance of airports in two different ways.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该套件使用接近度中心性和介数中心性以两种不同的方式对机场的路由重要性进行排名。
- en: Community detection algorithms
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 社区检测算法
- en: In a routing network, there are more routing options available to travel within
    one community than to travel between communities. We run the Strongly Connected
    Component algorithm to see what it reveals about the worldwide airline route network.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由网络中，有更多的路由选项可供在一个社区内旅行，而在社区之间旅行则较少。我们运行强连通分量算法，以查看它对全球航空路线网络的揭示。
- en: Calculate route length
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算路线长度
- en: The first step when using this starter kit is to run the `calculate_route_length`
    query. This query calculates the length in miles of each route, using the latitudes
    and longitudes of the airports. The query uses the haversine formula to account
    for the curvature of the earth. The arc length of each route is then stored in
    each vertex’s attribute called `miles`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此起始套件的第一步是运行`calculate_route_length`查询。该查询根据机场的纬度和经度计算每条路线的长度，使用haversine公式考虑地球的曲率。每条路线的弧长存储在每个顶点的名为`miles`的属性中。
- en: 'When running the query, you need to specify the edge type. Run the query twice:
    once with edge type `**flight_to**`, and another time with edge type `**flight_route**`.
    Were you to run this query in a GSQL command line shell, the commands and output
    would be like the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运行查询时，您需要指定边类型。请分别使用边类型`**flight_to**`和`**flight_route**`运行查询两次。若您在GSQL命令行shell中运行此查询，命令和输出将如下所示：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Measure and analyze centrality
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测量和分析中心性
- en: Which airports have the most connecting flights? Which airports would be the
    best base of operations for a person or company who wants to travel conveniently
    to anywhere? If this is what you want to know, use a centrality algorithm. Centrality
    is a measure of the importance of a vertex based on its relative position in a
    network. There are several ways to define centrality; as of October 2022, the
    TigerGraph GDS algorithm library had 12\. We will try two of them, closeness and
    betweenness, comparing their definitions and their results.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 哪些机场有最多的中转航班？哪些机场对于希望方便地旅行到任何地方的个人或公司来说是最佳基地？如果这是您想了解的内容，请使用中心性算法。中心性是根据顶点在网络中的相对位置来衡量其重要性的指标。有几种方式来定义中心性；截至2022年10月，TigerGraph
    GDS算法库共有12种。我们将尝试两种，即接近度和介数，比较它们的定义和结果。
- en: The closeness centrality score of a vertex *v* is the inverse of the average
    of shortest path distances from *v* to other vertices in the graph. For example,
    in a four-vertex graph, if the shortest path distances from *v* to the other three
    vertices are 1, 1, and 2, then closeness(*v*) = 1/(1+1+2) = 0.25\. In an airline
    route network, a high closeness centrality score for an airport means it has a
    large number of nonstop and one-stop routes to other airports. A small regional
    airport generally has low closeness centrality because of the low number of destinations
    directly reachable from it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 顶点*v*的接近度中心性分数是从*v*到图中其他顶点的最短路径距离的倒数。例如，在一个四顶点图中，如果*v*到另外三个顶点的最短路径距离分别为1、1和2，则接近度(*v*)
    = 1/(1+1+2) = 0.25。在航空路线网络中，机场的高接近度中心性分数意味着它具有大量直达和一站式路线到其他机场。小型地区机场通常因直接可达目的地数量较少而具有较低的接近度中心性。
- en: In the query selection pane, click on the `tg_closeness_cent` algorithm query.
    [Table 9-2](#parameter_for_tg_closeness_cent_algorit) lists the full set of parameters.
    Many of these parameters are standard features of TigerGraph GDS algorithms, so
    we’ll spend a little time reviewing them here.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询选择窗格中，单击 `tg_closeness_cent` 算法查询。[表 9-2](#parameter_for_tg_closeness_cent_algorit)
    列出了 TigerGraph GDS 算法的全部参数集。这些参数中的许多是 TigerGraph GDS 算法的标准功能，因此我们将花一些时间在这里进行回顾。
- en: Table 9-2\. Parameter for `tg_closeness_cent` algorithm
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-2\. `tg_closeness_cent` 算法的参数
- en: '| Parameter | Description | Default |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: 参数 | 描述 | 默认值 |
- en: '| --- | --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `SET<STRING> v_type` | Vertex types to use | (empty set of strings) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `SET<STRING> v_type` | 要使用的顶点类型 | （空字符串集合） |'
- en: '| `SET<STRING> e_type` | Edge types to use | (empty set of strings) |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `SET<STRING> e_type` | 要使用的边类型 | （空字符串集合） |'
- en: '| `SET<STRING> rev_e_type` | Reverse edge types to use | (empty set of strings)
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `SET<STRING> rev_e_type` | 要使用的反向边类型 | （空字符串集合） |'
- en: '| `INT max_hops` | If >=0, look only this far from each vertex | 10 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `INT max_hops` | 如果 >=0，则只查看距离每个顶点这么远的内容 | 10 |'
- en: '| `INT top_k` | Output only this many scores (scores are always sorted highest
    to lowest) | 100 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `INT top_k` | 仅输出这么多分数（分数始终按从高到低排序） | 100 |'
- en: '| `BOOL wf` | Whether to use Wasserman-Faust normalization for multicomponent
    graphs | True |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `BOOL wf` | 是否对多组件图使用瓦特斯曼-福斯特标准化 | True |'
- en: '| `BOOL print_results` | If true, output JSON to standard output | True |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `BOOL print_results` | 如果为真，则将 JSON 输出到标准输出 | True |'
- en: '| `STRING result_attr` | If not empty, store centrality values in FLOAT format
    to this vertex attribute | (empty string) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `STRING result_attr` | 如果不为空，则将中心性值存储为浮点格式到此顶点属性 | （空字符串） |'
- en: '| `STRING file_path` | If not empty, write output to this file in CSV format
    | (empty string) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `STRING file_path` | 如果不为空，则以 CSV 格式将输出写入此文件 | （空字符串） |'
- en: '| `BOOL display_edges` | If true, include the graph’s edges in the JSON output
    so that the full graph can be displayed | False |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `BOOL display_edges` | 如果为真，则在 JSON 输出中包含图的边缘，以便可以显示完整的图形 | False |'
- en: The first three parameters (`v_type`, `e_type`, `rev_e_type`) specify which
    vertices and edges of the graph the algorithm should run on. Some algorithms are
    designed for directed edges, some for undirected edges. It’s important to check
    the documentation^([6](ch09.html#ch01fn35)) to see which type of edge is preferred
    or permitted. Reverse edges may or may not exist in a graph; they are an option
    available to the schema designer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个参数（`v_type`、`e_type`、`rev_e_type`）指定算法应在图的哪些顶点和边上运行。一些算法设计用于有向边，而一些则用于无向边。重要的是查阅文档^([6](ch09.html#ch01fn35))，了解首选或允许的边类型。图中可能存在反向边，也可能不存在；这是模式设计者的选择。
- en: The next three parameters (`max_hops`, `top_k`, `wf`) are specific to `closeness_centrality`,
    though `max_hops` and `top_k` appear in several other algorithms. For closeness
    centrality, vertices further away than the `max_hops` limit will not be considered
    in the computation of average distance. `top_k` is available for algorithms that
    produce results that can be treated as a ranking. The `wf` parameter enables a
    modified measure of closeness centrality that normalizes scores in the case of
    a graph that is composed of disconnected subgraphs of different sizes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个参数（`max_hops`、`top_k`、`wf`）是专门针对 `closeness_centrality` 的，尽管 `max_hops`
    和 `top_k` 在几个其他算法中也出现过。对于接近中心性，距离超过 `max_hops` 限制的顶点将不会被考虑在平均距离计算中。`top_k` 适用于产生可以视为排名的结果的算法。`wf`
    参数允许在由不同大小的断开子图组成的图中标准化分数的修改测度。
- en: The last four parameters (`print_results`, `result_attr`, `file_path`, `display_edges`)
    are standard parameters for the user to specify how they want the results to be
    delivered. The default is to stream JSON text to the standard output.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个参数（`print_results`、`result_attr`、`file_path`、`display_edges`）是用户指定结果传递方式的标准参数。默认情况下，将
    JSON 文本流式传输到标准输出。
- en: Run `tg_closeness_cent` with `v_type = Airport`, `e_type =` `**flight_to**`,
    and `rev_e_type = reverse_flight_to`. The other parameters can be left at their
    default values.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `v_type = Airport`、`e_type = flight_to` 和 `rev_e_type = reverse_flight_to`
    运行 `tg_closeness_cent`。其他参数可以保持默认值。
- en: The results show that the top 10 airports are FRA, CDG, LHR, DXB, AMS, LAX,
    JFK, YYZ, IST, and ORD, which decode to Frankfurt, Charles de Gaulle (Paris),
    London Heathrow, Domodedovo (Moscow), Amsterdam, Los Angeles, John F. Kennedy
    (New York), Toronto, Istanbul, and O’Hare (Chicago). These airports are widely
    recognized as the busiest and more important hub airports in the world, so the
    results seem logical.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，前10名机场是FRA、CDG、LHR、DXB、AMS、LAX、JFK、YYZ、IST和ORD，对应法兰克福、巴黎戴高乐、伦敦希思罗、多莫杰多沃、阿姆斯特丹、洛杉矶、纽约肯尼迪、多伦多、伊斯坦布尔和芝加哥奥黑尔。这些机场被广泛认可为世界上最繁忙和最重要的枢纽机场，因此结果看起来合乎逻辑。
- en: We next calculate betweenness centrality. The betweenness centrality of a vertex
    is defined as the number of shortest paths that pass through it, divided by the
    total number of shortest paths of the graph. An example of high betweenness is
    the Panama Canal. It is a part of the sea journey between ports on the Atlantic
    Ocean and ports on the Pacific Ocean, giving it high betweenness centrality even
    though Panama itself is less often the start or end of a journey. Gas stations
    are also often placed at intersections with high betweenness centrality. Though
    they are typically not the start or end of a journey, it’s useful for gas stations
    to be along the routes of many travelers, each of whom has a different start and
    end route.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来计算介数中心性。一个顶点的介数中心性定义为通过它的最短路径数量除以图的总最短路径数量。高介数的一个例子是巴拿马运河。它是连接大西洋港口和太平洋港口之间海上旅行的一部分，因此它的介数中心性很高，尽管巴拿马本身很少作为旅程的起点或终点。加油站通常也放置在介数中心性高的交叉路口。虽然它们通常不是旅程的起点或终点，但对于加油站而言，沿着许多旅行者的路线是有用的，每个旅行者的起点和终点路线不同。
- en: Next, run `tg_betweenness_cent` with the same parameter settings you used for
    `tg_closeness_cent`. It takes longer to run because betweenness centrality considers
    paths from anywhere to anywhere, whereas closeness centrality considers only one
    hub vertex.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用与`tg_closeness_cent`相同的参数设置运行`tg_betweenness_cent`。由于介数中心性考虑从任何地方到任何地方的路径，所以运行时间较长，而接近中心性只考虑一个中心顶点。
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: All algorithms are not created equal. Check your algorithm library’s documentation
    for guidance on the expected time and resources to run an algorithm.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有算法并非同质。查看您的算法库文档，了解运行算法所需的预期时间和资源。
- en: For betweenness, the top 10 airports are Domodedovo, Peking (Beijing), Chicago
    O’Hare, Istanbul, Bogota, Denver, Atlanta, Manila, Bueno Aires, and Dallas–Fort
    Worth. These results are quite different and perhaps surprising. Remember that
    betweenness gives a high score to bottlenecks or gateways like the Panama Canal.
    We can speculate that Bogota and Buenos Aires are important gateway airports for
    regional airports in South America. Manila may play a similar role for the Philippines
    and Southeast Asia.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于介数中心性，前10名机场是多莫杰多沃、北京、芝加哥奥黑尔、伊斯坦布尔、波哥大、丹佛、亚特兰大、马尼拉、布宜诺斯艾利斯和达拉斯-沃斯堡。这些结果相当不同，也许令人惊讶。请记住，介数中心性高分给像巴拿马运河这样的瓶颈或门户。我们可以推测波哥大和布宜诺斯艾利斯对南美地区的区域机场非常重要。马尼拉可能对菲律宾和东南亚发挥类似作用。
- en: Moreover, the standard betweenness algorithm considers all shortest paths to
    be equally important, so getting from LAX (Los Angeles) to JFK (New York) has
    the same importance as getting from SXE (Sale, Australia) to QGQ (Attu, Greenland).
    We did not take passenger volume or number of flights into consideration. If we
    had this data, we would then want to modify the algorithm to compute a weighted
    betweenness score. Since TigerGraph GDS algorithms are written in GSQL, they can
    be modified by a GSQL user. In the next section, we will try our hand at customizing
    algorithms.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，标准介数算法认为所有最短路径同等重要，因此从洛杉矶到纽约的路径和从Sale (Australia)到QGQ (Attu, Greenland)的路径同样重要。我们没有考虑乘客数量或航班数。如果我们有这些数据，我们将修改算法以计算加权介数分数。由于TigerGraph
    GDS算法是用GSQL编写的，因此可以由GSQL用户修改。在下一节中，我们将尝试自定义算法。
- en: Find shortest paths
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找最短路径
- en: First we will use the shortest path algorithm for unweighted edges; this will
    tell us which airline routes have the fewest stops. Then we will run the shortest
    path algorithm for positive edge weights, which will tell us which routes travel
    the fewest miles. Of course, there can be multiple paths that have the same path
    length. Some algorithms find *a* shortest path, and some find *all* shortest paths.
    In a weighted graph, it takes only a little more bookkeeping to find the set of
    shortest paths from one starting point to *every* other vertex as it does to find
    the shortest path to just one destination vertex. This is because, for a weighted
    graph, every edge in the graph must be traversed in order to be certain that the
    algorithm has found the absolute shortest path. Therefore, the shortest path algorithms
    in the library are the one-source-all-destinations variety.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用无权边的最短路径算法；这将告诉我们哪些航线中转最少。然后，我们将运行带有正边权重的最短路径算法，这将告诉我们哪些航线最少飞行里程。当然，可能存在多条具有相同路径长度的路径。一些算法找到*一条*最短路径，而一些找到*所有*最短路径。在加权图中，要确保算法找到绝对最短路径，必须遍历图中的每条边。因此，图库中的最短路径算法是一源到所有目标的类型。
- en: We need to know the ID for the source vertex. Unfortunately, it is difficult
    to select an airport ID system that uses names that everyone knows. City names
    are insufficient, because some cities have multiple airports, and while many travelers
    know IATA codes like LAX, this database extends to smaller airports that do not
    have IATA codes. The OpenFlights.org data tables use numerical IDs of their own
    devising. For example, the ID for LAX is 3484\. As a compromise, our graph database
    concatenates the IATA code with the OpenFlights.org ID, so our ID for LAX is LAX-3484.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道源顶点的ID。不幸的是，选择一个所有人都知道的机场ID系统很困难。城市名称是不够的，因为一些城市有多个机场，而许多旅行者知道像LAX这样的IATA代码，但这个数据库包括没有IATA代码的小型机场。OpenFlights.org的数据表使用他们自己设计的数字ID。例如，LAX的ID是3484。为了妥协，我们的图数据库将IATA代码与OpenFlights.org的ID连接起来，因此我们对LAX的ID是LAX-3484。
- en: 'To help users find an airport’s ID, the starter kit includes a query called
    `_search_for_vertex`. It has three parameters: a vertex type, the name of an attribute
    of that vertex type, and the value you are looking for. The query returns the
    IDs and names of all matching vertices. For example if we wanted to find the ID
    for Cleveland’s main airport, we would run the following query:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助用户找到机场的ID，起始套件包含一个名为 `_search_for_vertex` 的查询。它有三个参数：顶点类型，该顶点类型的属性名称以及您要查找的值。该查询返回所有匹配顶点的ID和名称。例如，如果我们想找到克利夫兰主要机场的ID，我们将运行以下查询：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We get three matching airports. Cleveland Hopkins International Airport is the
    major one, so let’s use CLE-3486\. Looking at GraphStudio’s table view, you will
    see output like [Table 9-3](#search_results_for_airports_located_in).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了三个匹配的机场。克利夫兰霍普金斯国际机场是主要的一个，所以让我们使用CLE-3486。在GraphStudio的表视图中查看，您将看到类似 [Table 9-3](#search_results_for_airports_located_in)
    的输出。
- en: Table 9-3\. Search results for airports located in Cleveland
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-3\. 克利夫兰机场的搜索结果
- en: '| v_id | v_type | Result.id | Result.name |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| v_id | v_type | Result.id | Result.name |'
- en: '| --- | --- | --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| HDI-8793 | Airport | HDI-8793 | Hardwick Field |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| HDI-8793 | 机场 | HDI-8793 | 哈德威克场 |'
- en: '| CLE-3486 | Airport | CLE-3486 | Cleveland Hopkins International Airport |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| CLE-3486 | 机场 | CLE-3486 | 克利夫兰霍普金斯国际机场 |'
- en: '| BKL-8544 | Airport | BKL-8544 | Burke Lakefront Airport |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| BKL-8544 | 机场 | BKL-8544 | 伯克湖滨机场 |'
- en: 'Now run the shortest path algorithm, `tg_shortest_ss_no_wt`, with these arguments:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用以下参数运行最短路径算法 `tg_shortest_ss_no_wt`：
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Look at either the JSON or tabular output. It’s a lot of data (remember we have
    nearly eight thousad airports), and many of the airport IDs are unfamiliar. [Table 9-4](#example_of_shortest_path_from_cle_to_an)
    shows one of the shortest paths. While the data may be correct and useful for
    a database, it’s not very human friendly.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 查看JSON或表格输出。这是大量数据（记住我们有将近8000个机场），而且许多机场ID都不熟悉。[Table 9-4](#example_of_shortest_path_from_cle_to_an)
    展示了最短路径之一。尽管数据可能对数据库是正确和有用的，但对人类不太友好。
- en: Table 9-4\. Example of shortest path from CLE to another airport
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-4\. 从CLE到其他机场的最短路径示例
- en: '| v_id | v_type | ResultSet.@min_dis | ResultSet.@path_list |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| v_id | v_type | ResultSet.@min_dis | ResultSet.@path_list |'
- en: '| --- | --- | --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| ZQZ-10940 | Airport | 4 | [ “CLE-3486”,'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '| ZQZ-10940 | 机场 | 4 | [ “CLE-3486”,'
- en: “YYZ-193”,
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “YYZ-193”，
- en: “TPE-2276”,
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: “TPE-2276”，
- en: “SJW-6347”,
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “SJW-6347”，
- en: “ZQZ-10940”
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “ZQZ-10940”
- en: '] |'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '] |'
- en: In the next section, we will modify the algorithm to give us more readable output
    and to only show results a certain distance from the source vertex using edge
    weights.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将修改算法以提供更可读的输出，并且仅显示距离源顶点一定距离的结果，使用边权重。
- en: Modify a GSQL algorithm to customize the output
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改GSQL算法以自定义输出
- en: 'Let’s make two changes to customize the output. First, click on the Save As
    icon on the menu bar above the GSQL code window. Name the copied algorithm *tg_shortest_ss_modified*.
    We will output only those paths that are no more than three hops long, and we
    will add the city name as another field in the output. We make edits in four places:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对输出进行两次更改以进行定制。首先，在GSQL代码窗口上方的菜单栏中点击“另存为”图标。将复制的算法命名为*tg_shortest_ss_modified*。我们只输出不超过三跳的路径，并将城市名称作为输出的另一个字段添加进去。我们在四个地方进行编辑：
- en: 'Find the line:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到行：
- en: '[PRE3]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Insert another line below it:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其下插入另一行：
- en: '[PRE4]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This defines data structures to hold lists of cities.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这定义了用于保存城市列表的数据结构。
- en: 'About 10 lines below that, find the line:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大约在其下10行处，找到行：
- en: '[PRE5]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Insert this line above it:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其上插入这一行：
- en: '[PRE6]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It’s important to insert this line above, in order to get the right punctuation.
    That is, we want to end up with:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要的是在上方插入此行，以获得正确的标点符号。也就是说，我们希望得到以下结果：
- en: '[PRE7]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Find the other line that updates `@path_list`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到另一行更新`@path_list`的行：
- en: '[PRE8]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Insert another line below it:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其下插入另一行：
- en: '[PRE9]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Find the line near the end that prints the paths:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到接近末尾打印路径的行：
- en: '[PRE10]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Modify and extend it so that it becomes:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改并扩展它，使其变成：
- en: '[PRE11]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save and install this algorithm. Run it with the same input parameters as before.
    Now you should see some recognizable paths, such as the examples in [Table 9-5](#examples_of_shortest_paths_with_the_add).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并安装此算法。使用与之前相同的输入参数运行它。现在你应该看到一些可识别的路径，例如[表9-5](#examples_of_shortest_paths_with_the_add)中的示例。
- en: Table 9-5\. Examples of shortest paths with the addition of city names
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 表9-5。最短路径示例，包含城市名称的添加
- en: '| v_id | v_type | ResultSet.@city_list | ResultSet.@min_dis | ResultSet.@path_list
    |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| v_id | v_type | ResultSet.@city_list | ResultSet.@min_dis | ResultSet.@path_list
    |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| LAR-5746 | Airport | [ “Cleveland”,'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '| LAR-5746 | 机场 | [ “克利夫兰”，'
- en: “Denver”,
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: “丹佛”，
- en: “Laramie”
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: “拉勒米”
- en: '] | 2 | [ “CLE-3486”,'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '] | 2 | [ “CLE-3486”，'
- en: “DEN-3751”,
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: “DEN-3751”，
- en: “LAR-5746”
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: “LAR-5746”
- en: '] |'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '] |'
- en: '| BQK-5725 | Airport | [ “Cleveland”,'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '| BQK-5725 | 机场 | [ “克利夫兰”，'
- en: “Atlanta”,
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: “亚特兰大”，
- en: “Brunswick”
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: “布伦瑞克”
- en: '] | 2 | [ “CLE-3486”,'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '] | 2 | [ “CLE-3486”，'
- en: “ATL-3682”,
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: “ATL-3682”，
- en: “BQK-5725”
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: “BQK-5725”
- en: '] |'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '] |'
- en: Let’s now run the shortest path algorithm for positive weights. This version
    is better for travelers who want to minimize the distance traveled. If our weights
    were CO[2] exhaust instead of miles, we would be minimizing carbon emissions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行正权重的最短路径算法。这个版本更适合希望最小化行程距离的旅行者。如果我们的权重是CO[2]排放而不是英里数，那么我们将会最小化碳排放。
- en: While there may be an algorithm already in the starter kit, let’s go to the
    GitHub repository for the algorithm library and look for the latest version. In
    a web browser, go to [*https://github.com/tigergraph/gsql-graph-algorithms/blob/mas⁠ter/algorithms*](https://github.com/tigergraph/gsql-graph-algorithms/blob/master/algorithms).
    From there, drill down several categories and subcategories—*Path → shortest_path
    → weighted → positive → traceback*—to eventually find *tg_shortest_ss_pos_wt_tb.gsql*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然起始套件可能已经有一个算法，但让我们去GitHub代码库中的算法库查找最新版本。在网络浏览器中，前往[*https://github.com/tigergraph/gsql-graph-algorithms/blob/mas⁠ter/algorithms*](https://github.com/tigergraph/gsql-graph-algorithms/blob/master/algorithms)。从那里，深入几个类别和子类别——*路径
    → 最短路径 → 加权 → 正向 → 回溯*——最终找到*tg_shortest_ss_pos_wt_tb.gsql*。
- en: 'If you do not already have the *tg_shortest_ss_pos_wt_tb* query in GraphStudio,
    then click the Create Query (+ symbol) button in the GraphStudio query selection
    pane. Name the new query *tg_shortest_ss_pos_wt_tb*. Copy the text from *tg_shortest_ss_pos_wt_tb.gsql*
    in the GitHub repository and use it to replace the existing query text in GraphStudio.
    Save and install the query. Run the algorithm with the following settings:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在GraphStudio中还没有*tg_shortest_ss_pos_wt_tb*查询，请在GraphStudio查询选择窗格中点击“创建查询”（+符号）按钮。命名新查询为*tg_shortest_ss_pos_wt_tb*。从GitHub代码库中复制*tg_shortest_ss_pos_wt_tb.gsql*中的文本，并将其用于替换GraphStudio中现有查询文本。保存并安装查询。使用以下设置运行算法：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'One might think that fewest miles would correlate well with fewest connections,
    but in the results you will see some paths that have 8 and even 10 hops. To narrow
    down the results, let’s make one edit to the algorithm: only display paths that
    have a cost value under 3,000 (representing a total trip distance shorter than
    three thousand miles). That will limit the results to North America.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能认为里程最少与连接最少会有很好的相关性，但在结果中，你会看到一些有8甚至10个跳数的路径。为了缩小结果范围，让我们对算法进行一次修改：只显示总行程距离小于3,000的路径（表示总行程距离短于三千英里）。这将限制结果在北美地区。
- en: 'Find the lines that print the output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 查找打印输出的行：
- en: '[PRE13]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add a `WHERE` clause (and move the semicolon) to change each of them to:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `WHERE` 子句（并移动分号），将它们改为：
- en: '[PRE14]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These shorter results still have some long paths. For example, one can go from
    Cleveland to ZKE (the small town of Kashechewan, Ontario, reachable only by airport
    and seasonal ice road) in five hops, via YYZ (Toronto), YTS (Timmins), YMO (Moosonee),
    and YFA (Fort Albany), all in just 820 miles. This five-hop route is a fairly
    straight path going north. It requires multiple hops because the northern towns
    are very small with limited air service.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这些较短的结果仍然有一些长路径。例如，可以通过五个跳数从克利夫兰到ZKE（安大略省卡舍丘安小镇，仅可通过机场和季节性冰路到达），经过YYZ（多伦多）、YTS（蒂米斯）、YMO（穆森尼）、和YFA（阿尔巴尼堡），全程只有820英里。这条五跳路径是一条相当直通的北上路径。由于北部城镇非常小且航空服务有限，它需要多次跳转。
- en: Find and analyze communities
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找并分析社区
- en: We expect the global airport network to be highly interconnected, but there
    are parts of the world that are served only by smaller regional airports. Will
    a community detection algorithm point these out to us?
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们预计全球机场网络将高度互联，但世界上一些地区仅由较小的地区机场提供服务。社区检测算法会指出这些地点吗？
- en: In a directed graph, a strongly connected component (SCC) is the maximal set
    of vertices such that every vertex can reach every other vertex in the component.
    In an airline route network, if an airline offers direct service between two airports
    in both directions, then meeting the SCC requirement is easy. In some areas where
    there is less demand, the direct service is not bidirectional. That is where we
    may find a break, separating the graph into separate SCCs.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在有向图中，强连通分量（SCC）是指最大的顶点集合，使得组件中的每个顶点都可以到达组件中的任何其他顶点。在航空网络中，如果航空公司在两个机场之间提供双向直达服务，则满足SCC要求很容易。在一些需求较少的地区，直达服务不是双向的。这就是我们可能会找到一个断点的地方，将图分隔为单独的SCC。
- en: 'Run `tg_scc` with the following parameter settings:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下参数设置运行 `tg_scc`：
- en: '[PRE15]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`top_k_dist` determines how many communities to output, and `output_limit`
    is how many individual vertices to output. The community ID of each vertex will
    be stored on the vertex attribute called `score`.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`top_k_dist` 确定输出多少个社区，而 `output_limit` 确定输出多少个单独的顶点。每个顶点的社区ID将存储在名为 `score`
    的顶点属性中。'
- en: Switch the output to tabular results. There are two tables to display. The table
    for `@@cluster_dist_heap`, shown in [Table 9-6](#airport_community_sizes_and_counts),
    tells us that the largest community includes 3,354 airports. Then there is one
    community with 10 airports, one with 8, three with 4 airports, three with 2 airports,
    and 4,545 singleton airports.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出切换为表格结果。有两个表需要显示。在 `@@cluster_dist_heap` 表中（见 [表9-6](#airport_community_sizes_and_counts)），我们得知最大的社区包括3,354个机场。然后有一个包括10个机场的社区，一个包括8个机场，三个包括4个机场，三个包括2个机场，以及4,545个单独的机场。
- en: Table 9-6\. Airport community sizes and counts
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 表9-6. 机场社区大小和计数
- en: '| csize | num |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| csize | num |'
- en: '| --- | --- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 3,354 | 1 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 3,354 | 1 |'
- en: '| 10 | 1 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 1 |'
- en: '| 8 | 1 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 1 |'
- en: '| 4 | 3 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 3 |'
- en: '| 2 | 3 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 3 |'
- en: '| 1 | 4,545 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 4,545 |'
- en: The output also includes a full list of all the vertices along with their community
    IDs. All vertices with the same community ID are members of the same community.
    Scanning the list of eight thousand vertices is not convenient, so let’s make
    another algorithm modification to get friendlier output.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 输出还包括所有顶点及其社区ID的完整列表。具有相同社区ID的所有顶点属于同一社区。扫描八千个顶点的列表不方便，因此让我们对算法进行另一次修改以获得更友好的输出。
- en: 'Use Save As to create a copy of the algorithm query called `tg_scc_modified`.
    Make the following three edits:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“另存为”创建算法查询的副本，称为 `tg_scc_modified`。进行以下三个编辑：
- en: 'In the top section containing the `Accum` declarations, add the declaration
    below:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含 `Accum` 声明的顶部部分，添加以下声明：
- en: '[PRE16]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This data structure will record the list of vertices belonging to each community.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种数据结构将记录属于每个社区的顶点列表。
- en: 'Near the end, in the output results section and just after several `clear()`
    statements, find the following block:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接近结尾处，在输出结果部分和几个`clear()`语句之后，找到以下块：
- en: '[PRE17]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Insert one additional line in the `POST-ACCUM` clause, and add the five-line
    `FOREACH` block afterward:'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`POST-ACCUM`子句中插入一行额外的代码，并在此后添加五行的`FOREACH`块：
- en: '[PRE18]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The line in the `POST-ACCUM` block builds the list of member lists, and the
    `FOREACH` block removes the lists that are too small or too big for our interest.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`POST-ACCUM`块中的代码构建成员列表，并且`FOREACH`块删除我们感兴趣的列表中过小或过大的列表。'
- en: 'Find the line:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到以下行：
- en: '[PRE19]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following line after it:'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此之后添加以下行：
- en: '[PRE20]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Save and install the `tg_scc_modified` `algorithm` query. Run it with the following
    settings. This time, we will exclude the list of individual vertices:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并安装`tg_scc_modified`算法查询。使用以下设置运行。这次，我们将排除个别顶点的列表：
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Look at the Table View results for `@@cluster_member_map`. The results show
    a community 1048630 with four members: [“AKB-7195”, “DUT-3860”, “KQA-6134”, “IKO-7196”]
    and community 3145861 with eight members: [“CXH-5500”, “LKE-6457”, “WSX-8173”,
    “RCE-8170”, “FBS-8174”, “LPS-6136”, “YWH-4106”, “DHB-9540”]. The community ID
    values that you see might differ, but the group membership should be consistent.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`@@cluster_member_map`的表视图结果。结果显示一个包含四名成员的社区1048630：[“AKB-7195”, “DUT-3860”,
    “KQA-6134”, “IKO-7196”]，以及一个包含八名成员的社区3145861：[“CXH-5500”, “LKE-6457”, “WSX-8173”,
    “RCE-8170”, “FBS-8174”, “LPS-6136”, “YWH-4106”, “DHB-9540”]。你看到的社区ID值可能有所不同，但成员组合应保持一致。
- en: 'Let’s visualize a community with 10 members and their flight connections. Note
    the community ID: 1048774\. Go to the Explore Graph page.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来可视化一个包含10名成员及其航班连接的社区。注意社区ID：1048774。前往探索图表页面。
- en: 'You should be on the Search vertices (magnifying glass icon) work screen. Follow
    these steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在搜索顶点（放大镜图标）工作界面上。按照以下步骤进行：
- en: In the Search configuration pane, next to `**Airport**`, click the filter icon
    to open an “Add attribute filter” popup window.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索配置窗格中，紧挨着`**机场**`，点击筛选器图标以打开“添加属性筛选器”弹出窗口。
- en: In the Condition drop-down menu, select Expression1 == Expression2.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在条件下拉菜单中，选择Expression1 == Expression2。
- en: For Expression1, set Operand = Attribute and Attribute name = score.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Expression1，设置Operand = 属性，属性名称 = score。
- en: For Expression2, set Operand = Real number and value = 1048774\. Your window
    should now look like [Figure 9-2](#adding_a_filter_to_select_the_vertices).
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Expression2，设置Operand = 实数，值 = 1048774。现在你的窗口应该看起来像 [图 9-2](#adding_a_filter_to_select_the_vertices)。
- en: Click ADD.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加。
- en: Back on the search configuration pane, make sure the number of vertices next
    to the Pick vertices button is at least 10.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到搜索配置窗格，确保选择顶点按钮旁边的顶点数至少为10。
- en: Click the Pick vertices button.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选择顶点按钮。
- en: '![Adding a filter to select the vertices belong to community 1048774](assets/gpam_0902.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![添加筛选器以选择属于社区1048774的顶点](assets/gpam_0902.png)'
- en: Figure 9-2\. Adding a filter to select the vertices that belong to community
    1048774
  id: totrans-201
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-2。添加筛选器以选择属于社区1048774的顶点
- en: In the exploration mode vertical menu, click the second icon, the one for “Expand
    from vertices.” In the list of edge types, unselect `**flight_route**`, so that
    we only include `**flight_to**` edges. Make sure the number of edges per vertex
    is at least 10\. Click the Expand button.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索模式垂直菜单中，点击第二个图标，“从顶点扩展”。在边类型列表中，取消选中`**航班路线**`，以便只包括`**航班至**`边。确保每个顶点的边数至少为10。点击扩展按钮。
- en: You should now see edges between the vertices. To tidy up the display, click
    the layout mode button in the lower right corner of the graph display pane. Choose
    force. You should now see a starlike shape, as in [Figure 9-3](#community_of_isolated_flight_routes_cov).
    We’d like to know more about these vertices, so click the Setting (gear-shaped)
    button in the menu at the top. With the `**Airport**` vertex type selected, check
    the boxes for city and country, and then click APPLY at the bottom. This adds
    labels in the graph view for city and country.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该看到顶点之间有边。为了整理显示，点击图表显示窗格右下角的布局模式按钮。选择force。你现在应该看到一个星形图案，如 [图 9-3](#community_of_isolated_flight_routes_cov)。我们希望了解更多关于这些顶点的信息，因此点击顶部菜单中的设置（齿轮形状）按钮。选择`**机场**`顶点类型后，勾选城市和国家的框，并点击底部的应用按钮。这会在图表视图中添加城市和国家的标签。
- en: We can see that this network of flights is confined to New Caledonia, a collection
    of islands in the South Pacific. The hub is Noumea, which is the capital. Furthermore,
    when we performed the “Expand from vertices” step, if there had been any flights
    to airports outside of New Caledonia, they would have shown up. Apparently there
    are no such flights in our database. This may not reflect reality. The OpenFlights.org
    dataset may be missing some flights, but it nevertheless proved to be an interesting
    vehicle to see how graph algorithms can be used to reveal facts and insights.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这个航班网络局限于南太平洋的新喀里多尼亚群岛。其枢纽是首都努美阿。此外，当我们执行“从顶点扩展”的步骤时，如果有任何飞往新喀里多尼亚以外机场的航班，它们会显示出来。显然，我们的数据库中没有这样的航班。这可能不符合现实。OpenFlights.org数据集可能缺少一些航班，但它仍然证明是一个用来揭示事实和见解的有趣工具。
- en: '![Community of isolated flight routes covering New Caledonia](assets/gpam_0903.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![覆盖新喀里多尼亚的孤立航线社区](assets/gpam_0903.png)'
- en: Figure 9-3\. Community of isolated flight routes covering New Caledonia (see
    a larger version of this figure at [https://oreil.ly/gpam0903](https://oreil.ly/gpam0903))
  id: totrans-206
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-3\. 覆盖新喀里多尼亚的孤立航线社区（请在[https://oreil.ly/gpam0903](https://oreil.ly/gpam0903)上查看该图的更大版本）
- en: Chapter Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节总结
- en: In this chapter, we looked at the ways a network of airlines can be examined
    with graph algorithms. We used built-in GSQL algorithms included in the GDS Library
    to perform pathfinding, centrality calculation, and community detection operations.
    In addition, we modified existing query algorithms to filter the data and to give
    us more readable and useful results. Finally, we explored more of the functionality
    in the Explore Graph window of GraphStudio, creating a visually appealing graph
    diagram with easy-to-read labels in seconds.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用图算法分析航空网络的方法。我们使用了GDS库中包含的内置GSQL算法来进行路径查找、中心性计算和社区检测操作。此外，我们修改了现有的查询算法来过滤数据，并为我们提供了更易读和有用的结果。最后，我们进一步探索了GraphStudio中的探索图窗口的功能，仅需几秒钟就创建了一个视觉上吸引人的图表，并具有易于阅读的标签。
- en: ^([1](ch09.html#ch01fn30-marker)) “Our Most Important Traffic and Transport
    Figures,” Schiphol, accessed May 24, 2023, [*https://www.schiphol.nl/en/schiphol-group/page/traffic-review*](https://www.schiphol.nl/en/schiphol-group/page/traffic-review).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch09.html#ch01fn30-marker)) “我们最重要的交通和运输数据”，斯希普霍尔，访问时间2023年5月24日，[*https://www.schiphol.nl/en/schiphol-group/page/traffic-review*](https://www.schiphol.nl/en/schiphol-group/page/traffic-review)。
- en: ^([2](ch09.html#ch01fn31-marker)) “Airline, Airport and Route Data,” [OpenFlights.org](http://openflights.org),
    accessed May 24, 2023, [*https://openflights.org/data.html*](https://openflights.org/data.html).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch09.html#ch01fn31-marker)) “航空公司、机场和航线数据”，[OpenFlights.org](http://openflights.org)，访问时间2023年5月24日，[*https://openflights.org/data.html*](https://openflights.org/data.html)。
- en: ^([3](ch09.html#ch01fn32-marker)) The International Air Transport Association
    assigns each major airport a three-letter code, such as AMS for Amsterdam Schiphol
    Airport or CDG for Paris Charles de Gaulle Airport. The vertex attribute `ID`
    is an internal number used only in this dataset.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch09.html#ch01fn32-marker)) 国际航空运输协会为每个主要机场分配一个三个字母的代码，如AMS代表阿姆斯特丹斯希普霍尔机场，CDG代表巴黎戴高乐机场。顶点属性`ID`是仅在此数据集中使用的内部编号。
- en: ^([4](ch09.html#ch01fn33-marker)) “tigergraph / gsql-graph-algorithms,” GitHub,
    accessed May 24, 2023, [*https://github.com/tigergraph/gsql-graph-algorithms*](https://github.com/tigergraph/gsql-graph-algorithms).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch09.html#ch01fn33-marker)) “tigergraph / gsql-graph-algorithms”，GitHub，访问时间2023年5月24日，[*https://github.com/tigergraph/gsql-graph-algorithms*](https://github.com/tigergraph/gsql-graph-algorithms)。
- en: ^([5](ch09.html#ch01fn34-marker)) In real-life situations, flights often take
    slightly indirect routes to benefit from wind currents or to avoid restricted
    airspace.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch09.html#ch01fn34-marker)) 在现实生活中，航班通常会选择稍微绕道以利用风流或避开受限制的空域。
- en: ^([6](ch09.html#ch01fn35-marker)) “TigerGraph Graph Data Science Library,” TigerGraph,
    accessed May 24, 2023, [*https://docs.tigergraph.com/graph-ml/current/intro*](https://docs.tigergraph.com/graph-ml/current/intro).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch09.html#ch01fn35-marker)) “TigerGraph图数据科学库”，TigerGraph，访问时间2023年5月24日，[*https://docs.tigergraph.com/graph-ml/current/intro*](https://docs.tigergraph.com/graph-ml/current/intro)。
