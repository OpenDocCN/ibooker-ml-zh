- en: Part IV. Serving
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分。服务
- en: '*Well, you can’t recommend that! Why sometimes the best recommendations aren’t
    right.*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*哎呀，你不能这样推荐！有时候最好的推荐并不一定是正确的。*'
- en: 'One of the authors, Bryan, has a big question for the Amazon recommendation
    team: “Exactly how many vacuum cleaners do you think I need?” Just because Bryan
    bought the fancy Dyson to clean up after his dog doesn’t mean he’s soon going
    to buy a second one, and yet his Amazon home page seems hell-bent on recommending
    it. The reality is you’ll always need to include business logic—or basic human
    logic—that you want to include in the flow of your recommendation system to prevent
    silliness. Whether you’re facing contextually inappropriate recommendations, business
    infeasible recommendations, or simply the necessity to keep the set of recommendations
    a bit less monomaniacal, the last-step ordering can crucially improve recommendations.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一位作者Bryan 对亚马逊推荐团队有一个很大的问题：“你认为我需要多少个吸尘器？”仅仅因为Bryan 买了一台时髦的戴森来清理他的狗，并不意味着他很快就会再买一台，但他的亚马逊主页似乎非常坚决地推荐它。事实上，你总是需要包括业务逻辑
    —— 或者你希望在推荐系统流程中包括的基本人类逻辑，以防止愚蠢的情况发生。无论你面对的是情境不合适的推荐、业务不可行的推荐，还是简单地需要让推荐集合显得不那么专一，最后一步的排序都可以关键地改善推荐结果。
- en: 'But hold your horses! Don’t think the ordering step is all switch cases and
    manually overriding your recommendation system. A synergy needs to exist between
    your ranking and your serving. Bryan also has a story about a certain query-based
    recommender he built for clothes: he wanted to implement a super-simple diversity
    filter on his recommendations—checking that the clothes recommended were of different
    merchandise classes. He made the output of his scoring model stack-rank the recommendations
    by merchandise class, so he could pick a few from each to serve. Lo and behold,
    the first week in production he was recommended 3, 4, even 5 backpacks out of
    10 recommendations. Studious as users may be, this seemed erroneous and required
    a bit of QA. His error? Backpacks can be a member of up to three merch classes,
    so they were sneaking into several diversity classes!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但是慢下来！不要认为订购步骤只是全部转换情况和手动覆盖推荐系统。你的排名和服务之间需要存在协同作用。Bryan 还有一个关于他为服装建立的特定基于查询的推荐系统的故事：他想在推荐中实施一个超级简单的多样性过滤器
    —— 检查推荐的服装是否属于不同的商品类别。他让他的评分模型的输出按商品类别堆栈排名推荐，这样他可以从每个类别中挑选几个来服务。不可思议的是，投入生产的第一周，他推荐了10个推荐中的3个、4个，甚至5个背包。用户可能很用心，但这似乎是错误的，并且需要进行一些质量保证。他的错误在哪里？背包可以是多达三种商品类别的成员，因此它们可以潜入多个多样性类别！
- en: Tricky problems where the theory meets production recommendations are the subject
    of this part of the book. We’ll talk about diverse recommendations as in this
    example, but we’ll also discuss other important business priorities that factor
    into the serving part of a recommendation pipeline.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的这一部分，我们将讨论理论与生产推荐相遇的棘手问题。我们将像这个例子中那样谈论多样化的推荐，但我们也将讨论其他重要的业务优先事项，这些事项对推荐管道的服务部分起到了作用。
