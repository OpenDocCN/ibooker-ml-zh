- en: Chapter 5\. Text Processing Apps with ML Kit on Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。使用ML Kit在Android上进行文本处理应用程序
- en: Perhaps the two largest fields in machine learning are computer vision and natural
    language processing. In [Chapter 4](ch04.html#computer_vision_apps_with_ml_kit_on_and),
    you learned about some common computer vision scenarios with models that were
    already defined for you in ML Kit. In this chapter, you’ll explore some natural
    language processing ones, including how to recognize text from digital ink, perform
    smart replies to messages, and extract entities such as addresses from text. These
    are all off-the-shelf models for these specific scenarios. If you want to create
    apps that use other natural language processing models, such as text classification,
    you’ll have to create your own models using TensorFlow Lite, and then implement
    them on mobile. We’ll explore that in later chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 或许机器学习中最大的两个领域是计算机视觉和自然语言处理。在[第四章](ch04.html#computer_vision_apps_with_ml_kit_on_and)中，您已经了解到一些常见的计算机视觉场景，这些场景已经在ML
    Kit中为您定义好了模型。在本章中，您将探索一些自然语言处理的场景，包括如何从数字墨水中识别文本、对消息进行智能回复以及从文本中提取地址等实体。这些都是特定场景的现成模型。如果您想创建使用其他自然语言处理模型的应用程序，例如文本分类，您将需要使用TensorFlow
    Lite创建自己的模型，然后在移动设备上实现它们。我们将在后面的章节中探讨这一点。
- en: Entity Extraction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体提取
- en: When given large amounts of text, extracting important information from it can
    be a difficult task. Often information that follows a particular structure, such
    as an address, might be predictable for one country but work very differently
    in another, so having a rules-based approach to acquire the information can lead
    to a lot of coding.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定大量文本时，从中提取重要信息可能是一项困难的任务。通常，遵循特定结构的信息，例如地址，可能在一个国家是可预测的，但在另一个国家可能有很大不同，因此，采用基于规则的方法获取信息可能需要大量编码工作。
- en: For example, consider [Figure 5-1](#extracting_entities_from_text), where I’ve
    sent a message to my friend Nizhoni with some details in it. As a human we can
    extract valuable information about this, such as “tomorrow at 5 PM,” understanding
    that it’s a date and time. But writing code to do that can be really difficult.
    It’s hard enough trying to write code to understand formatted dates where different
    countries can structure them differently—i.e., 5/2 can be May 2nd or February
    5th, depending on where you live—and trying to extract from text such as “tomorrow”
    is even more difficult! While ML may not be a perfect solution to this, it should
    really help with reducing the amount of code you need to write for common scenarios.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，请考虑[图5-1](#extracting_entities_from_text)，我已向我的朋友Nizhoni发送了一条包含一些细节的消息。作为人类，我们可以从中提取有价值的信息，比如“明天下午5点”，理解它是日期和时间。但编写代码来做到这一点确实很困难。试图编写能够理解不同国家日期格式的代码已经很难了，例如，5/2可能是5月2日或2月5日，具体取决于您所在的地区，并且尝试从如“明天”这样的文本中提取信息更加困难！虽然ML可能不是这个问题的完美解决方案，但它确实有助于减少您需要编写的用于常见场景的代码量。
- en: '![](assets/aiml_0501.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_0501.png)'
- en: Figure 5-1\. Extracting entities from text
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-1。从文本中提取实体
- en: As you can see beneath the text, a list was generated with the entities that
    were found. So, for example, the “tomorrow at 5PM” was extracted as a datetime.
    Others like phone numbers and email addresses were also extracted correctly. Often
    a value will match multiple patterns, so, for example, the ISBN of the book starts
    with a three-digit number, which matches the pattern of a phone number, so it
    was detected as both entities!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在文本下面所看到的那样，生成了一个包含找到的实体的列表。例如，“明天下午5点”被提取为日期时间。其他如电话号码和电子邮件地址也被正确提取。通常一个值会匹配多个模式，例如，书的ISBN号以三位数开头，这与电话号码的模式匹配，因此被检测为两个实体！
- en: With this in mind, ML Kit has entity extraction APIs that can create an app
    that can read data like this—including addresses, phone numbers, email, and more.
    We’ll explore how to create such an app in this section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，ML Kit具有实体提取API，可以创建一个可以读取如此数据的应用程序，包括地址、电话号码、电子邮件等。我们将在本节中探讨如何创建这样的应用程序。
- en: Start Creating the App
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始创建应用程序
- en: 'I’m assuming you’ve gone through the steps of creating a new app as shown in
    [Chapter 3](ch03.html#introduction_to_ml_kit). If you haven’t, I’d recommend starting
    there first. As before, create a new single view app using Android Studio. Find
    the app-level build.gradle file and add the entity extraction libraries with it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设您已经按照[第三章](ch03.html#introduction_to_ml_kit)中所示的步骤创建了一个新应用程序。如果没有，请先从那里开始。与之前一样，使用
    Android Studio 创建一个新的单视图应用程序。找到应用程序级别的 build.gradle 文件，并将实体提取库与其一起添加：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that at time of writing entity extraction was a beta product, so there
    may be some bugs. Also, if you are following this, be sure to check the entity
    extraction site at the ML Kit documentation for the [most recent version](https://oreil.ly/DP4WI).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在撰写本文时，实体提取是一个测试版产品，可能存在一些错误。此外，如果您正在遵循此文档，请务必查看 ML Kit 文档中实体提取站点的[最新版本](https://oreil.ly/DP4WI)。
- en: Create the Layout for the Activity
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建活动的布局
- en: We’ll keep the app really simple so we can focus on the entity extraction APIs,
    and as a result, you can see the app from [Figure 5-1](#extracting_entities_from_text)
    has only three controls in it—one for entering the text, a button for triggering
    the extraction, and a text field for rendering out what the API detected.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将应用程序保持非常简单，以便专注于实体提取 API，因此您可以从[图 5-1](#extracting_entities_from_text)中看到它只有三个控件：一个用于输入文本的，一个用于触发提取的按钮，以及一个用于呈现
    API 检测结果的文本字段。
- en: 'This will keep the XML for the layout pretty simple:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使布局的 XML 保持非常简单：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The EditText field is set to be multiline (by using `singleLine="false"`) so
    we can enter text that looks more like a text message or tweet. All three controls
    are encapsulated within a LinearLayout so we can see them vertically distributed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: EditText 字段设置为多行（通过使用 `singleLine="false"`），以便我们可以输入更像文本消息或推文的文本。所有三个控件都封装在
    LinearLayout 中，以便我们可以垂直分布它们。
- en: Write the Entity Extraction Code
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写实体提取代码
- en: 'When using the entity extraction APIs there are four phases that you’ll follow:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用实体提取 API 时，您将遵循四个阶段：
- en: Initialize the extractor by creating a client
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建客户端来初始化提取器
- en: Prepare the extractor by downloading the model
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过下载模型来准备提取器
- en: Use the extractor by annotating text
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用提取器通过文本进行注释
- en: Parse the inferred annotations
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析推断出的注释
- en: Let’s look at these one by one.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看这些。
- en: 'First, you’ll initialize the extractor by creating the client. Because the
    extractor can work across many languages, it has been designed with a model per
    language, so at initialization time, you can pick the correct model by specifying
    the language. So, for example, if you wanted to use English, you could use code
    like:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过创建客户端来初始化提取器。由于提取器可以跨多种语言工作，因此它被设计为每种语言一个模型，因此在初始化时，您可以通过指定语言来选择正确的模型。例如，如果您想使用英语，您可以使用以下代码：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For other languages, you set the `EntityExtractorOptions` to a supported language
    using the built-in symbols. At the time of writing, 15 languages were supported,
    and you can check the [documentation](https://oreil.ly/aS55g) to see the complete
    set.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他语言，您可以使用内置符号将 `EntityExtractorOptions` 设置为支持的语言。截至撰写本文时，支持 15 种语言，您可以查看[文档](https://oreil.ly/aS55g)来查看完整的设置。
- en: Note that setting the *language* doesn’t set the *domicile*. These are kept
    separately as different places with the same language may do things differently.
    So, for example, the language in both the US and the UK is *English*, but they
    use dates differently. To revisit the date example from earlier, in the US 5/2
    is May 2nd, whereas in the UK it’s February 5th. You’ll configure this *after*
    you download the model.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，设置*语言*不会设置*居住地*。它们被分开保存，因为同一语言的不同地方可能会有不同的做法。例如，在美国和英国都使用*英语*，但它们使用日期的方式不同。举个日期的例子，例如在美国，5/2
    是5月2日，而在英国，它是2月5日。您将在下载模型*之后*配置这一点。
- en: To download the model you’ll call the `downloadModelIfNeeded()` method, which
    is asynchronous and will call you back with a success or failure listener. I find
    the easiest thing to do is have a Boolean that you set to true or false depending
    on success or failure of the model download.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载模型，您将调用 `downloadModelIfNeeded()` 方法，这是一个异步方法，并将通过成功或失败的监听器回调您。我发现最简单的方法是使用一个布尔值，根据模型下载的成功或失败来设置为
    true 或 false。
- en: 'Here’s an example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once you have the extractor, you can then use it by building an `EntityExtractionParams`
    object with your text, as well as any desired options such as the locale.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了提取器，您可以通过使用文本以及任何所需的选项（如语言环境）来构建一个 `EntityExtractionParams` 对象来使用它。
- en: 'Here’s an example using the default parameters:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用默认参数的示例：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or, if you would prefer to, for example, set the locale, you can do so when
    creating the parameters. Here’s an example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你愿意，例如在创建参数时设置地区，可以这样做。以下是一个示例：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about the `EntityExtractionParams` object and explore the
    available parameters on the [ML Kit documentation site](https://oreil.ly/5A3yJ).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[ML Kit 文档网站](https://oreil.ly/5A3yJ)了解更多关于`EntityExtractionParams`对象的信息并探索可用的参数。
- en: When you call the annotate method using the given parameters, you’ll get a list
    of `EntityAnnotation` objects back as the result in the on-success listener. Each
    entity annotation object will contain a number of entities, and each entity will
    have a string containing the text within the original text that matches an entity
    type, as well as the type itself, so, for example, where the text in [Figure 5-1](#extracting_entities_from_text)
    says “lmoroney@area51.net,” the entity extractor will extract that text, and put
    it into an entity with type “email.” There are many different entities available—you
    can see the [complete list of supported entities](https://oreil.ly/Tzxt7) on the
    ML Kit site.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用给定的参数调用标注方法时，在成功监听器中你会得到一个`EntityAnnotation`对象的列表作为结果。每个实体标注对象都将包含多个实体，每个实体都将包含一个字符串，其中包含与实体类型匹配的原始文本内的文本，以及实体类型本身。例如，在
    [Figure 5-1](#extracting_entities_from_text) 中的文本“lmoroney@area51.net”，实体提取器将提取该文本，并将其放入类型为“email”的实体中。ML
    Kit 网站上有许多不同的可用实体类型——你可以在那里查看[支持实体的完整列表](https://oreil.ly/Tzxt7)。
- en: 'So, for example, we could process the text with code like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，例如，我们可以用如下代码处理文本：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the entity extractor is called to annotate the text with the params; in
    the on-success listener, each entity annotation will have its entities enumerated,
    and for each of those entities the `getStringFor` helper method will be called
    to get the string.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，实体提取器被调用以用参数标注文本；在成功监听器中，每个实体标注将枚举其实体，并对每个实体调用`getStringFor`助手方法来获取字符串。
- en: 'This method simply creates a string with the entity type and the part of the
    original string that defined that entity (so, for example, as earlier, it might
    slice out “lmoroney@area51.net” as an email), so the helper method will generate
    a string that says something like “Type - Email : lmoroney@area51.net.”'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '这种方法只是创建一个包含实体类型和定义该实体的原始字符串部分的字符串（因此，例如，之前可能会将“lmoroney@area51.net”作为电子邮件切片出来），因此助手方法将生成类似“Type
    - Email: lmoroney@area51.net”的字符串。'
- en: 'Here’s the code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Putting It All Together
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: All that remains to be done is to handle the user interface code, capturing
    the input text, initializing the extractor, and calling the entity extraction
    when the user presses the button.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一剩下的工作就是处理用户界面代码，捕获输入文本，初始化提取器，并在用户按下按钮时调用实体提取。
- en: 'So, in your `MainActivity` you can update the module variables and the `onCreate`
    like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在你的`MainActivity`中，你可以像这样更新模块变量和`onCreate`：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `prepareExtractor` helper function just ensures the extractor model is
    available:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`prepareExtractor`助手函数只是确保提取器模型可用：'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And when the user presses the button, `doExtraction()` is called, which handles
    the extraction process and updates the output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下按钮时，将调用`doExtraction()`，该方法处理提取过程并更新输出：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That’s it for this app! This is a super simple one, where I just wanted to focus
    on getting you up and running with entity extraction quickly. You could use the
    extracted entities to create useful features—such as launching other apps on your
    device using Android Intents. Examples might be to launch the Maps app when the
    user touches on an extracted address, or launching the Phone app to make a phone
    call, etc. This type of entity extraction also powers smart assistants such as
    Google Assistant, Siri, or Alexa.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用就是这样了！这是一个非常简单的应用，我只想让你快速了解和使用实体提取。你可以利用提取出的实体来创建有用的功能——比如使用 Android Intents
    在你的设备上启动其他应用程序。例如，当用户点击提取出的地址时启动地图应用，或者启动电话应用进行电话呼叫等。这种类型的实体提取还支持智能助理，如 Google
    Assistant、Siri 或 Alexa。
- en: Handwriting and Other Recognition
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手写和其他识别
- en: It’s a common scenario to have handwriting recognized on touch devices, where
    you can draw strokes on a surface, and those strokes are then turned into text.
    So, for example, consider [Figure 5-2](#recognizing_handwriting_with_ml_kit),
    where I’ve created a very simple app that recognizes my terrible handwriting.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在触摸设备上识别手写是一个常见的场景，在这种场景中，您可以在表面上绘制笔画，然后将这些笔画转换为文本。因此，例如，请考虑[图5-2](#recognizing_handwriting_with_ml_kit)，在这里我创建了一个非常简单的应用程序来识别我的可怕的手写。
- en: '![](assets/aiml_0502.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_0502.png)'
- en: Figure 5-2\. Recognizing handwriting with ML Kit
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-2\. 使用ML Kit识别手写
- en: Let’s explore what it would take to build an app like this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨构建这样一个应用程序所需的步骤。
- en: Start the App
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动应用程序
- en: 'As before, create a new single view app (details in [Chapter 3](ch03.html#introduction_to_ml_kit)),
    using Android Studio. Edit the app’s build.gradle file to add a dependency to
    ML Kit’s digital ink recognition libraries:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，使用Android Studio创建一个新的单视图应用程序（详细信息请参阅[第3章](ch03.html#introduction_to_ml_kit)）。编辑应用程序的build.gradle文件，添加依赖项以使用ML
    Kit的数字墨水识别库：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These libraries support many different languages via separate models, so they’ll
    need to download the models in order for you to use them. This means that you’ll
    need to update your Android Manifest to allow access to the internet and to storage,
    or the app won’t have access to the model:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些库通过单独的模型支持许多不同的语言，因此它们需要下载模型才能供您使用。这意味着您需要更新您的Android清单，以允许访问Internet和存储，否则应用程序将无法访问模型：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next you will explore how to implement a surface on which you will draw your
    handwriting.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将探索如何实现一个表面，您将在其上绘制您的手写。
- en: Creating a Drawing Surface
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建绘图表面
- en: The easiest way to do this is to create a custom view that contains a Canvas
    that will be used as the drawing surface.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是创建一个自定义视图，其中包含一个Canvas，用作绘图表面。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: I won’t go into detail here on how to put that all together—the code is in the
    GitHub for this book—but the important point is that when capturing the user’s
    strokes on the screen, as well as drawing them on the Canvas so you can see them,
    you also have to add them to an ML Kit stroke builder object, which in turn can
    be used to construct an Ink object, which the model will accept and parse. You
    can also learn more about custom views at [*https://developer.android.com/guide/topics/ui/custom-components*](https://developer.android.com/guide/topics/ui/custom-components)*.*
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这里详细介绍如何将所有内容组合在一起——代码在本书的GitHub中——但重要的是，在屏幕上捕获用户的笔画并在Canvas上绘制它们时，您还需要将它们添加到ML
    Kit的笔画构建器对象中，然后可以用于构建Ink对象，这是模型将接受和解析的对象。您还可以在[*https://developer.android.com/guide/topics/ui/custom-components*](https://developer.android.com/guide/topics/ui/custom-components)*.*中了解更多关于自定义视图的信息。
- en: 'When drawing on a user interface there are generally three methods you need
    to implement—these are `touchStart()`, when the user first touches the screen,
    `touchMove()` , when they drag their finger or stylus across the screen, and `touchUp()`
    , when they remove their finger or stylus from the screen. These three methods
    in tandem will form a stroke. All three of them are captured by the `onTouchEvent`
    method on a view, so we can call them based on the action that is detected, like
    this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户界面上绘制时，通常需要实现三种方法——`touchStart()`，当用户首次触摸屏幕时；`touchMove()`，当他们在屏幕上拖动手指或触笔时；以及`touchUp()`，当他们从屏幕上移开手指或触笔时。这三种方法共同形成一个笔画。所有这三种方法都由视图上的`onTouchEvent`方法捕获，因此我们可以根据检测到的动作调用它们，例如：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'So, when the touch starts, we want to do two things. First, start the path
    (that is used to draw your handwriting on the screen) and move it to the current
    touch point. Then, we will create a new `strokeBuilder` in ML Kit and capture
    the current point and the current time so as to create an `Ink` object that ML
    Kit can parse later:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当触摸开始时，我们希望做两件事情。首先，启动路径（用于在屏幕上绘制手写笔迹），并将其移动到当前触摸点。然后，我们将在ML Kit中创建一个新的`strokeBuilder`，捕获当前点和当前时间，以便创建一个ML
    Kit可以后续解析的`Ink`对象：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As the user drags their finger across the screen, the `touchMove()` function
    will be called. This will first update the `path` variable that is used to update
    the screen, and then update the `strokeBuilder`, so that the current stroke can
    be turned into an `Ink` object that ML Kit recognizes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在屏幕上划动手指时，将调用`touchMove()`函数。首先会更新用于屏幕更新的`path`变量，然后更新`strokeBuilder`，以便当前笔画可以转换为ML
    Kit识别的`Ink`对象：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, as the user removes their finger from the surface, the touch up will
    be called. At this point, we should reset the path, so that when drawing on the
    screen next time, we’ll be starting afresh. For ML Kit we should finish the stroke
    by adding one last point at the position where the user removed their finger,
    and then add the finished stroke (started at touch down, drawn during touch move,
    and finished at touch up) to our ink with an `inkBuilder`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当用户从表面上移开手指时，将调用触摸结束事件。在这一点上，我们应该重置路径，这样下次在屏幕上绘制时，我们会重新开始。对于 ML Kit，我们应该通过在用户移开手指的位置添加一个最后的点来结束笔划，然后将完成的笔划（从按下开始，移动时绘制，到放开结束）添加到我们的墨迹中使用
    `inkBuilder`：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So, over time, as you create strokes on the screen, the `inkBuilder` will stroke
    them in its collection of strokes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，当你在屏幕上创建笔划时，`inkBuilder` 将在其笔划集合中记录它们。
- en: 'When you want to get all of the strokes from the `inkBuilder`, you can do so
    by calling its `build` method, like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要从 `inkBuilder` 获取所有笔划时，可以通过调用其 `build` 方法来实现，就像这样：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For the code that you can download, I implemented all of these in a `CustomDrawingSurface`
    view, which can then be added to the activity layout like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可以下载的代码，我在 `CustomDrawingSurface` 视图中实现了所有这些功能，然后可以像这样将其添加到活动布局中：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Parsing the Ink with ML Kit
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ML Kit 解析墨迹
- en: 'In the previous section you saw a custom drawing surface on which the user
    can write, and their strokes are captured into an `Ink` object. This `Ink` object
    can then be used with ML Kit to interpret the strokes into text. The steps to
    do this are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，你看到了一个自定义的绘图表面，用户可以在上面写字，他们的笔划被捕获到一个 `Ink` 对象中。然后，可以使用 ML Kit 将这个 `Ink`
    对象解释为文本。具体步骤如下：
- en: Initialize a model identifier object with the specs of the model you want to
    use—for example, the language that the model will recognize.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个模型标识符对象，包含你想要使用的模型的规格，例如，模型能够识别的语言。
- en: Build a reference to the model from the model identifier.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模型标识符构建一个模型的引用。
- en: Use a remote model manager object to download the model.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用远程模型管理器对象下载模型。
- en: Create a recognizer object from the model.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模型创建一个识别器对象。
- en: Pass the ink to the recognizer and parse the returned results.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将墨迹传递给识别器并解析返回的结果。
- en: So, in the activity that hosts the custom drawing surface that generates the
    ink, you’ll need to do all of these steps. Let’s walk through what this looks
    like in practice.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在托管生成墨迹的自定义绘图表面的活动中，你需要完成所有这些步骤。让我们看看这在实践中是什么样子。
- en: 'First, the `initializeRegonition()` function will create an instance of `DigitalInkRecognitionModelIdentifier`
    and use this to build a reference to the model, which it will then download:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`initializeRegonition()` 函数将创建一个 `DigitalInkRecognitionModelIdentifier` 实例，并用它构建一个指向模型的引用，然后下载该模型：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note the `fromLanguageTag` method, where I passed `en-US` as the language code.
    As you might expect, this will implement the model to recognize English/US text.
    For a full list of codes, check out the ML Kit [sample app for digital ink](https://oreil.ly/tHRS3),
    where they have code to connect to ML Kit to download the full list of currently
    supported codes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `fromLanguageTag` 方法，我传递了 `en-US` 作为语言代码。正如你所期望的，这将实现模型识别英文/美国文本。想要获取完整代码列表，请查看
    ML Kit [数字墨水示例应用程序](https://oreil.ly/tHRS3)，他们在这里有连接到 ML Kit 的代码，可以下载当前支持的所有代码列表。
- en: 'Once the remote model manager downloads the model, you’ll be able to use it
    to use inference on your ink strokes. So, you’ll first create a recognizer by
    calling the `getClient` method on the `DigitalInkRecognition` object from ML Kit,
    and pass the model you just specified and downloaded as the desired model from
    which to construct the recognizer:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦远程模型管理器下载了模型，你就可以用它来对你的墨迹笔画进行推断。因此，你首先要通过从 ML Kit 的 `DigitalInkRecognition`
    对象调用 `getClient` 方法来创建一个识别器，并将你刚刚指定和下载的模型作为构建识别器的所需模型传递进去：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, you can get the ink from the drawing surface you created earlier:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以从之前创建的绘图表面获取墨迹：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can then call the `recognize` method on your recognizer, passing it the
    ink. ML Kit will call you back with the result, and you can catch this in an on-success
    or on-failure listener:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在你的识别器上调用 `recognize` 方法，将墨迹传递给它。ML Kit 将通过成功或失败的监听器回调给你结果：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With the success, you’ll get back a “result” object containing a number of result
    candidates. In this case I just loop through them all and output them. They’re
    presorted into their likelihood of matching your strokes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 成功后，你将获得一个包含多个结果候选项的“result”对象。在这种情况下，我只是遍历它们并输出它们。它们已按照它们匹配你的笔划的可能性进行了预排序。
- en: So, referring back to [Figure 5-2](#recognizing_handwriting_with_ml_kit), you
    can see that my strokes were most likely “hello” (with a lowercase H), followed
    by “Hello” and then “hell o” with a space between the second “l” and the “o.”
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，参考[图 5-2](#recognizing_handwriting_with_ml_kit)，你可以看到我的笔划很可能是“hello”（小写 h），然后是“Hello”，最后是“hell
    o”，第二个“l”和“o”之间有一个空格。
- en: Given the many languages supported, this gives you a really powerful tool for
    understanding your users’ input, should you want to create an interface for handwriting!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于支持的多种语言，这为你提供了一个非常强大的工具，可以理解用户的输入，如果你想为手写创建一个接口的话！
- en: For example, check out my wonderful attempt at writing “hello” in Chinese in
    [Figure 5-3](#using_the_chinese_language_model), and how the app was able to parse
    it into the correct characters!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看我在[图 5-3](#using_the_chinese_language_model)中尝试写“你好”时的精彩表现，以及应用程序如何将其解析为正确的字符！
- en: '![](assets/aiml_0503.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_0503.png)'
- en: Figure 5-3\. Using the Chinese language model
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-3\. 使用中文语言模型
- en: Smart Reply to Conversations
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话的智能回复
- en: Another example of a turnkey model that you can use is the Smart Reply model.
    With this, you can give the model the contents of a conversation, and it can figure
    out what might be the reply to it. You’ve probably seen this in use now on a number
    of websites and apps, and if you’d wondered how to implement it, this API will
    give you a great head start.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你可以使用的即插即用模型示例是智能回复模型。借助它，你可以向模型提供对话的内容，它可以推断出可能的回复。你可能已经在许多网站和应用程序中看到过它的使用，如果你想知道如何实现它，这个
    API 将为你提供一个很好的起点。
- en: You can see it in action in [Figure 5-4](#using_smart_reply).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 5-4](#using_smart_reply)中看到它的运行情况。
- en: '![](assets/aiml_0504.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aiml_0504.png)'
- en: Figure 5-4\. Using Smart Reply
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-4\. 使用智能回复
- en: Here, I mocked up a conversation with a friend of mine, where we are talking
    about breakfast. She asks me a question, “Just coffee, or do you want to eat?”
    and when I press the Generate Reply button, the recommended answer is “Sure, sounds
    good.” It doesn’t really answer the question, but it’s a decent enough reply,
    as it captures my vernacular—when asked if I wanted to meet up, my response was
    “Sure, what do you fancy?” so now the generated phrase also begins with the word
    “Sure.”
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我模拟了我和朋友的一次对话，我们在讨论早餐。她问我一个问题：“只喝咖啡，还是你想吃点东西？”当我按下生成回复按钮时，推荐的答案是“当然，听起来不错。”虽然它并没有真正回答问题，但作为一个相当不错的回复，因为它捕捉到了我的用语——当被问及是否想见面时，我的回答是“当然，你想要什么？”所以现在生成的短语也以“当然”开头。
- en: Let’s look at how this app was built.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个应用是如何构建的。
- en: Start the App
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动应用程序
- en: As before, create a new app with a single activity. Refer back to [Chapter 3](ch03.html#introduction_to_ml_kit)
    for the steps if you aren’t familiar.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，创建一个带有单个活动的新应用程序。如果你不熟悉，可以参考[第三章](ch03.html#introduction_to_ml_kit)中的步骤。
- en: 'When you are done, you can include the Smart Reply libraries by adding the
    following to your build.gradle file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你可以通过将以下内容添加到你的 build.gradle 文件来包含智能回复库：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After a Gradle sync, the libraries will be ready and you can start coding.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 同步后，库将准备就绪，你可以开始编码。
- en: Mock a Conversation
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟一次对话
- en: The Smart Reply APIs require a conversation to be passed to them, and the last
    element in the conversation *not* to be you talking. To create a conversation,
    you use the `TextMessage` type for each item in the conversation and add them
    to an `ArrayList`. The type can be created either for a local user (you) or a
    remote user (your friend) by calling `createForLocalUser` or `createForRemoteUser`,
    respectively. It’s important to call the right ones so the API can know the difference
    between you and other people, and it can generate the smart reply based on your
    vernacular.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 智能回复 API 需要传递一个对话，并且对话的最后一个元素*不能*是你在说话。要创建一个对话，你可以使用`TextMessage`类型来表示对话中的每个条目，并将它们添加到一个`ArrayList`中。可以通过调用`createForLocalUser`或`createForRemoteUser`方法来为本地用户（你自己）或远程用户（你的朋友）创建这种类型。非常重要的是调用正确的方法，这样
    API 才能区分你和其他人，并且能够基于你的用语生成智能回复。
- en: 'I wrote code like this to initialize the mock conversation:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了这样的代码来初始化模拟对话：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `initializeConversation()` method simply calls `addConversationItem` with
    the string, and an optional second parameter with my friend’s name in it. I then
    overloaded `addConversationItem` so that if only one string is passed, then a
    `TextMessage` for the current user is added, or if two strings are passed, then
    a `TextMessage` for the remote user is added.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`initializeConversation()`方法只需调用`addConversationItem`并传递字符串，以及一个可选的第二个参数，其中包含我的朋友的名字。然后，我重载了`addConversationItem`，如果只传递了一个字符串，则添加当前用户的`TextMessage`，或者如果传递了两个字符串，则添加远程用户的`TextMessage`。'
- en: '`outputText` is the text of the conversation that will be added to a TextView
    later.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`outputText`是稍后将添加到TextView的对话文本。'
- en: So, now that we have a conversation that is made up of `TextMessage`s that were
    created either for local or remote users, we can use it to generate a predicted
    next text.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了由为本地或远程用户创建的`TextMessage`组成的对话，我们可以使用它来生成预测的下一条文本。
- en: Generating a Smart Reply
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成智能回复
- en: The app shown in [Figure 5-4](#using_smart_reply) is available in the GitHub
    repo for this book. In that screenshot you can see a Generate Reply button—to
    get a smart reply, you’ll simply initialize a Smart Reply client with `SmartReply.getClient()`
    within the `OnClickListener` for this button.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的 GitHub 仓库中可以找到图示为 [Figure 5-4](#using_smart_reply) 的应用程序。在该屏幕截图中，您可以看到一个生成回复按钮——要获得智能回复，您只需在此按钮的`OnClickListener`中使用`SmartReply.getClient()`初始化智能回复客户端。
- en: 'You pass your conversation to its `suggestReplies` method, and if there’s a
    successful inference, you’ll get a result object back:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您将您的对话传递给其`suggestReplies`方法，如果推断成功，您将收到一个结果对象：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This result object contains a list of suggestions, each of which contains a
    text property with the text of the suggestion. So you could, for example, set
    the contents of an `EditText` control with the top-rated reply like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此结果对象包含一个建议列表，每个建议都包含一个带有建议文本的`text`属性。因此，例如，您可以将`EditText`控件的内容设置为排名最高的回复，如下所示：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Or, if you prefer, you could iterate through each of them and generate some
    kind of picker where the user can choose which of the suggestions they want to
    take.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您愿意，您可以遍历每一个并生成某种选择器，用户可以选择他们想要采纳的建议。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you looked at how to get started with a number of scenarios
    where an ML model, or a set of models, was already available to you to handle
    text. You started with looking at a full string and parsing common entities out
    of it, like addresses and phone numbers. You then explored how an app could capture
    a user’s handwriting, and an ML Kit model could then convert that handwriting
    into text. Finally you had a quick look at Smart Reply, so you could create an
    app that uses ML to give suggested replies to a conversation!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了如何在多种场景下开始使用已经为您提供了ML模型或一组模型的情况下处理文本。您首先查看了如何从完整的字符串中提取常见的实体，如地址和电话号码。然后，您探索了一个应用如何捕捉用户的手写，并且ML
    Kit模型可以将该手写转换为文本。最后，您快速浏览了Smart Reply，以便您可以创建一个应用程序，该应用程序使用ML为对话提供建议的回复！
- en: These are all off-the-shelf models, but they can give you a really nice head
    start into machine learning in your apps. The logical next step is to extend this
    into using custom models that you create from your own data—we’ll begin exploring
    that in [Chapter 8](ch08.html#going_deeper_understanding_tensorflow_l). In Chapters
    [6](ch06.html#computer_vision_apps_with_ml_kit_on_ios) and [7](ch07.html#text_processing_apps_with_ml_kit_on_ios),
    you’ll cover the same ground that you covered in the previous two chapters, but
    with a focus on getting started with the same vision and text scenarios on iOS
    using Swift!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是现成的模型，但它们可以为您的应用程序提供一个非常好的起点，进入机器学习。逻辑的下一步是将其扩展为使用您自己数据创建的自定义模型——我们将在[第8章](ch08.html#going_deeper_understanding_tensorflow_l)中开始探索这一点。在[第6章](ch06.html#computer_vision_apps_with_ml_kit_on_ios)和[第7章](ch07.html#text_processing_apps_with_ml_kit_on_ios)中，您将涵盖与之前两章相同的领域，但专注于使用Swift在iOS上启动相同的视觉和文本场景！
