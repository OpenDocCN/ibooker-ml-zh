- en: Chapter 14\. Business Logic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。业务逻辑
- en: By now, you may be thinking, “Yes, our algorithmic ranking and recommendation
    has arrived! Personalization for every user with latent understanding is how we
    run our business.” Unfortunately, the business is rarely this simple.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能会想，“是的，我们的算法排名和推荐已经到位了！通过潜在理解为每个用户进行个性化是我们经营业务的方式。”不幸的是，业务很少会这么简单。
- en: 'Let’s take a really straightforward example, a recipe recommendation system.
    Consider a user who simply hates grapefruit (one of the authors of this book *really*
    does) but may love a set of other ingredients that go well with grapefruit: asparagus,
    avocado, banana, butter, cashews, champagne, chicken, coconut, crab, fish, ginger,
    hazelnut, honey, lemon, lime, melon, mint, olive oil, onion, orange, pecan, pineapple,
    raspberry, rum, salmon, seaweed, shrimp, star anise, strawberry, tarragon, tomato,
    vanilla, wine, and yogurt. These ingredients are the *most* popular to pair with
    grapefruit, and the user loves almost all of these.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个非常直接的例子，一个食谱推荐系统。考虑一个简单讨厌西柚的用户（本书的一位作者*确实*如此），但是可能喜欢与西柚搭配得很好的一系列其他配料：芦笋、鳄梨、香蕉、黄油、腰果、香槟、鸡肉、椰子、蟹肉、鱼、姜、榛子、蜂蜜、柠檬、酸橙、甜瓜、薄荷、橄榄油、洋葱、橙子、山核桃、菠萝、覆盆子、朗姆酒、鲑鱼、海藻、虾、八角茴香、草莓、龙蒿、番茄、香草、葡萄酒和酸奶。这些配料是与西柚*最*受欢迎的搭配，而用户几乎都喜欢这些配料。
- en: What’s the right way for the recommender to handle this case? It may seem like
    this is something that collaborative filtering (CF), latent features, or hybrid
    recommendations would catch. However, if the user likes all these shared flavors,
    the item-based CF model would not catch this well. Similarly, if the user truly
    *hates* grapefruit, latent features may not be sufficient to truly avoid it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统应该如何处理这种情况？这似乎是协同过滤（CF）、潜在特征或混合推荐可以捕捉到的内容。然而，如果用户喜欢所有这些共享的口味，基于项目的CF模型可能无法很好地捕捉到这一点。同样，如果用户真正*讨厌*西柚，潜在特征可能不足以真正避免它。
- en: 'In this case, the simple approach is a great one: *hard avoids*. In this chapter,
    we’ll talk about some of the intricacies of business logic intersecting the output
    of your recommendation system.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，简单的方法是一个伟大的选择：*硬避免*。在本章中，我们将讨论业务逻辑与推荐系统输出交汇时的一些复杂性。
- en: 'Instead of attempting to learn exceptions as part of the latent features that
    the model utilizes when making recommendations, it’s more consistent and simple
    to integrate these business rules as an external step via deterministic logic.
    As an example: the model could remove all grapefruit cocktails that are retrieved
    instead of attempting to learn to rank them lower.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与试图将异常作为模型在做出推荐时使用的潜在特征的一部分学习相比，通过确定性逻辑将这些业务规则作为外部步骤集成更一致和简单。例如：模型可以移除所有西柚鸡尾酒，而不是试图学习将它们排名较低。
- en: Hard Ranking
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬排名
- en: 'You can come up with a lot of examples of these phenomena when you start thinking
    of situations similar to our grapefruit scenario. *Hard ranking* usually refers
    to one of two kinds of special ranking rules:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始考虑类似于我们的西柚场景的情况时，你可以想出许多这些现象的例子。*硬排名*通常指的是两种特殊排名规则之一：
- en: Explicitly removing some items from the list before ranking.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确地在排名之前从列表中移除一些项目。
- en: Using a categorical feature to rank the results by category. (Note that this
    can even be done for multiple features to achieve a hierarchical hard ranking.)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分类特征按类别对结果进行排名。（请注意，这甚至可以针对多个特征进行操作，以实现层次化的硬排名。）
- en: Have you ever observed any of the following?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有观察到以下任何一种现象？
- en: A user bought a sofa. The system continues to recommend sofas to this user even
    though they won’t need a sofa for the next five years.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户购买了一个沙发。尽管他们未来五年不需要沙发，系统继续向这个用户推荐沙发。
- en: A user buys a birthday gift for a friend interested in gardening. Then the ecommerce
    site keeps recommending gardening tools despite the user having no interest in
    it.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户为一个对园艺感兴趣的朋友购买了生日礼物。然后电子商务网站继续推荐园艺工具，尽管用户对此不感兴趣。
- en: A parent wants to buy a toy for their child. But when the parent goes to the
    website where they usually buy toys, the site recommends several toys for a child
    a few years younger—the parent hasn’t purchased from the site since the child
    was that age.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父母想给孩子买个玩具。但是当父母去他们通常购买玩具的网站时，网站推荐了几款给比孩子小几岁的孩子的玩具—自孩子那个年龄起，父母就没从这个网站购物过。
- en: A runner experiences serious knee pain and determines they can no longer go
    on long runs. They switch to cycling, which is lower impact. However, their local
    meetup recommendations are still all running oriented.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一名跑步者经历了严重的膝盖疼痛，决定不能再进行长跑。他们转而选择了对关节冲击较小的骑行。然而，他们当地的社交聚会推荐仍然全是跑步相关的。
- en: 'All of these cases can be relatively easy to deal with via deterministic logic.
    For these situations, we would prefer *not* to try to learn these rules via ML.
    We should assume that for these types of scenarios, we will get low signal about
    these preferences: negative implicit feedback is often lower in relevance, and
    many of the situations listed are represented by details that you want the system
    to learn once and for all. Additionally, in some of the previous examples, it
    can be upsetting or harmful to a relationship with a user to have the preferences
    not respected.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些情况可以通过确定性逻辑相对容易处理。对于这些情况，我们更倾向于*不*通过机器学习来学习这些规则。我们应该假设对于这些类型的场景，我们将得到关于这些偏好的低信号：负面的隐式反馈通常相关性较低，而且许多列出的情况都是由您希望系统彻底学习的细节所代表的。此外，在之前的一些示例中，如果未能尊重用户的偏好，可能会影响或损害与用户的关系。
- en: 'The name for these preferences is *avoids*—or sometimes constraints, overrides,
    or hard rules. You should think of them as explicit expectations of the system:
    “Don’t show me recipes with grapefruit,” “No more sofas,” “I don’t like gardening,”
    “My child is older than 10 now,” and “Don’t show me trail runs.”'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些偏好的名称为*避免项*，有时也称为约束、覆盖或硬规则。您应该将它们视为系统的显式期望：“不要显示带有葡萄柚的食谱”，“不要再显示沙发”，“我不喜欢园艺”，“我的孩子现在已经超过10岁了”，以及“不要显示越野跑”。
- en: Learned Avoids
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习到的避免项
- en: Not all business rules are such obvious avoids that derive from explicit user
    feedback, and some derive from explicit feedback not directly related to specific
    items. It’s important to include a wide variety of avoids when considering serving
    recommendations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的业务规则都是从显式用户反馈中导出的明显避免项，有些是来自于与特定项目无直接关联的显式反馈。在考虑服务推荐时，包含广泛的避免项是非常重要的。
- en: 'For the sake of simplicity, let’s assume you’re building a fashion recommender
    system. Examples of more subtle avoids include the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，假设您正在构建一个时尚推荐系统。更为微妙的避免示例包括以下几种情况：
- en: Already owned items
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 已拥有的物品
- en: These are items that users really need to purchase only once—for example, clothing
    users have bought through your platform or told you they already own. Creating
    a *virtual closet* might be a way to ask users to tell you what they have, to
    assist in these avoids.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用户真正只需要购买一次的物品，例如通过您平台购买过或者已告知您已拥有的服装。创建一个*虚拟衣橱*可能是一种让用户告知您他们拥有什么的方式，以帮助避免这些情况。
- en: Disliked features
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不喜欢的特征
- en: These are features of items that the user can indicate disinterest in. During
    an onboarding questionnaire, you may ask users if they like polka dots or if they
    have a favorite color palette. These are explicitly indicated pieces of feedback
    that can be used for avoids.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用户可以表示不感兴趣的物品特征。在入职问卷期间，您可以询问用户是否喜欢波点或者是否有喜欢的颜色调色板。这些都是可以用来避免的明确表达的反馈。
- en: Ignored categories
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略的类别
- en: This is a category or group of items that doesn’t resonate with the user. This
    can be implicit but learned outside the primary recommender model. Maybe the user
    has never clicked the Dresses category on your ecommerce website because they
    don’t enjoy wearing them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用户不感兴趣的物品类别或组。这可能是隐式学习的，但是超出了主要推荐模型。也许用户从未点击过您电子商务网站上的连衣裙类别，因为他们不喜欢穿它们。
- en: Low-quality items
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 低质量物品
- en: Over time, you’ll learn that some items are simply low quality for most users.
    You can detect this via a high number of returns or low ratings from buyers. These
    items ultimately should be removed from inventory, but in the meantime, it’s important
    to include them as avoids for all but the strongest signal of match.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，您会了解到某些物品对大多数用户来说质量较低。您可以通过高退货率或买家低评分来检测这一点。这些物品最终应从库存中移除，但与此同时，重要的是将它们作为避免项包含在除了最强匹配信号之外的所有情况中。
- en: These additional avoids can be implemented easily during the serving stage and
    can even include simple models. Training linear models to capture some of these
    rules and then applying them during serving can be a useful and reliable mechanism
    for improving ranking. Note that the small models perform very fast inference,
    so little negative impact usually results from including them in the pipeline.
    For larger-scale behavior trends or higher-order factors, we expect our core recommendation
    models to learn these ideas.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些额外的避免行为可以在服务阶段轻松实现，甚至可以包括简单的模型。训练线性模型来捕捉其中一些规则，然后在服务阶段应用它们可能是提高排名的一种有用且可靠的机制。请注意，小型模型执行推理非常快，因此通常将它们包含在管道中通常不会产生太大的负面影响。对于更大规模的行为趋势或高阶因素，我们期望我们的核心推荐模型能够学习到这些想法。
- en: Hand-Tuned Weights
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动调整权重
- en: On the other side of the spectrum of avoids is *hand-tuned ranking*. This technique
    was popular in earlier days of search ranking, when humans would use analytics
    and observation to determine what they thought were the most important features
    in a ranking and then craft a multiobjective ranker. For example, flower stores
    may rank higher in early May as many users search for Mother’s Day gifts. Since
    there could be many variable elements to track, these kinds of approaches don’t
    scale well and have been largely deemphasized in modern recommendation ranking.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在避免的另一极端是*手动调整排名*。这种技术在搜索排名的早期时期很受欢迎，当时人类会使用分析和观察来确定他们认为排名中最重要的特征，然后制定多目标排名器。例如，花店可能在五月初排名较高，因为许多用户在寻找母亲节礼物。由于可能有许多变量要跟踪，这些方法不太容易扩展，并且在现代推荐排名中已经大大减少了重视。
- en: However, hand-tuned ranking can be incredibly useful as an *avoid*. While technically
    it’s not an avoid, we sometimes still call it that. An example of this in practice
    is to know that new users like to start with a lower-priced item while they’re
    learning whether your shipping is trustworthy. A useful technique is to then uprank
    lower-priced items before the first order.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，手动调整排名在某种程度上可以作为*避免*的一种极其有用的方式。尽管技术上它不是一种避免，但我们有时仍然会这样称呼它。实践中的一个例子是知道新用户喜欢从价格较低的物品开始，因为他们在学习您的运输是否可靠时。一个有用的技术是在第一次订单之前将价格较低的物品提升排名。
- en: While it may feel bad to consider building a hand-tuned ranking, it’s important
    to not count this technique out. It has a place and is often a great place to
    start. One interesting human-in-the-loop application of this kind of technique
    is for hand-tuned ranking by experts. Back to our fashion recommender, a style
    expert may know that this summer’s trending color is mauve, especially among the
    younger generation. Then can positively influence user satisfaction if the expert
    ranks these mauve items up for users in the right age persona.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然考虑构建手动调整排名可能会让人感到不舒服，但重要的是不要排除这种技术。它有一个位置，通常是一个很好的起点。这种技术的一个有趣的人机交互应用是专家手动调整排名。回到我们的时尚推荐器，一个时尚专家可能知道今年夏天流行的颜色是紫红色，特别是在年轻一代中。如果专家将这些紫红色物品为适合的用户提升排名，可能会积极影响用户满意度。
- en: Inventory Health
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库存健康
- en: A unique and somewhat contentious side of hard ranking is inventory health.
    Notoriously hard to define, *inventory health* estimates how good the existing
    inventory is for satisfying user demand.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 硬排名的一个独特而又有争议的方面是库存健康。众所周知，很难定义*库存健康*，它估计了现有库存对满足用户需求的好坏程度。
- en: 'Let’s take a quick look at one way to define inventory health, via affinity
    scores and forecasting. We can do this by leveraging a demand forecast, which
    is an incredibly powerful and popular way to optimize the business: what are the
    expected sales in each category over the next *N* time periods? Building these
    forecasting models is outside the scope of this book, but the core ideas are well
    captured in the famous book [“Forecasting: Principles and Practice”](https://otexts.com/fpp3/)
    by Rob Hyndman and George Athanasopoulos (Otexts). For the sake of our discussion,
    assume that you’re able to roughly approximate the number of socks you’ll sell
    over the next month, broken down by size and usage type. This can be a really
    instructive estimate for the number of socks of various types you should have
    on hand.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们快速看一下定义库存健康的一种方法，通过亲和分数和预测。我们可以通过利用需求预测来做到这一点，这是一种非常强大和流行的优化业务的方式：在接下来的*N*个时间段内，每个类别的预期销售量是多少？建立这些预测模型超出了本书的范围，但这些核心思想在Rob
    Hyndman和George Athanasopoulos的著名书籍《Forecasting: Principles and Practice》（Otexts）中得到了很好的捕捉。就我们讨论的目的而言，假设您能大致估计下个月按尺寸和使用类型出售的袜子数量，这可以成为您应该备有各种类型袜子数量的非常有启发性的估计。'
- en: However, it doesn’t stop there; inventory may be finite, and in practice inventory
    is often a major constraint on businesses that sell physical goods. With that
    caveat, we have to turn to the other side of the market demand. If our demand
    outstrips our availability, we are ultimately disappointing users who don’t have
    access to the item they desired.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事情并不止于此；库存可能是有限的，在实践中，库存通常是销售实物商品企业的主要限制因素。在这种情况下，我们不得不转向市场需求的另一面。如果我们的需求超过了我们的供应能力，最终会让没有得到他们想要物品的用户感到失望。
- en: Let’s take an example of selling bagels; you’ve calculated average demand for
    poppy seed, onion, asiago cheese, and egg. On any given day, many customers will
    come to buy a bagel with a clear preference in mind, but will you have enough
    of that bagel? Every bagel you don’t sell is wasted; people like fresh bagels.
    This means that the bagels you recommend to each person are dependent on good
    inventory. Some users are less picky; they can get one of two or three of the
    options and be just as happy. In that case, it’s better to give them another bagel
    option and save the lowest inventory for the picky ones. This is a kind of model
    refinement called *optimization*, which has a huge number of techniques. We won’t
    get into optimization techniques, but books on mathematical optimization or operations
    research will provide direction. *Algorithms for Optimization* by Mykel J. Kochenderfer
    and Tim A. Wheeler (MIT Press) is a good place to start.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以销售百吉饼为例；您已经计算了罂粟籽、洋葱、阿斯亚戈芝士和鸡蛋的平均需求。在任何一天，许多顾客会来买心仪的百吉饼，但您是否有足够的百吉饼？您不销售的每一个百吉饼都是浪费；人们喜欢新鲜的百吉饼。这意味着您为每个人推荐的百吉饼都取决于良好的库存。有些用户不那么挑剔；他们可以选择两种或三种选项中的任意一种，同样可以感到满足。在这种情况下，最好为他们提供另一种百吉饼选项，并为挑剔的人节省最低库存。这是一种被称为*优化*的模型细化，涵盖了大量技术。我们不会深入讨论优化技术，但数学优化或运营研究的书籍会提供方向。Mykel
    J. Kochenderfer 和 Tim A. Wheeler 的《Algorithms for Optimization》（MIT Press）是一个很好的起点。
- en: Inventory health ties back to hard ranking, because actively managing inventory
    as part of your recommendations is an incredibly important and powerful tool.
    Ultimately, inventory optimization will degrade the perceived performance of your
    recommendations, but by including it as part of your business rules, the overall
    health of your business and recommender system improves. This is why it is sometimes
    called *global optimization*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 库存健康与硬性排名密切相关，因为将库存积极管理作为推荐的一部分是一种非常重要且强大的工具。最终，库存优化将降低您推荐的整体性能，但通过将其纳入业务规则的一部分，可以提高业务和推荐系统的整体健康。这就是为什么有时称为*全局优化*。
- en: The reason that these methods stir up heated discussions is that not everyone
    agrees that the quality of recommendations for some users should be depressed
    to improve those for the “greater good.” Health of the marketplace and average
    satisfaction are useful metrics to consider, but ensure that these are aligned
    with the north-star metrics for the recommendation system at large.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法引发激烈讨论的原因在于，并非每个人都认同为了改善“整体利益”，就应该降低某些用户的推荐质量。市场健康和平均满意度是需要考虑的有用指标，但确保它们与整体推荐系统的北极星指标一致。
- en: Implementing Avoids
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施避免
- en: 'The simplest approach to handling avoids is via downstream filtering. To do
    this, you’ll want to apply the avoid rules for the user before the recommendations
    are passed along from the ranker to the user. Implementing this approach looks
    something like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 处理规避的最简单方法是通过下游过滤。为此，你需要在推荐从排名器传递给用户之前应用用户的规避规则。实施这种方法看起来像这样：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Admittedly, this is a trivial but also relatively naive attempt at avoids.
    First, working purely in pandas will limit some of the scalability of your recommender,
    so let’s convert this to JAX:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，这是一个微不足道但也相对天真的规避尝试。首先，纯粹在 pandas 中工作会限制你的推荐系统的可扩展性，所以让我们将其转换为 JAX：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But there are deeper issues. The next issue you may face is where that collection
    of avoids is stored. An obvious place is somewhere like a NoSQL database keyed
    on users, and then you can get all of the avoids as a simple lookup. This is a
    natural use of feature stores, as you saw in [“Feature Stores”](ch06.html#feature-stores).
    Some avoids may be applied in real time, while others are learned upon user onboarding.
    Feature stores are a great place to house avoids.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但还有更深层次的问题。你可能会面临的下一个问题是这些避免的集合存储在哪里。一个显而易见的地方就是像 NoSQL 数据库这样的地方，键入用户，然后你可以将所有的避免作为一个简单的查找获取。这是一个自然的特征存储的用法，就像你在[“特征存储”](ch06.html#feature-stores)中看到的。有些避免可能在实时应用，而其他一些则在用户入职时学习。特征存储是一个很好的容纳避免的地方。
- en: The next potential gotcha with our naive filter is that it doesn’t naturally
    extend to covariate avoids, or more complicated avoid scenarios. Some avoids are
    actually dependent on context—a user who doesn’t wear white after Labor Day, users
    who don’t eat meat on Fridays, or coffee-processing methods that don’t mesh well
    with certain brewers. All of these require conditional logic. You might think
    that your powerful and effective recommendation system model can certainly learn
    these details, but this is true only sometimes. The reality is that many of these
    kinds of considerations are lower signal than the large-scale concepts your recommendation
    system should be learning, and thus are hard to learn consistently. Additionally,
    these kinds of rules are often ones you should require, as opposed to remain optimistic
    about. For that reason, you often should explicitly specify such restrictions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们天真的过滤器的下一个潜在问题是它不自然地延伸到协变避免，或者更复杂的避免情景。有些避免实际上取决于上下文——一个在劳动节后不穿白色的用户、周五不吃肉的用户，或者咖啡加工方法与某些冲泡器不搭配的情况。所有这些都需要有条件的逻辑。你可能认为你强大而有效的推荐系统模型肯定可以学会这些细节，但这只有时候是真的。事实是，这些考虑的许多种类都比你的推荐系统应该学习的大规模概念信号要低，因此很难始终学会。此外，这些规则通常是你应该要求的，而不是保持乐观的。因此，你通常应该明确指定这些限制。
- en: This specification can often be achieved by explicit deterministic algorithms
    that impose these requirements. For the coffee problem, one of the authors hand-built
    a decision stump to handle a few bad combinations of coffee roast features and
    brewers—*anaerobic espresso?! Yuck!*
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规范通常可以通过明确的确定性算法来实现这些要求。对于咖啡问题，其中一位作者手工建立了一个决策树桩来处理几种咖啡烘焙特征和冲泡器的不良组合——*厌氧浓缩咖啡？呸！*
- en: Our other two examples (not wearing white after Labor Day and not eating meat
    on Fridays), however, are a bit more nuanced. An explicit algorithmic approach
    may be tricky to handle. How do we know that a user doesn’t eat meat on Fridays
    during one period of the year?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的另外两个例子（不在劳动节后穿白色和周五不吃肉）稍微有些微妙。采用显式的算法方法可能会有些棘手。我们怎么知道用户在一年中的某个时期不吃周五的肉呢？
- en: For these use cases, model-based avoids can impose these requirements.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些用例，基于模型的规避可以强制执行这些要求。
- en: Model-Based Avoids
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于模型的规避
- en: In our quest to include more complicated rules and potentially learn them, we
    may sound like we’re back in the realm of retrieval. Unfortunately, even with
    models like wide-and-deep with lots of parameters doing both user modeling and
    item modeling, learning such high-level relationships can be tricky.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们努力包含更复杂的规则并可能学习它们的过程中，我们可能会听起来像是回到了检索领域。不幸的是，即使是像宽深模型这样有很多参数同时进行用户建模和物品建模的模型，学习这种高级关系也可能会很棘手。
- en: 'While most of this book has focused on working fairly large and deep, this
    part of recommendation systems is well suited for simple models. For feature-based
    binary predictions (should this be recommended), we certainly have a zoo of good
    options. The best approach would obviously depend heavily on the number of features
    involved in implementing the avoid you wish to capture. It’s useful to remember
    that many avoids that we’re considering in this section start out as assumptions
    or hypotheses: we think some users may not wear white after Labor Day, and then
    attempt to find features that model this outcome well. In this way, it can be
    more tractable using extremely simple regression models to find covarying features
    with the outcome in question.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书的大部分内容都集中在处理相当大和深入的问题上，但推荐系统的这一部分非常适合简单模型。对于基于特征的二元预测（应该推荐这个），我们当然有很多不错的选择。最佳方法显然会严重依赖于在捕捉您希望捕捉的避免时所涉及的特征数量。记住，在本节中考虑的许多避免起初都是假设或假说：我们认为一些用户可能在劳动节后不穿白色，然后试图找到能很好地模拟这一结果的特征。通过这种方式，使用极其简单的回归模型更容易找到与所讨论的结果相关的协变特征。
- en: Another related piece of this puzzle is latent representations. For our Friday
    vegetarians, we may be trying to infer a particular persona that we know has this
    rule. That persona is a latent feature that we hope to map from other attributes.
    It’s important to be careful with this kind of modeling (in general, personas
    can be a bit nuanced and worthy of thoughtful decision making), but it can be
    quite helpful. It may seem like the user-modeling parts of your large recommender
    model should learn these—and they can! A useful trick is to pull forward personas
    learned from that model and regress them against hypothesized avoids to allow
    for more signal. However, the other model doesn’t always learn these personas
    because our loss functions for retrieval relevance (and downstream for ranking)
    are attempting to parse out relevance for individual users from the latent persona
    features—which may predict these avoids only amid context features.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个谜题的另一个相关部分是潜在表示。对于我们的周五素食主义者，我们可能正试图推断出一个我们知道有这一规则的特定角色。这个角色是一个我们希望从其他属性中映射出来的潜在特征。在这种建模中要小心（总的来说，角色可能有些微妙，并且值得深思熟虑的决策），但它确实非常有帮助。也许看起来你大型推荐模型的用户建模部分应该学会这些——它们可以！一个有用的技巧是从该模型中提取出已学到的角色，并将它们回归到假设的避免中，以获得更多信号。然而，另一个模型并不总是学习这些角色，因为我们的检索相关性损失函数（以及下游的排名）试图从潜在的角色特征中分析出个别用户的相关性——这些特征可能仅在上下文特征中预测这些避免。
- en: All in all, implementing the avoids is both very easy and very hard. When building
    production recommendation systems, the journey is not over when you get to serving;
    many models factor into the final step of the process.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，实施避免的方法既非常简单又非常困难。在构建生产推荐系统时，当您开始提供服务时，旅程并没有结束；许多模型都会影响到过程的最后一步。
- en: Summary
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Sometimes you need to rely on more classic approaches to ensuring that the recommendations
    you’re sending downstream are satisfying essential rules of your business. Learning
    explicit or subtle lessons from your users can be turned into simple strategies
    to continue to delight them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要依赖更经典的方法来确保您向下游发送的推荐满足您企业的基本规则。从用户那里学到的明确或微妙的教训可以转化为简单的策略，继续让他们感到愉悦。
- en: However, this is not the end of our serving challenge. Another kind of downstream
    consideration is related to the kind of filtering we’ve done here but derives
    from user preference and human behavior. Ensuring that recommendations are not
    repeated, rote, and redundant is the subject of the next chapter on diversity
    in recommendations. We will also discuss how to balance multiple priorities simultaneously
    when determining exactly what to serve.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并非我们服务挑战的终点。另一种下游考虑是与我们在这里所做的过滤类型相关，但源自用户偏好和人类行为。确保推荐不重复、机械和冗余是下一章推荐多样性的主题。我们还将讨论在确定确切的服务内容时如何同时平衡多个优先事项。
