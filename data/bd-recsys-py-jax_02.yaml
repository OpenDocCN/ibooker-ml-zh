- en: Chapter 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章\. 介绍
- en: Recommendation systems are integral to the development of the internet that
    we know today and are a central function of emerging technology companies. Beyond
    the search ranking that opened the web’s breadth to everyone, the new and exciting
    movies all your friends are watching, or the most relevant ads that companies
    pay top dollar to show you lie more applications of recommendation systems every
    year. The addictive For You page from TikTok, the Discover Weekly playlist by
    Spotify, board suggestions on Pinterest, and Apple’s App Store are all hot technologies
    enabled by the recommendation systems. These days, sequential transformer models,
    multimodal representations, and graph neural nets are among the brightest areas
    of R&D in machine learning (ML)—all being put to use in recommendation systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统是我们今天互联网发展的核心，并且是新兴科技公司的重要功能。除了打开网络广度给每个人的搜索排名外，每年还有更多应用推荐系统的新颖和令人兴奋的电影、所有朋友都在看的新视频，或者是公司支付高价展示给你的最相关广告。TikTok
    的令人上瘾的 For You 页面，Spotify 的 Discover Weekly 播放列表，Pinterest 的板块建议以及 Apple 的 App
    Store 都是推荐系统技术的热门应用。如今，序列变压器模型、多模态表示和图神经网络是机器学习研发中最光明的领域之一，都被应用在推荐系统中。
- en: Ubiquity of any technology often prompts questions of how the technology works,
    why it has become so common, and if we can get in on the action. For recommendation
    systems, the *how* is quite complicated. We’ll need to understand the geometry
    of taste, and how only a little bit of interaction from a user can provide us
    a *GPS signal* in that abstract space. You’ll see how to quickly gather a great
    set of candidates and how to refine them to a cohesive set of recommendations.
    Finally, you’ll learn how to evaluate your recommender, build the endpoint that
    serves inference, and log about its behavior.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 任何技术的普遍性往往引发如何运作、为什么变得如此普遍以及我们是否能参与其中等问题。对于推荐系统来说，*如何*是相当复杂的。我们需要理解口味的几何形状，以及用户的少量互动如何在那个抽象空间中为我们提供一个*GPS信号*。你将看到如何快速收集一组优秀的候选者，并将它们精细化为一组协调的推荐。最后，您将学习如何评估您的推荐器，构建服务推理的端点，并记录其行为。
- en: 'We will formulate variants of the core problem to be solved by recommendation
    systems but, ultimately, the motivating problem framing is as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提出核心问题的各种变体，供推荐系统解决，但最终，激励问题的框架如下：
- en: Given a collection of things that may be recommended, choose an ordered few
    for the current context and user that best match according to a certain objective.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给定可能推荐的事物集合，根据特定目标选择适合当前上下文和用户的有序少数。
- en: Key Components of a Recommendation System
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐系统的关键组成部分
- en: As we increase complexity and sophistication, let’s keep in mind the components
    of our system. We will use *string diagrams* to keep track of our components,
    but in the literature these diagrams are presented in a variety of ways.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着复杂性和精密度的增加，让我们牢记系统的组成部分。我们将使用*字符串图表*来跟踪我们的组件，但在文献中，这些图表以多种方式呈现。
- en: 'We will identify and build on three core components of recommendation systems:
    the collector, ranker, and server.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将确定并建立推荐系统的三个核心组件：收集者、排名器和服务器。
- en: Collector
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收集者
- en: The collector’s role is to know what is in the collection of things that may
    be recommended, and the necessary features or attributes of those things. Note
    that this collection is often a subset based on context or state.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 收集者的角色是了解可能推荐的事物集合及其必要的特征或属性。请注意，这个集合通常是基于上下文或状态的子集。
- en: Ranker
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排名器
- en: The ranker’s role is to take the collection provided by the collector and order
    some or all of its elements, according to a model for the context and user.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 排名器的角色是接受收集者提供的集合，并根据上下文和用户的模型对其元素进行排序。
- en: Server
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器
- en: The server’s role is to take the ordered subset provided by the ranker, ensure
    that the necessary data schema is satisfied—including essential business logic—and
    return the requested number of recommendations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 服务员的角色是接收排名器提供的有序子集，确保满足必要的数据模式，包括基本的业务逻辑，并返回请求的推荐数量。
- en: 'Take, for example, a hospitality scenario with a waiter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以餐馆服务员为例的款待场景：
- en: When you sit down at your table, you look at the menu, unsure of what you should
    order. You ask the waiter, “What do you think I should order for dessert?”
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当您坐下来看菜单时，不确定应该点什么。您问服务员：“你认为我应该点什么作为甜点？”
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The waiter checks their notes and says, “We’re out of the key lime pie, but
    people really like our banana cream pie. If you like pomegranate, we make pom
    ice cream from scratch; and it’s hard to go wrong with the donut a la mode—it’s
    our most popular dessert.”
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 侍者检查他们的笔记，并说：“柠檬派已经卖完了，但人们真的很喜欢我们的香蕉奶油派。如果你喜欢石榴，我们会从头开始制作石榴冰淇淋；而且甜甜圈冰淇淋是不会错的——这是我们最受欢迎的甜点。”
- en: 'In this short exchange, the waiter first serves as a collector: identifying
    the desserts on the menu, accommodating current inventory conditions, and preparing
    to talk about the characteristics of the desserts by checking their notes.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的交流中，侍者首先充当收集者：识别菜单上的甜点，适应当前的库存情况，并通过检查它们的笔记准备讨论甜点的特性。
- en: Next, the waiter serves as a ranker; they mention items high scoring in popularity
    (banana cream pie and donut a la mode) as well as a contextually high match item
    based on the patron’s features (if they like pomegranate).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，侍者充当排名者；他们提到在受欢迎程度方面得分较高的项目（香蕉奶油派和甜甜圈冰淇淋），以及基于顾客特征的情境高匹配项目（如果他们喜欢石榴）。
- en: Finally, the waiter serves the recommendations verbally, including both explanatory
    features of their algorithm and multiple choices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，侍者口头提供建议，包括他们算法的解释特性和多个选择。
- en: While this seems a bit cartoonish, remember to ground discussions of recommendation
    systems in real-world applications. One of the advantages of working in RecSys
    is that inspiration is always nearby.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这似乎有点卡通ish，但请记住，将推荐系统的讨论落实到现实世界的应用中。在 RecSys 中工作的一个优点是灵感总是在附近。
- en: Simplest Possible Recommenders
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最简单的可能的推荐者
- en: We’ve established the components of a recommender, but to really make this practical,
    we need to see this in action. While much of the book is dedicated to practical
    recommendation systems, first we’ll start with a toy and scaffold from there.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经建立了推荐者的组件，但要真正使其实用，我们需要看到它在实践中的运行情况。虽然这本书的大部分内容都专注于实际的推荐系统，但首先我们将从一个玩具开始，并从那里构建。
- en: The Trivial Recommender
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平凡推荐者
- en: 'The absolute simplest recommender is not very interesting but can still be
    demonstrated in the framework. It’s called *the trivial recommender* (*TR*) because
    it contains virtually no logic:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的推荐者实际上并不是很有趣，但仍然可以在框架中演示。它被称为 *平凡推荐者*（*TR*），因为它几乎没有逻辑：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notice that this recommender may return either a specific `item_id` or `None`.
    Also observe that this recommender takes no arguments, and `MAX_ITEM_INDEX` is
    referencing a variable out of scope. Software principles ignored, let’s think
    about the three components:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个推荐者可能返回一个特定的 `item_id` 或 `None`。还请注意，这个推荐者不接受任何参数，并且 `MAX_ITEM_INDEX`
    是引用了一个超出范围的变量。忽略软件原则，让我们思考这三个组件：
- en: Collector
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 收集者
- en: A random `item_id` is generated. The TR collects by checking the availability
    of `item_id`. We could argue that having access to `item_id` is also part of the
    collector’s responsibility. Conditional upon the availability, the collection
    of recommendable things is either `[item_id]` or `None` (*recall that `None` is
    a collection in the set-theoretic sense*).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 生成了一个随机的 `item_id`。TR 通过检查 `item_id` 的可用性进行收集。我们可以争论说，获得 `item_id` 也是收集者的责任的一部分。有条件地，可推荐的事物的收集要么是
    `[item_id]`，要么是 `None`（*请回想 `None` 是集合论意义上的一个集合*）。
- en: Ranker
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 排名者
- en: The TR ranks with a no-op; i.e., the ranking of 1 or 0 objects in a collection
    is the identity function on that collection, so we merely do nothing and move
    on to the next step.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: TR（Trivial Recommender）在与无操作相比较；即，在集合中对 1 或 0 个对象进行排名时，对该集合的恒等函数是排名，所以我们只是不做任何事情，继续进行下一步。
- en: Server
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: The TR serves recommendations by its `return` statements. The only schema that’s
    been specified in this example is that the return type is ⁠`Optional​[List[str]]`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TR 通过其 `return` 语句提供建议。在这个例子中指定的唯一模式是 ⁠`Optional​[List[str]]` 类型的返回类型。
- en: This recommender, which is not interesting or useful, provides a skeleton that
    we will add to as we develop further.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个推荐者，虽然不太有趣或有用，但提供了一个我们将在进一步开发中添加的框架。
- en: Most-Popular-Item Recommender
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最受欢迎的项目推荐者
- en: The *most-popular-item recommender* (MPIR) is the simplest recommender that
    contains any utility. You probably won’t want to build applications around it,
    but it’s useful in tandem with other components in addition to providing a basis
    for further development.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*最受欢迎的项目推荐者*（MPIR）是包含任何效用的最简单的推荐者。你可能不想围绕它构建应用程序，但它在与其他组件一起使用时很有用，除了提供进一步开发的基础之外。'
- en: 'An MPIR works just as it says; it returns the most popular items:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: MPIR正如它所说的那样工作；它返回最受欢迎的项目：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we assume that `get_item_popularities` has knowledge of all available items
    and the number of times they’ve been chosen.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们假设`get_item_popularities`知道所有可用项目及其被选择的次数。
- en: This recommender attempts to return the *k* most popular items available. While
    simple, this is a useful recommender that serves as a great place to start when
    building a recommendation system. Additionally, we will see this example return
    over and over, because other recommenders use this core and iteratively improve
    the internal components.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个推荐系统试图返回可用的*k*个最受欢迎的项目。虽然简单，但这是一个有用的推荐系统，是构建推荐系统时的一个很好的起点。此外，我们将看到这个例子一次又一次地返回，因为其他推荐器使用这个核心并逐步改进内部组件。
- en: 'Let’s look at the three components of our system again:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看我们系统的三个组成部分：
- en: Collector
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 收集器
- en: The MPIR first makes a call to `get_item_popularities` that—via database or
    memory access—knows which items are available and how many times they’ve been
    selected. For convenience, we assume that the items are returned as a dictionary,
    with keys given by the string that identifies the item, and values indicating
    the number of times that item has been chosen. We implicitly assume here that
    items not appearing in this list are not available.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: MPIR 首先调用`get_item_popularities`——通过数据库或内存访问——知道哪些项目可用以及它们被选择的次数。为方便起见，我们假设项目以字典形式返回，键由标识项目的字符串给出，值表示该项目被选择的次数。我们在这里暗示假设不出现在此列表中的项目不可用。
- en: Ranker
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 排名器
- en: 'Here we see our first simple ranker: ranking by sorting on values. Because
    the collector has organized our data such that the values of the dictionary are
    the counts, we use the Python built-in sorting function `sorted`. Note that we
    use `key` to indicate that we wish to sort by the second element of the tuples—in
    this case, equivalent to sorting by values—and we send the `reverse` flag to make
    our sort descending.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到我们的第一个简单的排名器：通过对值进行排序来排名。因为收集器组织了我们的数据，使得字典的值是计数，所以我们使用 Python 内置的排序函数`sorted`。请注意，我们使用`key`指示我们希望按元组的第二个元素排序——在这种情况下，相当于按值排序——并发送`reverse`标志来使我们的排序降序。
- en: Server
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: 'Finally, we need to satisfy our API schema, which is again provided via the
    return type hint: `Optional[List[str]]`. This wants the return type to be the
    nullable list of item-identifier strings that we’re recommending, so we use a
    list comprehension to grab the first element of the tuples. But wait! Our function
    has this `max_num_recs` field—what might that be doing there? Of course, this
    is suggesting that our API schema is looking for no greater than `max_num_recs`
    in the response. We handle this via the slice operator, but note that our return
    is between 0 and `max_num_recs` results.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要满足我们的 API 模式，这再次通过返回类型提示提供：`Optional[List[str]]`。这表示返回类型应为可空列表，其中包含我们推荐的项目标识字符串，因此我们使用列表推导来获取元组的第一个元素。但等等！我们的函数有一个`max_num_recs`字段——它可能在做什么？当然，这暗示我们的
    API 模式希望响应中不超过`max_num_recs`个结果。我们通过切片操作来处理这个问题，但请注意，我们的返回结果在 0 和`max_num_recs`之间。
- en: Consider the possibilities at your fingertips equipped with the MPIR; recommending
    customers’ favorite item in each top-level category could make for a simple but
    useful first stab at recommendations for ecommerce. The most popular video of
    the day may make for a good home-page experience on your video site.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到你手头的 MPIR 所提供的可能性；在每个一级类别中推荐客户最喜欢的项目可能会成为电子商务推荐的一个简单但有用的第一步。当天最受欢迎的视频可能会成为你视频网站主页的良好体验。
- en: A Gentle Introduction to JAX
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 JAX 的简要介绍
- en: Since this book has *JAX* in the title, we will provide a gentle introduction
    to JAX here. Its official documentation can be found [on the JAX website](https://jax.readthedocs.io/en/latest/).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书标题中含有*JAX*，我们将在这里提供对 JAX 的简要介绍。其官方文档可以在[JAX 网站上](https://jax.readthedocs.io/en/latest/)找到。
- en: JAX is a framework for writing mathematical code in Python that is just-in-time
    (JIT) compiled. JIT compilation allows the same code to run on CPUs, GPUs, and
    TPUs. This makes it easy to write performant code that takes advantage of the
    parallel-processing power of vector processors.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'JAX 是一个用 Python 编写数学代码的框架，它是即时编译的。即时编译允许相同的代码在 CPU、GPU 和 TPU 上运行。这使得编写利用向量处理器并行处理能力的高性能代码变得容易。 '
- en: Additionally, one of the design philosophies of JAX is to support tensors and
    gradients as core concepts, making it an ideal tool for ML systems that utilize
    gradient-based learning on tensor-shaped data. The easiest way to play with JAX
    is probably via [Google Colab](https://colab.research.google.com/), which is a
    hosted Python notebook on the web.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，JAX 的设计哲学之一是支持张量和梯度作为核心概念，使其成为利用梯度为基础的学习在张量形状数据上的理想工具。玩转 JAX 的最简单方式可能是通过[Google
    Colab](https://colab.research.google.com/)，这是一个托管在网络上的 Python 笔记本。
- en: Basic Types, Initialization, and Immutability
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本类型、初始化和不可变性
- en: 'Let’s start by learning about JAX types. We’ll construct a small, three-dimensional
    vector in JAX and point out some differences between JAX and NumPy:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习 JAX 类型开始。我们将在 JAX 中构建一个小的三维向量，并指出 JAX 和 NumPy 之间的一些区别：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: JAX’s interface is mostly similar to that of NumPy. We import JAX’s version
    of NumPy as `jnp` to distinguish it from NumPy (`np`) by convention so that we
    know which version of a mathematical function we want to use. This is because
    sometimes we might want to run code on a vector processor like a GPU or TPU that
    we can use JAX for, or we might prefer to run some code on a CPU in NumPy.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 的接口与 NumPy 的接口大部分相似。我们按惯例导入 JAX 的 NumPy 版本作为`jnp`，以区分它和 NumPy（`np`），这样我们就知道要使用哪个数学函数的版本。这是因为有时我们可能希望在像
    GPU 或 TPU 这样的向量处理器上运行代码，这时我们可以使用 JAX，或者我们可能更喜欢在 CPU 上使用 NumPy 运行一些代码。
- en: The first point to notice is that JAX arrays have types. The typical float type
    is `float32`, which uses 32 bits to represent a floating-point number. Other types
    exist, such as `float64`, which has greater precision, and `float16`, which is
    a half-precision type that usually only runs on some GPUs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是 JAX 数组具有类型。典型的浮点类型是`float32`，它使用 32 位来表示浮点数。还有其他类型，如`float64`，具有更高的精度，以及`float16`，这是一种半精度类型，通常仅在某些
    GPU 上运行。
- en: The other point to note is that JAX tensors have shape. This is usually a tuple,
    so `(3,)` means a three-dimensional vector along the first axis. A matrix has
    two axes, and a tensor has three or more axes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个要注意的地方是 JAX 张量具有形状。通常这是一个元组，因此`(3,)`表示沿第一个轴的三维向量。矩阵有两个轴，而张量有三个或更多个轴。
- en: Now we come to places where JAX differs from NumPy. It is really important to
    pay attention to [“JAX—The Sharp Bits”](https://oreil.ly/qqcFM) to understand
    these differences. JAX’s philosophy is about speed and purity. By making functions
    pure (without side effects) and by making data immutable, JAX is able to make
    some guarantees to the underlying accelerated linear algebra (XLA) library that
    it uses to talk to GPUs. JAX guarantees that these functions applied to data can
    be run in parallel and have deterministic results without side effects, and thus
    XLA is able to compile these functions and make them run much faster than if they
    were run just on NumPy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看 JAX 与 NumPy 不同的地方。非常重要的是要注意[“JAX—The Sharp Bits”](https://oreil.ly/qqcFM)来理解这些差异。JAX
    的哲学是关于速度和纯度。通过使函数纯粹（没有副作用）并使数据不可变，JAX 能够向其所使用的加速线性代数（XLA）库提供一些保证。JAX 保证这些应用于数据的函数可以并行运行，并且具有确定性结果而没有副作用，因此
    XLA 能够编译这些函数并使它们比仅在 NumPy 上运行时更快地运行。
- en: You can see that modifying one element in `x` results in an error. JAX would
    prefer that the array x is replaced rather than modified. One way to modify elements
    in an array is to do it in NumPy rather than JAX and convert NumPy arrays to JAX—for
    example, using `jnp.array(np_array)`—when the subsequent code needs to run fast
    on immutable data.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到修改`x`中的一个元素会导致错误。JAX 更喜欢替换数组`x`而不是修改它。修改数组元素的一种方法是在 NumPy 中进行，而不是在 JAX
    中进行，并在随后的代码需要在不可变数据上快速运行时将 NumPy 数组转换为 JAX——例如，使用`jnp.array(np_array)`。
- en: Indexing and Slicing
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引和切片
- en: 'Another important skill to learn is that of indexing and slicing arrays:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的学习技能是索引和切片数组：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: NumPy introduced indexing and slicing operations that allow us to access different
    parts of an array. In general, the notation follows a `start:end:stride` convention.
    The first element indicates where to start, the second indicates where to end
    (but not inclusive), and the stride indicates the number of elements to skip over.
    The syntax is similar to that of the Python `range` function.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 引入了索引和切片操作，允许我们访问数组的不同部分。一般来说，符号遵循`start:end:stride`约定。第一个元素指示从哪里开始，第二个指示结束的位置（但不包括该位置），而步长表示跳过的元素数量。该语法类似于
    Python `range` 函数的语法。
- en: Slicing allows us to access views of a tensor elegantly. Slicing and indexing
    are important skills to master, especially when we start to manipulate tensors
    in batches, which we typically do to make the most use of acceleration hardware.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 切片允许我们优雅地访问张量的视图。切片和索引是重要的技能，特别是当我们开始批处理操作张量时，这通常是为了充分利用加速硬件。
- en: Broadcasting
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播
- en: 'Broadcasting is another feature of NumPy and JAX to be aware of. When a binary
    operation such as addition or multiplication is applied to two tensors of different
    sizes, the tensor with axes of size 1 is lifted up in rank to match that of the
    larger-sized tensor. For example, if a tensor of shape `(3,3)` is multiplied by
    a tensor of shape `(3,1)`, the rows of the second tensor are duplicated before
    the operation so that it looks like a tensor of shape `(3,3)`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 广播是 NumPy 和 JAX 的另一个要注意的特性。当应用于两个不同大小的张量的二元操作（如加法或乘法）时，具有大小为 1 的轴的张量会被提升到与较大张量相匹配的秩。例如，如果形状为
    `(3,3)` 的张量乘以形状为 `(3,1)` 的张量，则在操作之前会复制第二个张量的行，使其看起来像形状为 `(3,3)` 的张量：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first case is the simplest, that of scalar multiplication. The scalar is
    multiplied throughout the matrix. In the second case, we have a vector of shape
    `(3,1)` multiplying the matrix. The first row is multiplied by 0.5, the second
    row is multiplied by 1.0, and the third row is multiplied by 2.0\. However, if
    the vector has been reshaped to `(1,3)`, the columns are multiplied by the successive
    entries of the vector instead.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种情况是最简单的，即标量乘法。标量在整个矩阵中进行乘法。在第二种情况中，我们有一个形状为 `(3,1)` 的向量乘以矩阵。第一行乘以 0.5，第二行乘以
    1.0，第三行乘以 2.0。然而，如果向量已经重塑为 `(1,3)`，则列将分别乘以向量的连续条目。
- en: Random Numbers
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机数
- en: 'Along with JAX’s philosophy of pure functions comes its particular way of handling
    random numbers. Because pure functions do not cause side effects, a random-number
    generator cannot modify the random number seed, unlike other random-number generators.
    Instead, JAX deals with random-number keys whose state is updated explicitly:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随 JAX 的纯函数哲学而来的是其特殊的随机数处理方式。因为纯函数不会造成副作用，一个随机数生成器不能修改随机数种子，不像其他随机数生成器。相反，JAX
    处理的是随机数密钥，其状态被显式地更新：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: JAX first requires you to create a random-number `key` from a seed. This key
    is then passed into random-number generation functions like `uniform` to create
    random numbers in the 0 to 1 range.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，JAX 要求你从种子创建一个随机数 `key`。然后将这个密钥传递给类似 `uniform` 的随机数生成函数，以创建范围在 0 到 1 之间的随机数。
- en: 'To create more random numbers, however, JAX requires that you split the key
    into two parts: a new key to generate other keys, and a subkey to generate new
    random numbers. This allows JAX to deterministically and reliably reproduce random
    numbers even when many parallel operations are calling the random-number generator.
    We just split a key into as many parallel operations as needed, and the random
    numbers resulting are now randomly distributed but also reproducible. This is
    a nice property when you want to reproduce experiments reliably.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建更多的随机数，然而，JAX 要求你将密钥分为两部分：一个新密钥用于生成其他密钥，一个子密钥用于生成新的随机数。这使得 JAX 即使在许多并行操作调用随机数生成器时，也能确定性地和可靠地复现随机数。我们只需将一个密钥分成需要的许多并行操作，所得的随机数现在既是随机分布的，又是可重现的。这在你希望可靠地复现实验时是一种良好的特性。
- en: Just-in-Time Compilation
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 即时编译
- en: 'JAX starts to diverge from NumPy in terms of execution speed when we start
    using JIT compilation. JITing code—transforming the code to be compiled just in
    time—allows the same code to run on CPUs, GPUs, or TPUs:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始使用 JIT 编译时，JAX 在执行速度上开始与 NumPy 有所不同。JIT 编译——即时将代码转换为即时编译——允许相同的代码在 CPU、GPU
    或 TPU 上运行：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The JITed code is not that much faster on a CPU but will be dramatically faster
    on a GPU or TPU backend. Compilation also carries some overhead when the function
    is called the first time, which can skew the timing of the first call. Functions
    that can be JITed have restrictions, such as mostly calling JAX operations inside
    and having restrictions on loop operations. Variable-length loops trigger frequent
    recompilations. The [“Just-in-Time Compilation with JAX” documentation](https://oreil.ly/c8ywT)
    covers a lot of the nuances of getting functions to JIT compile.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: JIT 编译的代码在 CPU 上速度提升不多，但在 GPU 或 TPU 后端上速度会显著提升。当函数第一次调用时，编译也会带来一些开销，这可能会使第一次调用的时间偏离。能够
    JIT 编译的函数有一些限制，比如主要在内部调用 JAX 操作，并对循环操作有限制。长度可变的循环会触发频繁的重新编译。[“Just-in-Time Compilation
    with JAX” 文档](https://oreil.ly/c8ywT)详细介绍了许多 JIT 编译函数的细微差别。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: While we haven’t done much math yet, we have gotten to the point where we can
    begin providing recommendations and implementing deeper logic into these components.
    We’ll start doing things that look like ML soon enough.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们还没有进行太多的数学工作，但我们已经到了可以开始提供推荐和实现这些组件更深层逻辑的阶段。我们很快将开始做一些看起来像是机器学习的事情。
- en: So far, we have defined what a recommendation problem is, set up the core architecture
    of our recommendation system—the collector, the ranker, and the server—and shown
    a couple of trivial recommenders to illustrate how the pieces come together.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经定义了推荐问题的概念，并设置了我们推荐系统的核心架构——收集器、排名器和服务器，并展示了几个简单的推荐器来说明这些部件如何组合在一起。
- en: 'Next we’ll explain the core relationship that recommendation systems seek to
    exploit: the user-item matrix. This matrix lets us build a model of personalization
    that will lead to ranking.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将解释推荐系统试图利用的核心关系：用户-物品矩阵。这个矩阵使我们能够构建个性化模型，从而进行排名。
