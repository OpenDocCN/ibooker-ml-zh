- en: Chapter 2\. MLOps Foundations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 MLOps基础
- en: By Noah Gift
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：诺亚·吉夫
- en: Medical school was a woeful experience, an endless litany of fact, whose origins
    were rarely explained and whose usefulness was infrequently justified. My distaste
    for rote learning and my questioning attitude were not shared by most of the class
    of 96 students. This was particularly evident on one occasion when a biochemistry
    lecturer claimed to be deriving the Nernst equation. The class was faithfully
    copying what he wrote on the board. Having only a year before taken the Pchem
    course for chemistry majors at UCLA, I thought he was bluffing.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 医学院是一次悲惨的经历，是一长串事实，其起源很少被解释，其有用性很少被证明。我对死记硬背的厌恶和质疑态度并不被96名学生中的大多数人所分享。在一次生物化学讲师声称正在推导涅恩斯特方程时，这一点尤为明显。班上的学生们忠实地抄写他在黑板上写的东西。一年前，我在加州大学洛杉矶分校为化学专业的Pchem课程只上了一年，我以为他在吹牛。
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Where did you get that value for k?” I asked.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “你从哪里得到那个k值的？”我问道。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The class shouted me down: “Let him finish! Just copy it.”'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 班上的学生们把我打住了：“让他结束！只是复制它。”
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dr. Joseph Bogen
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 约瑟夫·博根博士
- en: Having a solid foundation to build on is critical to any technical endeavor.
    In this chapter, several key building blocks set the foundation for the rest of
    the book. When dealing with students new to data science and machine learning,
    I have commonly encountered misconceptions about the items covered in this chapter.
    This chapter aims to build a strong foundation for using MLOps methodologies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个坚实的基础是任何技术努力的关键。在本章中，几个关键的基础模块为本书的其余部分奠定了基础。在与新接触数据科学和机器学习的学生打交道时，我经常遇到关于本章涵盖内容的误解。本章旨在为使用MLOps方法学建立坚实的基础。
- en: Bash and the Linux Command Line
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bash和Linux命令行
- en: Most machine learning happens in the cloud, and most cloud platforms assume
    you will interact with it to some degree with the terminal. As such, it is critical
    to know the basics of the Linux command line to do MLOps. This section aims to
    bootstrap you with just enough knowledge to ensure you have success doing MLOps.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数机器学习都发生在云端，大多数云平台假定您会在某种程度上与终端进行交互。因此，了解Linux命令行的基础知识对于执行MLOps至关重要。本节旨在为您提供足够的知识，以确保您在进行MLOps时取得成功。
- en: 'There is often a look of both shock and horror when I expose a student to the
    terminal. The initial reaction is reasonable in most modern computing areas due
    to the power of GUI interfaces like the MacOS operating system or Windows. However,
    a better way to think about the terminal is the “advanced settings” of the environment
    you are working on: the cloud, machine learning, or programming. If you need to
    do advanced tasks, it is the way to perform them. As a result, competence in the
    Linux terminal can enormously enhance any skill set. Further, it is a better idea
    to develop in a cloud shell environment, in most cases, which assumes familiarity
    with Bash and Linux.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我让学生接触终端时，他们常常震惊且恐惧。在大多数现代计算领域，由于像MacOS操作系统或Windows这样的GUI界面的强大功能，初始反应是合理的。然而，更好的方法是把终端看作是你正在工作的环境的“高级设置”：云端、机器学习或编程。如果需要进行高级任务，这就是执行它们的方式。因此，掌握Linux终端的能力可以极大地增强任何技能集。此外，在大多数情况下，开发云shell环境是一个更好的主意，这需要熟悉Bash和Linux。
- en: Most servers now run Linux; many new deployment options are using containers
    that also run Linux. The MacOS operating system terminal is close enough to Linux
    that most commands are similar, especially if you install third-party tools like
    [Homebrew](https://brew.sh). You should know the Bash terminal, and this section
    will give you enough knowledge to be competent with it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务器现在运行Linux；许多新的部署选项使用容器，这些容器也运行Linux。MacOS操作系统的终端与Linux非常接近，特别是如果您安装了像[Homebrew](https://brew.sh)这样的第三方工具。您应该了解Bash终端，本节将为您提供足够的知识，以使您能够胜任它。
- en: What are the critical and minimalistic components of the terminal to learn?
    These components include using a cloud-based shell development environment, Bash
    shell and commands, files and navigation, input/output, configuration, and writing
    a script. So let’s dive into each one of these topics.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 终端学习的关键和最小组件是什么？这些组件包括使用基于云的shell开发环境、Bash shell和命令、文件和导航、输入/输出、配置和编写脚本。所以让我们深入研究每一个主题。
- en: Cloud Shell Development Environments
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云端shell开发环境
- en: Whether you are new to cloud computing or have decades of experience, it is
    worth shifting gears from a personal workstation to a web-based cloud shell development
    environment. A good analogy is a surfer who wants to surf each day at the beach.
    In theory, they could drive 50 miles each way to the beach each day, but it would
    be widely inconvenient, inefficient, and expensive. The better strategy, if you
    could afford it, would be to live at the beach, wake up each morning, walk to
    the beach, and surf.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是刚接触云计算还是有数十年经验，从个人工作站转向基于Web的云Shell开发环境都是值得的。一个很好的类比是想每天在海滩冲浪的冲浪者。理论上，他们可以每天往返50英里去海滩，但这样做会非常不方便、低效和昂贵。如果可能的话，更好的策略是住在海滩上，每天早上起床，走到海滩上冲浪。
- en: 'Similarly, there are multiple problems a cloud development environment solves:
    it is more secure since you don’t need to pass around developer keys. Many problems
    are intractable using a local machine since you may not transfer extensive data
    back and forth from the cloud. The tools available in cloud-based development
    include deep integration, which makes work more efficient. Unlike moving to the
    beach, a cloud development environment is free. All major clouds make their cloud
    development environments available on free tiers. If you are new to these environments,
    I would recommend starting with the AWS Cloud platform. There are two options
    to get started on AWS. The first option is the AWS CloudShell shown in [Figure 2-1](#Figure-2-1).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，云开发环境解决了多个问题：它更安全，因为您无需传递开发人员密钥。许多问题在本地机器上难以解决，因为您可能需要频繁地在本地机器和云之间传输大量数据。云开发环境提供的工具包括深度集成，这使工作更高效。与搬到海滩不同，云开发环境是免费的。所有主要云服务提供商都在免费层上提供其云开发环境。如果您对这些环境不熟悉，我建议从AWS
    Cloud平台开始。在AWS上开始的两个选项。第一个选项是AWS CloudShell，如[图2-1](#Figure-2-1)所示。
- en: The AWS CloudShell is a Bash shell with unique AWS command completion built
    in the shell. If you regularly use the AWS CloudShell, it is a good idea to edit
    the `~/.bashrc` to customize your experience. To do that, you can use the built-in
    `vim` editor. Many people put off learning `vim`, but they must be proficient
    in the cloud shell era. You can refer to the [official vim FAQ](https://oreil.ly/wNXdm)
    for how to get things done.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudShell是一个带有独特AWS命令完成功能的Bash Shell。如果您经常使用AWS CloudShell，建议编辑`~/.bashrc`以自定义您的体验。为此，您可以使用内置的`vim`编辑器。许多人推迟学习`vim`，但在云Shell时代，他们必须精通它。您可以参考[官方vim
    FAQ](https://oreil.ly/wNXdm)了解如何完成任务。
- en: '![AWS CloudShell](Images/pmlo_0201.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![AWS CloudShell](Images/pmlo_0201.png)'
- en: Figure 2-1\. AWS CloudShell
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-1\. AWS CloudShell
- en: A second option on AWS is the AWS Cloud9 development environment. A critical
    difference between AWS CloudShell and the AWS Cloud9 environment is that it is
    a more comprehensive way to develop software solutions. For example, you can see
    a shell and a GUI editor in [Figure 2-2](#Figure-2-2) to do syntax highlighting
    for multiple languages, including Python, Go, and Node.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: AWS的第二个选项是AWS Cloud9开发环境。AWS CloudShell和AWS Cloud9环境之间的一个关键区别是它是开发软件解决方案的更全面的方式。例如，您可以在[图2-2](#Figure-2-2)中看到一个Shell和一个GUI编辑器，用于多种语言的语法高亮，包括Python、Go和Node。
- en: '![AWS Cloud9 development environment ](Images/pmlo_0202.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![AWS Cloud9 开发环境](Images/pmlo_0202.png)'
- en: Figure 2-2\. AWS Cloud9 development environment
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-2\. AWS Cloud9开发环境
- en: In particular, when developing machine learning microservices, the Cloud9 environment
    is ideal since it allows you to make web requests from the console to deployed
    services and has deep integration with AWS Lambda. On the other hand, suppose
    you are on another platform, like Microsoft Azure or Google Cloud. In that case,
    the same concepts apply in that the cloud-based development environments are the
    ideal location to build machine learning services.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在开发机器学习微服务时，Cloud9环境非常理想，因为它允许您从控制台向部署的服务发起Web请求，并与AWS Lambda深度集成。另一方面，如果您使用其他平台，如Microsoft
    Azure或Google Cloud，同样的概念适用，即基于云的开发环境是构建机器学习服务的理想场所。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Note
- en: There is an optional video resource I created called “Bash Essentials for Cloud
    Computing” that walks you through the basics. You can view it on the [O’Reilly
    platform](https://oreil.ly/jEWr2) or the [Pragmatic AI Labs YouTube Channel](https://oreil.ly/shtb9).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个名为“云计算的Bash基础知识”的可选视频资源，可以带您了解基础知识。您可以在[O’Reilly平台](https://oreil.ly/jEWr2)或[Pragmatic
    AI Labs YouTube频道](https://oreil.ly/shtb9)上观看。
- en: Bash Shell and Commands
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bash Shell 和 Commands
- en: The shell is an interactive environment that contains a prompt and the ability
    to run commands. Most shells today run either Bash or ZSH.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Shell是一个交互式环境，包含一个提示符和运行命令的能力。大多数shell今天运行的是Bash或ZSH。
- en: A couple of immediately valuable things to do in an environment you commonly
    use for development are installing ZSH and `vim` configurations. For `vim`, one
    recommended setting is [awesome vim](https://oreil.ly/HChFQ), and for ZSH, there
    is [ohmyzsh](https://ohmyz.sh).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在你通常用于开发的环境中，有几件立即有价值的事情是安装ZSH和`vim`配置。对于`vim`，一个推荐的设置是[awesome vim](https://oreil.ly/HChFQ)，而对于ZSH，则有[ohmyzsh](https://ohmyz.sh)。
- en: What is “the shell”? Ultimately it is a user interface that controls a computer,
    just like the MacOS Finder. As MLOps practitioners, it is worth knowing how to
    use the most robust user interface, the command line, for people who work with
    data. Here are a few things you can do.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是“shell”？最终它是一个像MacOS Finder一样控制计算机的用户界面。作为MLOps从业者，了解如何使用最强大的用户界面——命令行对于处理数据的人来说是值得的。以下是你可以做的一些事情。
- en: List Files
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出文件
- en: 'With the shell, you can list files through the `ls` command. The flag `-l`
    adds additional listing information:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用shell，你可以通过`ls`命令列出文件。标志`-l`添加额外的列表信息：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Run Commands
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行命令
- en: 'In a GUI, you click a button or open an application to do work. In the shell,
    you run a command. There are many helpful built-in commands in the shell, and
    they often work well together. For example, an excellent way to figure out the
    location of shell executables is to use `which`. Here is an example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在GUI中，你点击一个按钮或打开一个应用程序来工作。在shell中，你运行一个命令。在shell中有许多有用的内置命令，它们通常可以很好地配合使用。例如，找出shell可执行文件的位置的一个绝佳方法是使用`which`。这里是一个示例：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice that the `ls` command is in the */bin* directory. This “hint” shows
    that I can find other executables in this directory. Here is a count of the executables
    in */bin/* (the pipe operator `|` will be explained in just a bit, but, in short,
    it accepts the input from another command):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`ls`命令在*/bin*目录中。这个“提示”表明我可以在这个目录中找到其他可执行文件。这里是*/bin/*中可执行文件的计数（管道操作符`|`稍后将会解释，但简言之，它接受来自另一个命令的输入）：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Files and Navigation
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件和导航
- en: In a GUI, you open a folder or a file; you use commands to accomplish the same
    thing in a shell.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在GUI中，你打开一个文件夹或文件；在shell中，你使用命令来完成相同的事情。
- en: '`pwd` shows the full path to where you are:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`pwd`显示了你所在位置的完整路径：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`cd` changes into a new directory:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd`切换到一个新目录：'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Input/Output
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入/输出
- en: In a previous example, the output of `ls` redirects to another command. Piping
    is an example of input and output operations working to accomplish a more sophisticated
    task. It is common to use the shell to pipe one command into another.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`ls`的输出重定向到另一个命令。管道是输入和输出操作的一个示例，用于完成更复杂的任务。通常使用shell将一个命令的输出传递到另一个命令中。
- en: 'Here is an example that shows a workflow with both a redirect and a pipe. Notice
    that first, the words “foo bar baz” direct to a file called *out.txt*. Next, the
    contents of this file print out via `cat`, and then they pipe into the command
    `wc`, which can count either the number of words via `-w` or characters via `-c`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，显示了一个具有重定向和管道的工作流程。首先，单词“foo bar baz”被重定向到一个名为*out.txt*的文件。接下来，这个文件的内容通过`cat`打印出来，然后它们被管道到命令`wc`中，它可以通过`-w`计算单词数或通过`-c`计算字符数：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is another example that directs the output of the `shuf` command to a
    new file. You can download that file from my [GitHub repository](https://oreil.ly/CDudc).
    The `shuf` executable “shuffles” a file while limiting it to the rows specified.
    In this case, it takes an almost 1 GB file and takes the first 100,000 rows, and
    outputs a new file using the `>` operator:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一个示例，将`shuf`命令的输出定向到一个新文件。你可以从我的[GitHub仓库](https://oreil.ly/CDudc)下载该文件。`shuf`可执行文件可以在限制行数的情况下对文件进行“洗牌”。在这种情况下，它获取一个接近1GB的文件，并且获取其前10万行，然后使用`>`运算符输出一个新文件。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using a shell technique like this can save the day when working on a CSV file
    too large to process data science libraries on a laptop.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像这样的shell技术可以在处理笔记本电脑上太大而无法处理数据科学库的CSV文件时派上用场。
- en: Configuration
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: 'The ZSH and Bash shell configuration files store settings that invoke each
    new time a terminal opens. As I mentioned earlier, customizing your Bash environment
    is recommended in a cloud-based development environment. For ZSH, an excellent
    place to start is *.zshrc*, and for Bash, it is *.bashrc*. Here is an example
    of something I store in my *.zshrc* configuration on my MacOS laptop. The first
    item is an alias that allows me to type the command `flask-azure-ml`, `cd` into
    a directory, and source a Python virtual environment in one fell swoop. The second
    section is where I export the AWS command line tool variables so I can make API
    calls:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Shell配置文件（ZSH和Bash）存储的设置会在每次打开终端时调用。正如我之前提到的，推荐在基于云的开发环境中定制你的Bash环境。对于ZSH来说，一个绝佳的起点是*.zshrc*，而对于Bash来说，则是*.bashrc*。下面是我在MacOS笔记本上存储在*.zshrc*配置中的一个示例。首先是一个别名，允许我一键输入命令`flask-azure-ml`，`cd`到一个目录，并启动一个Python虚拟环境。第二部分是我导出AWS命令行工具变量的地方，这样我就能够进行API调用：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In summary, my recommendation is to customize your shell configuration file
    for both your laptop and for cloud-based development environments. This small
    investment pays big dividends as you build in automation to your regular workflows.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我建议为你的笔记本和基于云的开发环境定制你的shell配置文件。这样的小投入在你构建自动化到常规工作流程中时会带来巨大的回报。
- en: Writing a Script
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写一个脚本
- en: It can be a bit daunting to think about writing your first shell script. The
    syntax is much scarier than Python with weird characters. Fortunately, in many
    ways, it is easier to get started. The best way to write a shell script is to
    put a command into a file, then run it. Here is an excellent example of a “hello
    world” script.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 想要写你的第一个shell脚本可能会有点令人望而却步。其语法比Python复杂得多，有一些奇怪的字符。幸运的是，在许多方面，它更容易上手。写shell脚本的最佳方式是将一个命令放入文件中，然后运行它。这里有一个很好的“hello
    world”脚本示例。
- en: 'The first line is called the “shebang” line and tells the script to use Bash.
    The second line is a Bash command, `echo`. The nice thing about a Bash script
    is that you can paste any commands you want in it. This fact makes the automation
    of small tasks straightforward even with little to no knowledge of programming:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行被称为“shebang”行，告诉脚本使用Bash。第二行是一个Bash命令，`echo`。Bash脚本的好处在于你可以在其中粘贴任何你想要的命令。这一点使得即使对编程了解不多，也能轻松地实现小任务的自动化：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, you use the `chmod` command to set the executable flag to make this script
    executable. Finally, you run it by appending `./`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以使用`chmod`命令设置可执行标志，使得这个脚本可以执行。最后，通过追加`./`来运行它：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The main takeaway of the shell is that you must have at least some basic skills
    to do MLOps. However, it is easy to get started, and before you know it, you can
    dramatically improve things you do daily via the automation of shell scripts and
    the use of the Linux command line. Next, let’s talk get started with an overview
    of the essential parts of cloud computing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Shell的主要要点是你必须至少具备一些基本的技能来进行MLOps。然而，入门是相对容易的，在你意识到之前，通过shell脚本的自动化和Linux命令行的使用，你可以显著改善你每天的工作。接下来，让我们开始概述云计算的基本要素。
- en: Cloud Computing Foundations and Building Blocks
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算基础和构建模块
- en: 'It is safe to say that almost all forms of machine learning require cloud computing
    in some form. A key concept in cloud computing is the idea of near-infinite resources,
    as described in [“Above the Clouds: A Berkeley View of Cloud Computing”](https://oreil.ly/Ug8kx).
    Without the cloud, it simply isn’t feasible to do many machine learning models.
    For example, Stephen Strogatz, the author of *Infinite Powers: How Calculus Reveals
    the Secrets of the Universe* (Mariner Books), makes the case that “By wielding
    infinity in just the right way, calculus can unlock the secrets of the universe.”
    For centuries specific problems like finding the shape of a circle were impossible
    without calculus to deal with infinite numbers. It is the same with cloud computing;
    many issues in machine learning, especially the operationalizing of models, are
    not feasible without the cloud. As shown in [Figure 2-3](#Figure-2-3), the cloud
    provides near-infinite compute and storage and works on the data without moving
    it.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以肯定地说，几乎所有形式的机器学习都在某种形式上需要云计算。云计算中的一个关键概念是接近无限的资源，正如[《云上之云：加州大学伯克利关于云计算的视角》](https://oreil.ly/Ug8kx)中所描述的那样。没有云计算，许多机器学习模型根本无法实现。例如，《无穷力量：微积分如何揭示宇宙的秘密》（Mariner
    Books）的作者斯蒂芬·斯特罗格茨（Stephen Strogatz）提到，“通过恰到好处地运用无穷大，微积分可以揭示宇宙的秘密。”几个世纪以来，像求解圆形的形状这样的具体问题，如果没有微积分处理无限大的数字是不可能的。云计算也是如此；在机器学习中，特别是模型的操作化方面，许多问题如果没有云计算是无法解决的。正如图2-3所示，云计算提供接近无限的计算和存储，且在数据不移动的情况下处理数据。
- en: '![pmlo 0203](Images/pmlo_0203.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![pmlo 0203](Images/pmlo_0203.png)'
- en: Figure 2-3\. Cloud computing harnesses near-infinite compute and data
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-3. 云计算利用接近无限的计算和数据资源
- en: It turns out that the ability to harness computing power on data without moving
    it, using near-infinite resources via machine learning platforms like AWS SageMaker
    or Azure ML Studio, is the killer feature of the cloud not replicable without
    cloud computing. Coupled with this killer feature is something I call the “Automator’s
    law.” Once the general public starts talking about automation of a vertical—self-driving
    cars, IT, factories, machine learning—it eventually happens.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道，利用计算机能力在不移动数据的情况下，通过像AWS SageMaker或Azure ML Studio这样的机器学习平台，使用接近无限的资源，是云计算的杀手级特性，这是无法在没有云计算的情况下复制的。伴随这一杀手级特性的是我所说的“自动化定律”。一旦公众开始讨论某个行业的自动化——如自动驾驶汽车、IT、工厂、机器学习——最终这种自动化都会发生。
- en: This concept doesn’t mean that some magic unicorn appears that sprinkles fairy
    dust on projects, and they get more manageable; it is that humans are good at
    spotting trends as a collective group. For example, when I worked in the television
    industry as a teenager, there was only the concept of “linear” editing. This workflow
    meant you needed three different tapes to dissolve to a black screen—the source
    tape, the edit master tape, and a third tape that contained the black footage.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念并不意味着会有一只神奇的独角兽出现，撒上仙女们的魔尘，然后项目变得更加容易管理；而是人类集体很擅长发现趋势。例如，当我还是个十几岁的电视行业工作者时，只有“线性”编辑的概念。这种工作流程意味着你需要三种不同的磁带才能实现到一个黑屏的溶解效果——源磁带、编辑主磁带以及一个包含黑色素材的第三个磁带。
- en: I remember people talking about how much work it was to keep swapping out new
    tapes and how it would be fantastic if this workflow became automated. Later it
    did become fully automated through the introduction of nonlinear editing. This
    technology allows you to store digital copies of the material and perform digital
    manipulation of footage versus inserting new material in a linear tape. These
    nonlinear editing systems cost hundreds of thousands of dollars in the early 1990s.
    Now I do more complicated editing on my thousand-dollar laptop with enough storage
    capacity to store thousands of such tapes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得人们曾经谈论过如何不断更换新磁带是多么繁重的工作，以及如果这种工作流程能够自动化将会多么美妙。后来，通过非线性编辑的引入，这确实变得完全自动化了。这项技术允许你存储材料的数字副本，并对镜头进行数字处理，而不是像线性磁带那样插入新材料。在1990年代初，这些非线性编辑系统的成本高达数十万美元。现在，我在成千上万的磁带存储容量足够的千元笔记本电脑上进行更复杂的编辑工作。
- en: The same scenario occurred with cloud computing in the early 2000s. Many companies
    I worked at used their own data centers staffed by teams of people that maintained
    them. When initial components of cloud computing cropped up, many people said,
    “I bet companies in the future can control an entire data center on their laptop.”
    Many expert data center technicians scoffed at the idea of their job falling victim
    to automation, yet, the Automator’s law struck again. A majority of companies
    in 2020 and beyond have some form of cloud computing, and newer jobs involve harnessing
    that power.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代初期，云计算也出现了同样的情景。我在许多公司工作时，它们都使用由维护团队运营的自己的数据中心。当云计算的最初组成部分出现时，许多人说，“我打赌将来公司可以在他们的笔记本电脑上控制整个数据中心。”许多专家数据中心技术人员对自己的工作会受到自动化影响的想法不屑一顾，然而，自动化法则再次发挥了作用。到2020年以及以后，大多数公司都使用某种形式的云计算，而新的工作涉及利用这种力量。
- en: Similarly, the automation of machine learning via AutoML is a nontrivial advancement
    that enables the creation of models more quickly, with higher accuracy and better
    explainability. As a result, jobs in the data science industry will change, just
    like editors and data center operator jobs changed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，通过AutoML自动化机器学习是一个非平凡的进步，它能够更快地创建模型，具有更高的准确性和更好的可解释性。因此，数据科学行业的工作将发生变化，就像编辑和数据中心操作员的工作发生了变化。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '**注意**'
- en: AutoML is the automation of the modeling aspect of machine learning. A crude
    and straightforward example of AutoML is an Excel spreadsheet that performs linear
    regression. You tell Excel which column is the target to predict and then which
    column is the feature.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: AutoML是机器学习建模方面的自动化。AutoML的一个简单直观的例子是一个执行线性回归的Excel电子表格。您告诉Excel要预测的列是哪一列，然后哪一列是特征。
- en: More sophisticated AutoML systems work similarly. You select what value you
    want to predict—for example, image classification, a numerical trend, categorical
    text classification, or perhaps clustering. Then the AutoML software system performs
    many of the same techniques that a data scientist would perform, including hyperparameter
    tuning, algorithm selection, and model explainability.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的AutoML系统工作方式类似。您选择要预测的值，例如图像分类、数值趋势、分类文本分类或者聚类。然后AutoML软件系统执行许多数据科学家会执行的相同技术，包括超参数调整、算法选择和模型可解释性。
- en: All major cloud platforms have AutoML tools embedded into MLOps platforms. As
    a result, AutoML is an option for all cloud-based machine learning projects and
    is increasingly becoming another productivity enhancement for them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要的云平台都集成了AutoML工具到MLOps平台中。因此，AutoML是所有基于云的机器学习项目的选择，并且越来越成为它们的另一种生产力提升。
- en: Tyler Cowen is an economist, author, and columnist for Bloomberg and grew up
    playing competitive chess. In his book *Average is Over* (Plume), Cowen mentions
    that chess software eventually beat humans, also proving the Automator’s law in
    action. Surprisingly, though, at the end of Cowen’s book, expert humans and chess
    software won versus chess software alone. Ultimately, this story may occur with
    machine learning and data science. Automation may replace simple machine learning
    tasks and make the domain expert humans controlling the ML automation orders of
    magnitude more effective.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Tyler Cowen是一位经济学家、作家，是彭博社的专栏作家，并且从小就参与竞技棋类比赛。在他的书《平均水平是如何被打败的》（Plume）中，Cowen提到，象棋软件最终击败了人类，也证明了自动化法则的实施。然而，令人惊讶的是，在Cowen书的结尾处，专家人类与象棋软件一起击败了单独的象棋软件。最终，这个故事可能会在机器学习和数据科学领域发生。自动化可能会取代简单的机器学习任务，并使领域专家人类控制的ML自动化命令效果提高数倍。
- en: Getting Started with Cloud Computing
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**开始使用云计算**'
- en: 'A recommended approach to getting started with cloud computing is setting up
    a multicloud development environment, as shown in the [O’Reilly Video Course:
    Cloud Computing with Python](https://oreil.ly/MGZfz). This video is an excellent
    companion to this section but isn’t required to follow along. The basic structure
    of a multicloud environment shows that a cloud shell is something all these clouds
    have in common, as shown in [Figure 2-4](#Figure-2-4).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐开始使用云计算的方法是建立一个多云开发环境，如在[O'Reilly视频课程：使用Python进行云计算](https://oreil.ly/MGZfz)中所示。这段视频是本节的绝佳伴侣，但不需要跟随。一个多云环境的基本结构显示，云壳是所有这些云共同拥有的东西，如在[#Figure-2-4](#Figure-2-4)中所示。
- en: A source control repository using GitHub, or a similar service, is the central
    location where all three cloud environments initially communicate. Each of the
    three clouds—AWS, Azure, and GCP—has cloud-based development environments via
    a cloud shell. In [Chapter 1](ch01.xhtml#Chapter1), a necessary Python scaffolding
    showed the advantages of developing a repeatable and testable structure. A CI/CD
    (continuous integration/continuous delivery) process via GitHub Actions ensures
    the Python code is working and of high quality.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GitHub 或类似服务的源代码控制存储库是最初所有三个云环境通信的中心位置。AWS、Azure 和 GCP 每个都有通过云 Shell 进行基于云的开发环境。在[第
    1 章](ch01.xhtml#Chapter1)中，一个必要的 Python 脚手架展示了开发可重复和可测试结构的优势。通过 GitHub Actions
    的 CI/CD（持续集成/持续交付）流程确保 Python 代码运行良好且质量高。
- en: '![Starting Cloud Computing](Images/pmlo_0204.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![启动云计算](Images/pmlo_0204.png)'
- en: Figure 2-4\. Starting cloud computing
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-4\. 启动云计算
- en: Note
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Testing and linting Python code is a process that validates the quality of a
    software project. A developer will run testing and linting locally to assist with
    keeping software quality high. This process is similar to having a robotic vacuum
    machine (robovac) you turn on when you want to clean a room in your house. The
    robovac is a helpful assistant that keeps your room in a known good state, and
    running lints and testing your code keeps your code in a known good state.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和审查 Python 代码是验证软件项目质量的过程。开发人员会在本地运行测试和审查来帮助保持软件质量的高水平。这个过程类似于当你想要清洁房间时打开的机器人吸尘器（robovac）。Robovac
    是一个有用的助手，可以保持你的房间处于良好状态，而运行代码审查和测试则可以保持你的代码处于良好状态。
- en: A CI/CD pipeline runs these quality-control checks in an external environment
    to ensure the application is working before its release into another production.
    This pipeline allows software deployment to be repeatable and reliable and is
    a modern software engineering best practice—another word for these software engineering
    best practices is DevOps.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 流水线在发布到另一个生产环境之前在外部环境中运行这些质量控制检查，以确保应用程序正常工作。这条流水线允许软件部署变得可重复和可靠，是现代软件工程的最佳实践——另一个这些软件工程最佳实践的名称是
    DevOps。
- en: Using all three major clouds is a great way to familiarize yourself with cloud
    computing if you are learning the cloud. This cross-cloud workflow helps because
    it solidifies knowledge. After all, the names of things are different, but the
    concepts are identical. If you need help with some of the terminologies, refer
    to [Appendix A](app01.xhtml#emerging-tech-key-terms).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在学习云计算，同时使用三大云服务商是熟悉云计算的一个好方法。这种跨云工作流有助于巩固知识。毕竟，事物的名称可能不同，但概念是相同的。如果你需要帮助理解某些术语，请参考[附录
    A](app01.xhtml#emerging-tech-key-terms)。
- en: Let’s dive into Python next, which is the de facto language of DevOps, cloud
    computing, data science, and machine learning.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们深入研究 Python，这是 DevOps、云计算、数据科学和机器学习的事实上语言。
- en: Python Crash Course
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python Crash Course
- en: A key reason for Python’s dominance is that the language is optimized for the
    developer and not for the computer. Languages like C or C++ have excellent performance
    because they are “lower-level,” meaning the developer must work much harder in
    solving a problem. For example, a C programmer must allocate memory, declare types,
    and compile a program. On the other hand, a Python programmer can put in some
    commands and run them, and there is often significantly less code in Python.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Python 占主导地位的一个关键原因是该语言是为开发者而非计算机进行优化的。像 C 或 C++ 这样的语言因为是“低级”的，所以具有出色的性能，但开发者在解决问题时必须付出更多努力。例如，C
    程序员必须分配内存、声明类型并编译程序。而 Python 程序员则可以输入一些命令并运行它们，通常在 Python 中的代码量明显较少。
- en: 'For that convenience, though, Python’s performance is much slower than C, C#,
    Java, and Go. Further, Python has limitations inherent to the language itself,
    including lack of true threads, lack of a JIT (Just in Time) compiler, and lack
    of type inference found in languages like C# or F#. With cloud computing, though,
    language performance does not bind to many problems. So it would be fair to say
    that Python’s performance got accidentally lucky because of two things: cloud
    computing and containers. With Cloud computing, the design is fully distributed,
    building on top of it using technologies like AWS Lambda and AWS SQS (Simple Queuing
    Service). Similarly, containerized technology like Kubernetes does the heavy lifting
    of building distributed systems, so Python threads become suddenly irrelevant.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，Python 的性能比 C、C#、Java 和 Go 慢得多。此外，Python 本身存在一些语言限制，包括缺乏真正的线程，缺乏 JIT（即时编译器），以及缺乏像
    C# 或 F# 中的类型推断。然而，随着云计算的发展，语言性能不再限制很多问题。因此，可以说 Python 的性能之所以出现了偶然的好运，是因为两个原因：云计算和容器。使用云计算，设计完全分布式，基于
    AWS Lambda 和 AWS SQS（简单队列服务）等技术进行构建。类似地，像 Kubernetes 这样的容器技术也在构建分布式系统方面发挥着重要作用，因此
    Python 线程突然变得无关紧要。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: AWS Lambda is a function as a service (FaaS) technology that runs on the AWS
    platform. It has the name FaaS because an AWS Lambda function can be just a few
    lines of code—literally a function. These functions can then attach to events
    like a cloud queuing system, Amazon SQS, or an image uploaded to Amazon S3 object
    storage.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 是一种函数即服务（FaaS）技术，运行在 AWS 平台上。它被称为 FaaS，因为 AWS Lambda 函数可以仅仅是几行代码——确实是一个函数。这些函数可以附加到像云排队系统
    Amazon SQS 或上传到 Amazon S3 对象存储的图像等事件上。
- en: One way to think about a cloud is that it is an operating system. In the mid-1980s,
    Sun Computer used the marketing phrase, “The Network is the Computer.” This slogan
    may have been premature in 1980, but in 2021 it is very accurate. For example,
    instead of spawning threads on a single machine, you could spawn AWS Lambda functions
    in the cloud, which behaves like an operating system with infinitely scalable
    resources.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 把云看作一个操作系统的一种方式是合理的。上世纪80年代中期，Sun Computer 使用了营销口号“网络即计算机”。这个口号在1980年可能为时过早，但在2021年却非常准确。例如，与其在单台机器上创建线程，你可以在云中生成行为类似操作系统的
    AWS Lambda 函数，它拥有无限可扩展的资源。
- en: In a talk I attended at Google, Dr. Patterson, a retired Berkeley Computer Science
    Professor and co-creator of the TPU (TensorFlow Processing Unit), mentioned that
    Python is 64,000 times slower than equivalent matrix operations in C shown in
    [Figure 2-5](#Figure-2-5). This fact is in addition to not having true threads.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我参加的一次谷歌演讲中，退休的伯克利计算机科学教授兼 TPU（TensorFlow Processing Unit）的共同创造者 Dr. Patterson
    提到，Python 在[图 2-5](#Figure-2-5)中显示的等效矩阵操作方面比 C 慢了64,000倍。这个事实除了缺乏真正的线程外还有这个。
- en: '![64,000 times worse Python Performance](Images/pmlo_0205.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![64,000 times worse Python Performance](Images/pmlo_0205.png)'
- en: Figure 2-5\. Python performance is 64,000 times worse than matrix operations
    in C
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-5\. Python 性能比 C 中的矩阵操作慢 64,000 倍
- en: Simultaneously, a research paper, [“Energy Efficiency across programming languages”](https://oreil.ly/4g5u2),
    shows that many operations in Python require 50 times more energy than equivalent
    operations in C. This research into energy efficiency also pegs Python as one
    of the worst-performing languages regarding how much power it requires to perform
    tasks compared to other languages, as shown in [Figure 2-6](#Figure-2-6). As Python
    has surged in popularity as one of the most popular languages on the planet, it
    does raise concerns on whether it is more like a coal powerplant than a green
    energy solar system. Ultimately, Python could need rescuing again for energy consumption.
    One solution could be for a major cloud vendor to actively build a new runtime
    for Python that takes advantage of modern computer science techniques like a JIT
    compiler.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，一篇研究论文[“跨编程语言的能效”](https://oreil.ly/4g5u2)显示，Python 中的许多操作比 C 中的等效操作消耗的能量多50倍。这项能效研究也将
    Python 列为能源效率最差的语言之一，与其他语言相比执行任务时需要的能量，如[图 2-6](#Figure-2-6)所示。随着 Python 成为全球最流行的语言之一，这引发了对其是否更像煤炭发电厂而不是绿色能源太阳能系统的担忧。最终，Python
    可能需要再次挽救能源消耗的解决方案可能是由一家主要的云供应商积极构建一个利用现代计算机科学技术的新运行时来利用 JIT 编译器。
- en: One final technical hurdle I have seen with newcomers to data science programming
    is their adoption of the traditional computer science approach to learning to
    code. For example, cloud computing and machine learning are very different from
    conventional software engineering projects like developing user-facing applications
    via a GUI (graphical user interface). Instead, much of the cloud and ML world
    involves writing small functions. Most of the time, these other Python parts are
    not needed, i.e., object-oriented code, and discourage a newcomer from speaking
    the language.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学编程的新手们常见的一个技术障碍是他们采用传统的计算机科学学习编码的方法。例如，云计算和机器学习与传统的软件工程项目（如通过 GUI 开发用户界面应用程序）截然不同。相反，大部分云计算和机器学习的世界都涉及编写小型函数。大部分时间，这些
    Python 的其他部分是不需要的，即面向对象的代码，这些会让新手感到望而却步。
- en: '![Python Language amongst worst offenders in Energy Consumption](Images/pmlo_0206.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![Python 语言在能源消耗中排名靠前](Images/pmlo_0206.png)'
- en: Figure 2-6\. The Python language is among the worst offenders in energy consumption
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-6\. Python 语言在能源消耗方面是最严重的罪魁祸首之一
- en: Computer science topics include concurrency, object-oriented programming, metaprogramming,
    and algorithm theory. Unfortunately, studying these topics is orthogonal to the
    programming style necessary for most programming in cloud computing and data science.
    It isn’t that these topics are not valuable; they are beneficial to the creators
    of platforms, libraries, and tools. If you are not initially “creating” libraries
    and frameworks but “using” libraries and frameworks, then you can safely ignore
    these advanced topics and stick to functions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学的主题包括并发、面向对象编程、元编程和算法理论。不幸的是，学习这些主题与云计算和数据科学中大部分编程所需的编程风格正交。并不是这些主题没有价值；它们对于平台、库和工具的创建者是有益的。如果你最初不是“创建”库和框架而是“使用”库和框架，那么你可以安全地忽略这些高级主题，专注于函数的使用。
- en: This crash-course approach temporarily ignores the creator of code used by others
    in favor of the consumer of code and libraries, i.e., the data scientist or MLOps
    practitioner. This brief crash course is for the consumer, where most people spend
    their career in data science. After these topics, if you are curious, you will
    have a solid foundation to move onto more complex computer science–focused topics.
    These advanced topics are not necessary to be productive immediately in MLOps.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这种速成课程方法暂时忽略了他人使用的代码的创建者，而是更倾向于代码和库的使用者，即数据科学家或 MLOps 从业者。这个简短的速成课程是为使用者设计的，大多数人在数据科学领域的职业生涯中会花费时间。学完这些主题后，如果你感兴趣，你将拥有坚实的基础，可以进一步学习更复杂的以计算机科学为重点的主题。这些高级主题对于立即在
    MLOps 中高效工作并不是必需的。
- en: Minimalistic Python Tutorial
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 极简主义 Python 教程
- en: 'If you wanted to learn the smallest amount of Python necessary to get started,
    what would you need to know? The two most essential components of Python are statements
    and functions. So let’s start with Python statements. A Python statement is an
    instruction to a computer; i.e., similar to telling a person “hello,” you can
    say to a computer to “print hello.” The following example is the Python interpreter.
    Notice, the “statement” in the example is the phrase `print("Hello World")`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想学习开始使用最少量的 Python，你需要知道什么？Python 的两个最基本组成部分是语句和函数。所以让我们从 Python 语句开始。Python
    语句是对计算机的一条指令；即类似于告诉一个人“你好”，你可以告诉计算机“打印 hello”。以下示例是 Python 解释器。请注意，示例中的“语句”是短语
    `print("Hello World")`：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With Python, you can also chain together two statements with a semicolon. For
    example, I import the `os` module, which has a function I want to use, `os.listdir`,
    then I call it to list the contents of a directory I am inside:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python，你也可以用分号将两个语句链接在一起。例如，我导入了 `os` 模块，其中有一个我想要使用的函数 `os.listdir`，然后我调用它来列出我所在目录的内容：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This pattern is pervasive in data science notebooks, and this is all you need
    to know to get started with Python. I would recommend trying things out in Python
    or IPython, or Jupyter REPL as the first way to get familiar with Python.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式在数据科学笔记本中非常普遍，这是你开始使用 Python 所需知道的一切。我建议首先在 Python 或 IPython 中尝试一些东西，或者使用
    Jupyter REPL 作为熟悉 Python 的第一步。
- en: 'The second item to know is how to write and use functions in Python. Let’s
    do that in the following example. This example is a two-line function that adds
    two numbers together, `x` and `y`. The entire point of a Python function is to
    serve as a “unit of work.” For example, a toaster in the kitchen works as a unit
    of work. It takes bread as input, warms the bread, then returns toast. Similarly,
    once I write the `add` function, I can use it as many times as possible with new
    inputs:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第二件要了解的事情是如何在Python中编写和使用函数。让我们在下面的示例中做到这一点。这个例子是一个将两个数字`x`和`y`相加的两行函数。Python函数的整个目的是作为一个“工作单位”。例如，厨房里的烤面包机作为一个工作单位。它接受面包作为输入，加热面包，然后返回烤面包。同样，一旦我写了`add`函数，我可以用新的输入多次使用它：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s assemble our knowledge and build a Python script. At the beginning of
    a Python script, there is a shebang line, just like in Bash. Next, the `choices`
    library is imported. This module is later used in a “loop” to send random numbers
    to the `add` function:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们汇集我们的知识并构建一个Python脚本。在Python脚本的开头，有一行shebang行，就像在Bash中一样。接下来，导入`choices`库。稍后在“循环”中，该模块用于向`add`函数发送随机数：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The script needs to be made executable by running `chmod +x add.py`, just like
    a Bash script:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本需要通过运行`chmod +x add.py`来使其可执行，就像Bash脚本一样：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can learn about Python a lot more, but “toying” around with examples like
    the one shown here is perhaps the quickest way to go from “zero to one.” So let’s
    move on to another topic, math for programmers, and tackle it in a minimalistic
    fashion as well.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以更深入地了解Python，但像这里展示的例子一样“玩弄”是从“零到一”的最快方式。因此，让我们继续另一个话题，程序员的数学，并以一种极简的方式解决它。
- en: Math for Programmers Crash Course
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序员的数学速成课程
- en: Math can be both daunting and irritating, but understanding the basics is essential
    for working with machine learning. So let’s tackle a few useful and essential
    ideas.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 数学可能既令人畏惧又令人恼火，但理解基础知识对于使用机器学习至关重要。因此，让我们来解决一些有用且基本的概念。
- en: Descriptive Statistics and Normal Distributions
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述统计和正态分布
- en: 'Many things in the world are “normally” distributed. A good example is height
    and weight. If you plot the height of every person in the world, you will get
    a “bell-shaped” distribution. This distribution is intuitive in that most people
    you encounter are of average height, and it is unusual to see a seven-foot-tall
    basketball player. Let’s walk through a [Jupyter notebook](https://oreil.ly/i5NF3)
    containing 25,000 records of human heights and weights of 19-year-old children:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上的许多事物都是“正态”分布的。一个很好的例子是身高和体重。如果你绘制世界上每个人的身高，你会得到一个“钟形”分布。这种分布直观地表明，你遇到的大多数人都是平均身高，见到七英尺高的篮球运动员是不寻常的。让我们浏览包含25,000条19岁儿童身高和体重记录的[Jupyter笔记本](https://oreil.ly/i5NF3)：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, a plot, shown in [Figure 2-7](#Figure-2-7), shows a linear relationship
    between height and weight, which most of us intuitively know. The taller you are,
    the more you weigh:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一个图表，显示在[#Figure-2-7](#Figure-2-7)中，展示了身高和体重之间的线性关系，这是我们大多数人直觉上知道的。你越高，你就越重：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Plot of Weight in Pounds versus Inches in Height](Images/pmlo_0207.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![体重与身高的图表](Images/pmlo_0207.png)'
- en: Figure 2-7\. Height and weight
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-7. 身高和体重
- en: The step of visualizing the data in a dataset is called “Exploratory Data Analysis.”
    The general idea is to “look around” using a combination of math and visualization.
    The next step is to look at the descriptive statistics of this “normal distribution.”
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集中可视化数据的步骤称为“探索性数据分析”。总体思路是使用数学和可视化“四处看看”。下一步是查看这个“正态分布”的描述统计。
- en: 'In Pandas, you get these descriptive statistics through the use of `df.describe()`.
    One way to consider descriptive statistics is to view them as a way of “seeing”
    numerically what the eye sees visually. For example, the 50th percentile, or median,
    shows the number that represents the exact middle height. This value is about
    68 inches. The max statistic in this dataset is 75 inches. Max represents the
    most extreme observation or the tallest person measured for this dataset. The
    max observation in a normally distributed dataset is rare, just as the minimum
    is. You can see this trend in [Figure 2-8](#Figure-2-8). The `DataFrame` in Pandas
    comes with a describe method that when called gives a full range of descriptive
    statistics :'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pandas 中，可以通过使用 `df.describe()` 获得这些描述性统计数据。考虑描述性统计数据的一种方法是将其视为“数值上看到”的方式，就像眼睛所看到的视觉效果一样。例如，第50百分位数或中位数显示了代表确切中间身高的数字。此值约为68英寸。此数据集中的最大统计值为75英寸。最大值代表了极端观测或数据集中测量的最高个人。在正态分布的数据集中，最大观测是罕见的，就像最小观测一样。您可以在
    [图2-8](#Figure-2-8) 中看到这一趋势。Pandas 中的 `DataFrame` 提供了一个 `describe` 方法，调用该方法将给出一整套描述性统计数据：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![pmlo 0208](Images/pmlo_0208.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![pmlo 0208](Images/pmlo_0208.png)'
- en: Figure 2-8\. Height/weight descriptive statistics
  id: totrans-128
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-8\. 身高/体重描述性统计
- en: 'One of the best ways to visualize height and weight’s normal bell-shaped distribution
    is to use a Kernel Density plot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化身高和体重的正态钟形分布最好的方法之一是使用核密度图：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Both the weight and the height show a “bell distribution.” The extreme values
    are rare, and most of the values are in the middle, as shown in [Figure 2-9](#Figure-2-9).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 体重和身高都显示出“钟形分布”。极端值很少，大多数值位于中间，如 [图2-9](#Figure-2-9) 所示。
- en: '![Kernel Density plot of Weight and Height](Images/pmlo_0209.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![身高和体重的核密度图](Images/pmlo_0209.png)'
- en: Figure 2-9\. Kernel Density plot of weight and height
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-9\. 身高和体重的核密度图
- en: Machine learning heavily builds on the idea of a normal distribution, and having
    this intuition goes a long way to building and maintaining machine learning models.
    However, it is essential to note that other distributions are beyond the normal
    distribution, making the world much harder to model. An excellent example of this
    is what the author Nassim Taleb calls “fat tails,” i.e., hard-to-predict and rare
    events that significantly affect the world.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习在很大程度上建立在正态分布的理念上，具备这种直觉对于构建和维护机器学习模型至关重要。然而，需要注意的是，其他分布超出了正态分布，这使得世界更难以建模。一个很好的例子是作者纳西姆·塔勒布所称的“大尾巴”，即难以预测且罕见的事件，这些事件显著影响世界。
- en: Note
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Another example of the danger of being too confident in modeling the world
    can be found in Dr. Steven Koonin’s book, *Unsettled* (BenBella Books). I worked
    with Dr. Koonin when he was in the administration of Caltech and found him to
    be an enthusiastic scientist and fun person to have a random conversation with.
    Here is a quote about modeling from his book:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于过度自信地模拟世界的危险，还可以在史蒂文·库宁博士的书《不安定》（BenBella Books）中找到。我曾与库宁博士在加州理工学院管理层工作时合作过，发现他是一位充满热情的科学家，和他随意交谈是一种愉快的体验。以下是他书中关于建模的一句引用：
- en: Since we have a very solid understanding of the physical laws that govern matter
    and energy, it’s easy to be seduced by the notion that we can just feed the present
    state of the atmosphere and oceans into a computer, make some assumptions about
    future human and natural influences, and so accurately predict the climate decades
    into the future. Unfortunately, that’s just a fantasy, as you might infer from
    weather forecasts, which can be accurate only out to two weeks or so.
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于我们对控制物质和能量的物理定律有非常牢固的理解，很容易陷入这样的幻想，即我们只需将当前大气和海洋状态输入计算机，对未来的人为和自然影响进行一些假设，就能准确预测未来数十年的气候。不幸的是，这只是一个幻想，你可以从天气预报中推断出，它们只能准确预测出两周左右的时间。
- en: Optimization
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化
- en: A fundamental problem in machine learning is the concept of optimization. Optimization
    is the ability to find the best, or good enough, solution to a problem. Gradient
    descent is an optimization algorithm at the heart of deep learning. The goal of
    gradient descent is to convert to the global minimum, i.e., the optimal solution,
    versus getting stuck in a local minimum. The intuition behind the algorithm is
    relatively straightforward if you imagine walking down a mountain in the dark.
    The global minimum solution means you get off the mountain alive at the bottom.
    The local minimum means you walked accidentally into a lake on the side of the
    mountain 1,000 feet from the bottom.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习中一个基本问题是优化的概念。优化是找到问题的最佳或足够好的解决方案的能力。梯度下降是深度学习核心的优化算法。梯度下降的目标是转向全局最小值，即最优解，而不是陷入局部最小值。这个算法的直觉相对简单，如果你想象在黑暗中下山，全局最小值的解决方案意味着你安全地从山底下来。局部最小值意味着你意外地走进了山脚下1,000英尺处的湖中。
- en: Let’s walk through an example of optimization problems. An excellent place to
    start is by observing the types of notation involved with optimization. When creating
    a model, you need to understand the Python method of notating algebraic expressions.
    The quick summary in [Figure 2-10](#Figure-2-10) compares terms between a spreadsheet,
    algebra, and Python. A key takeaway is you can do the same thing on a whiteboard,
    in Excel, or with a bit of code.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过优化问题的示例来详细说明。开始观察与优化相关的符号类型是一个很好的起点。创建模型时，你需要理解Python标记代数表达式的方法。在[图2-10](#Figure-2-10)的快速总结中，比较了电子表格、代数和Python之间的术语。一个关键的要点是你可以在白板上、Excel中或使用少量代码完成相同的工作。
- en: '![Notation is relative](Images/pmlo_0210.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![符号是相对的](Images/pmlo_0210.png)'
- en: Figure 2-10\. Notation is relative
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-10\. 符号是相对的
- en: 'Now, let’s look at a solution to making the correct change. You can find the
    code to this solution [on GitHub](https://oreil.ly/eIR26). The general idea with
    this code example is to pick a *greedy* solution to make the change. Greedy algorithms
    work by always taking the best option first. They also work well if you don’t
    care about the perfect solution, or it is impossible to find the perfect solution,
    but you are OK with a “good enough” solution. In this case, it would be the highest
    value coins and making the change with those, then moving onto the next highest:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下正确找零的解决方案。你可以在[GitHub上找到这个解决方案的代码](https://oreil.ly/eIR26)。这个代码示例的一般思路是选择一种*贪婪*的方法来做找零。贪婪算法总是优先选择最好的选项。如果你不关心完美的解决方案，或者找到完美的解决方案是不可能的，但你可以接受一个“足够好”的解决方案，那么这种算法也会很有效。在这种情况下，它将是使用面值最高的硬币来进行找零，然后转向下一个最高面值的硬币：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is the core section of the code that does a greedy match. Note
    that a recursive function solves each iteration of the problem since the large
    coins eventually run out. The algorithm next finds medium coins that run out;
    finally, it moves to the smallest coins:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是核心部分的代码，用于进行贪婪匹配。注意，一个递归函数解决了每次迭代的问题，因为大面值的硬币最终用完了。接下来，算法找到了中面值的硬币，然后用完了；最后，它转向了最小面值的硬币：
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: While there are many different ways to express the concept algorithmically,
    the idea is the same. Without knowing how to find the “perfect” solution, the
    appropriate answer is always picking the best choice when presented. Intuitively,
    this is like walking to a city’s diagonal destination and going straight or turning
    right each time the light ahead of you turns red.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管表达算法的方式有很多种，但基本思想是一样的。如果不知道如何找到“完美”的解决方案，那么当面对选择时，总是选择最佳的选项是合适的答案。直观地说，这就像走向城市的对角目的地，每次前方的信号灯变红时，你都选择直走或向右转。
- en: 'Here is a series of tests for this algorithm. They show how the algorithm performs,
    which is often a good idea when testing a solution involving optimization:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是该算法的一系列测试。它们展示了算法的表现，这在测试涉及优化解决方案时通常是个好主意：
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Next, let’s build on greedy algorithms in the following problem. One of the
    most studied problems in optimization is the traveling salesman problem. You can
    find the source code [on GitHub](https://oreil.ly/3u5Hd). This example is a list
    of routes that are in a *routes.py* file. It shows the distance between different
    companies in the Bay Area.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在以下问题中进一步探讨贪婪算法。优化中最为研究的问题之一是旅行推销员问题。你可以在[GitHub上找到源代码](https://oreil.ly/3u5Hd)。这个例子是一个*routes.py*文件中路线的列表，显示了旧金山湾区不同公司之间的距离。
- en: It is an excellent example of a perfect solution that doesn’t exist, but a good
    enough one does. The general problem asks the question, “How can you travel to
    a list of cities and minimize the distance?”
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个没有完美解决方案的极好示例，但是存在一个足够好的解决方案。一般性问题问的是：“如何能够旅行到一系列城市并且最小化距离？”
- en: 'One way to do this is to use a “greedy” algorithm. It will pick the right solution
    at every choice. Often this can lead to a good enough answer. In this particular
    example, a “random” city is chosen each time as the starting point. This example
    adds the ability for simulations to pick the lowest distance. A user of the simulations
    could simulate as many times as they have time. The smallest total length is the
    best answer. The following is a sample of what the input looks like before processing
    into the TSP algorithm:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是使用“贪婪”算法。它在每个选择时都选择正确的解决方案。通常这可能导致足够好的答案。在这个特定的例子中，每次随机选择一个城市作为起点。该示例添加了模拟选择最短距离的能力。模拟的使用者可以模拟尽可能多次数。最小的总长度是最佳答案。以下是在进入TSP算法处理之前输入看起来像的样本：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let’s run the script. First, note that it takes as an input of the complete
    simulations to run:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行脚本。首先，请注意它作为输入的完整模拟运行：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s run this “greedy” algorithm 25 times. Notice that it finds a “good” solution
    of 129\. This version may or may not be the optimal solution in a more extensive
    set of coordinates, but it is good enough to start a road trip for our purposes:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个“贪婪”算法25次。请注意，它找到了一个“好”的解决方案为129。在更广泛的坐标集中，这个版本可能是最优解决方案，但它已足够作为我们的路线规划起点：
- en: '[PRE24]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Notice that if I run the simulation just once, it randomly selects a worse
    distance of 143:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果我只运行一次模拟，它随机选择了一个较差的距离为143：
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Notice in [Figure 2-11](#Figure-2-11) how I would run multiple iterations of
    the code in a real-world scenario to “try out ideas.” If the dataset was enormous
    and I was in a hurry, I may do only a few simulations, but if I was leaving for
    the day, I might let it run 1,000 times and finish by the time I come back in
    the morning the next day. There could be many local minima in a geographic coordinates
    dataset—that is, solutions to the problem that don’t quite reach the global minima,
    or the optimal solution.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在[图 2-11](#Figure-2-11)中，我如何在真实场景中运行代码的多次迭代来“尝试想法”。如果数据集非常庞大而且我很匆忙，我可能只进行几次模拟，但如果我要离开一整天，我可能会让它运行1,000次，并在第二天早上回来时完成。在地理坐标数据集中可能存在许多局部最小值，即问题的解决方案并没有完全达到全局最小值或最优解。
- en: '![TSP Simulation](Images/pmlo_0211.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![TSP 模拟](Images/pmlo_0211.png)'
- en: Figure 2-11\. TSP simulation
  id: totrans-162
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-11\. TSP 模拟
- en: Optimization is part of our lives, and we use greedy algorithms to solve everyday
    problems because they are intuitive. Optimization is also at the core of how machine
    learning works using gradient descent. A machine learning problem iteratively
    walks toward a local or global minimum using the gradient descent algorithm, as
    shown in [Figure 2-12](#Figure-2-12).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 优化是我们生活的一部分，我们使用贪婪算法来解决日常问题，因为它们直观。优化也是机器学习如何使用梯度下降算法的核心。机器学习问题通过梯度下降算法迭代地朝向局部或全局最小值，如[图 2-12](#Figure-2-12)所示。
- en: '![Optimization](Images/pmlo_0212.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![优化](Images/pmlo_0212.png)'
- en: Figure 2-12\. Optimization
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-12\. 优化
- en: Next, let’s dive into machine learning core concepts.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们深入了解机器学习的核心概念。
- en: Machine Learning Key Concepts
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习关键概念
- en: Machine learning is the ability for computers to perform tasks without explicit
    programming. They do this by “learning” from data. As discussed earlier, a good
    intuition would be a machine learning model that could predict weight based on
    height. It could “learn” from 25,000 observations and then give a prediction.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习是计算机在没有显式编程的情况下执行任务的能力。它们通过从数据中“学习”来实现这一点。正如之前讨论的，一个好的直觉是基于身高来预测体重的机器学习模型。它可以从25,000次观察中“学习”，然后进行预测。
- en: 'Machine learning involves three categories: supervised, unsupervised, and reinforcement
    learning. Supervised machine learning is when the “labels” are known, and the
    model learns from historical data. In the previous example, height and weight
    are labels. Additionally, the 25,000 observations are an example of historical
    data. Note that all machine learning requires data to be in a numerical form and
    requires scaling. Imagine if a friend bragged about running 50\. What did they
    mean? Was it 50 miles or 50 feet? Magnitude is the reason for scaling data before
    processing a prediction.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习涉及三个类别：监督学习、无监督学习和强化学习。监督学习是指“标签”已知，模型从历史数据中学习。在前面的例子中，身高和体重就是标签。另外，这25,000条观测数据是历史数据的一个例子。需要注意的是，所有的机器学习都要求数据以数值形式存在，并且需要进行缩放。想象一下，如果朋友吹嘘他跑了50。他是指50英里还是50英尺？幅度是在处理预测之前缩放数据的原因。
- en: Unsupervised machine learning works to “discover” labels. A good intuition of
    how this works is to consider an NBA season. In the visualization shown in [Figure 2-15](#Figure-2-15)
    from the 2015–2016 NBA season, the computer “learned” how to group the different
    NBA players. It is up to the domain expert, in this case, me, to select the appropriate
    labels. The algorithm was able to cluster groups, one of which I labeled the “best”
    players.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 无监督机器学习致力于“发现”标签。理解这如何运作的一个好直觉是考虑NBA赛季。在显示在[图 2-15](#Figure-2-15)中的可视化中，计算机“学会”了如何将不同的NBA球员分组。在这种情况下，由领域专家（也就是我）选择适当的标签。该算法能够对群组进行聚类，其中一个我标记为“最佳”球员。
- en: Note
  id: totrans-171
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As a domain expert in basketball, I then added a label called “best.” Another
    domain expert may disagree, though, and call these players “elite well-rounded”
    or some other label. Clustering is both an art and a science. Having a domain
    expert who understands the trade-offs for what to label a clustered dataset could
    make or break the usefulness of the unsupervised machine learning prediction.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 作为篮球领域的专家，我随后增加了一个称为“最佳”的标签。然而，另一位领域专家可能会持不同意见，将这些球员称为“精英全能”或其他标签。聚类既是一门艺术也是一门科学。对于如何为聚类数据集进行标记，有一个理解权衡的领域专家可能是决定无监督机器学习预测是否有用的关键。
- en: '![Clustered and Faceted K-Means Clustering of NBA players](Images/pmlo_0215.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![NBA球员的聚类和分面K均值聚类](Images/pmlo_0215.png)'
- en: Figure 2-15\. Clustered and faceted K-means clustering of NBA players
  id: totrans-174
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-15\. NBA球员的聚类和分面K均值聚类
- en: 'The computer grouped the data based on a comparison of four attributes: points,
    rebounds, blocks, and assists. Then, in multidimensional space, players with the
    lowest total distance from each other were grouped to form a label. This clustering
    algorithm is why LeBron James and Kevin Durant group together; they have similar
    metrics. Additionally, Steph Curry and Chris Paul are alike since they score many
    points and give out many assists.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机根据四个属性的比较（得分、篮板、盖帽和助攻）对数据进行了分组。然后，在多维空间中，距离彼此最近的球员被分组形成一个标签。这种聚类算法就是为什么勒布朗·詹姆斯和凯文·杜兰特被分在一起的原因；他们有相似的指标。此外，斯蒂芬·库里和克里斯·保罗也很像，因为他们得分很高并且助攻很多。
- en: Note
  id: totrans-176
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A common dilemma with K-means clustering is how to select the correct number
    of clusters. This part of the problem is also an art and science problem as there
    isn’t necessarily a perfect answer. One solution is to use a framework to create
    elbow plots for you, like [Yellowbrick](https://oreil.ly/wwu35) for sklearn.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: K均值聚类的一个常见难题是如何选择正确的聚类数。这个问题的解决既是艺术也是科学，因为没有一个完美的答案。一种解决方案是使用一个框架为你创建肘部图，比如[Yellowbrick](https://oreil.ly/wwu35)用于sklearn。
- en: Another MLOps-style solution is to let the MLOps platform, say AWS Sagemaker,
    do the K-means cluster assignment through [automated hyperparameter tuning](https://oreil.ly/XKJc2).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种MLOps风格的解决方案是让MLOps平台，比如AWS Sagemaker，通过[自动超参数调整](https://oreil.ly/XKJc2)来执行K均值聚类分配。
- en: Finally, with reinforcement learning, an “agent” explores an environment to
    learn how to perform tasks. For example, consider a pet or a small child. They
    know how to interact with the world by exploring their environment. A more concrete
    example is the AWS DeepRacer system that allows you to train a model car to drive
    around a track, as shown in [Figure 2-16](#Figure-2-16).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过强化学习，一个“代理人”探索环境以学习如何执行任务。例如，考虑一只宠物或一个小孩子。他们通过探索他们的环境来学会如何与世界互动。一个更具体的例子是AWS
    DeepRacer系统，它允许你训练一个模型车在赛道上行驶，如[图 2-16](#Figure-2-16)所示。
- en: '![AWS DeepRacer](Images/pmlo_0216.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![AWS DeepRacer](Images/pmlo_0216.png)'
- en: Figure 2-16\. AWS DeepRacer
  id: totrans-181
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-16\. AWS DeepRacer
- en: The agent, which is the car, interacts with the track, which is the environment.
    The vehicle moves through each section of the track, and the platform stores data
    about where it is on the track. A reward function decides how the agent interacts
    on each run through the track. Randomness plays a huge role in training this type
    of model, so different reward function strategies could yield different results.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 代理（即汽车）与赛道（即环境）进行交互。车辆通过赛道的每个部分移动，平台记录其在赛道上的位置数据。奖励函数决定了代理在每次通过赛道时的交互方式。随机性在训练这种类型的模型中起着重要作用，因此不同的奖励函数策略可能会产生不同的结果。
- en: 'The following is an example of a reward function in Python for AWS DeepRacer
    that rewards following the centerline:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是为 AWS DeepRacer 编写的奖励函数示例，奖励车辆保持在中心线上：
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here is a different reward function that rewards the agent for staying inside
    the two borders of the track. This approach is similar to the previous reward
    function, yet it could yield dramatically different results:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个奖励函数，用于奖励代理车辆保持在赛道的两个边界内。这种方法与前一个奖励函数类似，但可能产生截然不同的结果：
- en: '[PRE27]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Doing machine learning in production requires the foundational knowledge covered
    in this chapter, i.e., knowing which approach to use. For example, discovering
    labels through unsupervised machine learning can be invaluable to determining
    who are the best paying customers. Similarly, predicting the number of units that
    will sell next quarter can be accomplished through a supervised machine learning
    approach that takes the historical data and creates a prediction. So next, let’s
    dive into the basics of data science.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中进行机器学习需要本章介绍的基础知识，即了解使用哪种方法。例如，通过无监督机器学习发现标签对确定最佳付费客户非常有价值。同样，预测下个季度销售的单位数量可以通过监督机器学习方法完成，该方法使用历史数据创建预测。接下来，让我们深入探讨数据科学的基础知识。
- en: Doing Data Science
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行数据科学
- en: 'Another foundational skill to master is “the data science way.” I recommend
    creating the following formulaic structure in a notebook in classes I teach: *Ingest*,
    *EDA*, and *Modeling* and *Conclusion*. This structure allows anyone in a team
    to quickly toggle through different project sections to get a feel for it. In
    addition, for a model deployed to production, it is beneficial to have a notebook
    checked in alongside the code that deploys the model to serve as a *README* for
    thinking behind the project. You can see an example of this in [Figure 2-17](#Figure-2-17).'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要掌握的基础技能是“数据科学方法”。我建议在教学中创建以下公式化结构的笔记本类：*Ingest*、*EDA*、*Modeling* 和 *Conclusion*。这种结构允许团队中的任何人快速切换到不同的项目部分，以便对其有所了解。此外，对于部署到生产环境的模型，旁边检查笔记本作为项目背后思考的*README*也是有益的。你可以在[图 2-17](#Figure-2-17)中看到这种示例。
- en: '![Colab notebook](Images/pmlo_0217.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![Colab 笔记本](Images/pmlo_0217.png)'
- en: Figure 2-17\. Colab notebook
  id: totrans-191
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-17\. Colab 笔记本
- en: You can see an example of this structure in the [Colab notebook Data Science
    with Covid](https://oreil.ly/1iQps).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[Colab 笔记本 Covid 数据科学](https://oreil.ly/1iQps)中看到这种结构的示例。
- en: This clean breakdown of parts of the notebook means that each section can be
    a “chapter” in writing a data science book. The Ingest section benefits from data
    sources that load via a web request, i.e., feed directly to Pandas. The notebook
    data sources can be replicated by others using this approach, as shown in [Figure 2-18](#Figure-2-19).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这份笔记本各部分的清晰分解意味着每个部分都可以作为写数据科学书籍的“章节”。Ingest 部分受益于通过网页请求加载的数据源，即直接提供给 Pandas。其他人可以通过这种方法复制笔记本数据源，如[图 2-18](#Figure-2-19)所示。
- en: '![Colab notebook structure](Images/pmlo_0218.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![Colab 笔记本结构](Images/pmlo_0218.png)'
- en: Figure 2-18\. Colab notebook structure
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-18\. Colab 笔记本结构
- en: The EDA section is for the exploration of ideas. What is going on with the data?
    This is the opportunity to find out, as the top Covid states show in the following
    chart using Plotly in [Figure 2-19](#Figure-2-20).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: EDA 部分用于探索想法。数据出现了什么情况？这是找出答案的机会，正如使用 Plotly 在[图 2-19](#Figure-2-20)中显示的顶级 Covid
    州所示。
- en: '![Colab Notebook EDA](Images/pmlo_0219.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![Colab 笔记本 EDA](Images/pmlo_0219.png)'
- en: Figure 2-19\. Colab notebook EDA
  id: totrans-198
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-19\. Colab 笔记本 EDA
- en: The Modeling section is where the model lives. Later, this repeatability can
    be critical since the MLOps pipeline may need to reference how the model creation
    occurred. For example, you can see an excellent example of a serialized sklearn
    model in this [Boston Housing Pickle Colab notebook](https://oreil.ly/9XhWC).
    Note that I test out how this model will eventually work in an API or cloud-based
    system, like this [Flask ML deployment project.](https://oreil.ly/6glox)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 建模部分是模型所在的地方。随后，这种可重复性可能至关重要，因为 MLOps 流水线可能需要引用模型创建的方式。例如，您可以在这个[Boston Housing
    Pickle Colab 笔记本](https://oreil.ly/9XhWC)中看到一个优秀的序列化 sklearn 模型的示例。请注意，我测试了这个模型最终将如何在
    API 或基于云的系统中工作，就像这个[Flask ML 部署项目](https://oreil.ly/6glox)一样。
- en: The Conclusion section should be a summary for a business leader making the
    decision. Finally, check your project into GitHub to build your MLOps portfolio.
    The rigor in adding this additional documentation pays off as an ML project matures.
    Operations teams, in particular, may find it very valuable to understand the original
    thinking for why a model is in production and decide to remove the model from
    production since it no longer makes sense.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 结论部分应为决策业务领导做出决定的总结。最后，将您的项目提交到 GitHub 以构建您的 MLOps 作品集。在 ML 项目成熟时，增加这些额外的文档是值得的。特别是运营团队可能会发现理解模型为何投入生产以及决定移除不再合适的模型的原始思考非常有价值。
- en: Next, let’s discuss building an MLOps pipeline step by step.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们逐步讨论构建 MLOps 流水线。
- en: Build an MLOps Pipeline from Zero
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从零开始构建 MLOps 流水线
- en: Let’s put everything in this chapter together, and let’s dive into Deploy Flask
    Machine Learning Application on Azure App Services. Notice in [Figure 2-20](#Figure-2-21)
    that GitHub events trigger a build from the Azure Pipelines build process, which
    then deploys the changes to a serverless platform. The names are different on
    other cloud platforms, but conceptionally things are very similar in both AWS
    and GCP.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将本章中的所有内容整合在一起，并深入探讨如何在 Azure 应用服务上部署 Flask 机器学习应用程序。请注意，在 [图 2-20](#Figure-2-21)
    中，GitHub 事件触发 Azure Pipelines 构建过程的构建，然后将更改部署到无服务器平台。尽管在其他云平台上名称不同，但在概念上这些事情在
    AWS 和 GCP 中非常相似。
- en: '![pmlo 0220](Images/pmlo_0220.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![pmlo 0220](Images/pmlo_0220.png)'
- en: Figure 2-20\. MLOps overview
  id: totrans-205
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-20\. MLOps 概述
- en: 'To run it locally, follow these steps:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在本地运行它，请按以下步骤操作：
- en: 'Create virtual environment and source:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境并激活：
- en: '[PRE28]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Run `make install`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `make install`。
- en: Run `python app.py`.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `python app.py`。
- en: In a separate shell, run `./make_prediction.sh`.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个 Shell 中运行 `./make_prediction.sh`。
- en: 'To run it in Azure Pipelines (refer to [Azure Official Documentation guide](https://oreil.ly/OLM8d)
    throughout):'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Pipelines 中运行它（参考[Azure 官方文档指南](https://oreil.ly/OLM8d)）：
- en: Launch Azure Shell as shown in [Figure 2-21](#Figure-2-22).
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Azure Shell，如 [图 2-21](#Figure-2-22) 所示。
- en: '![Launch Azure Cloud Shell](Images/pmlo_0221.png)'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![启动 Azure 云 Shell](Images/pmlo_0221.png)'
- en: Figure 2-21\. Launch Azure Cloud Shell
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-21\. 启动 Azure 云 Shell
- en: Create a GitHub repo with Azure Pipelines enabled (which could be a fork of
    this repo) as shown in [Figure 2-22](#Figure-2-23).
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个启用了 Azure Pipelines 的 GitHub 仓库（可以是此仓库的分支），如 [图 2-22](#Figure-2-23) 所示。
- en: '![Create GitHub Repo with Azure Pipelines](Images/pmlo_0222.png)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建带有 Azure Pipelines 的 GitHub 仓库](Images/pmlo_0222.png)'
- en: Figure 2-22\. Create GitHub repo with Azure Pipelines
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-22\. 创建带有 Azure Pipelines 的 GitHub 仓库
- en: Clone the repo into Azure Cloud Shell.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将仓库克隆到 Azure 云 Shell 中。
- en: Note
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意：
- en: If you need more information on how to setup SSH keys, you can follow this YouTube
    video guide on how to [setup SSH keys and configure cloud shell environment](https://oreil.ly/RJaWz).
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您需要关于如何设置 SSH 密钥的更多信息，请参阅 YouTube 视频指南，如[设置 SSH 密钥和配置云 Shell 环境](https://oreil.ly/RJaWz)。
- en: 'Create virtual environment and source:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境并激活：
- en: '[PRE29]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run `make install`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `make install`。
- en: Create an app service and initially deploy your app in Cloud Shell, as shown
    in [Figure 2-23](#Figure-2-24).
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Cloud Shell 中创建一个应用服务，并首次部署您的应用，如 [图 2-23](#Figure-2-24) 所示。
- en: '[PRE30]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![Flask ML Service](Images/pmlo_0223.png)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Flask ML 服务](Images/pmlo_0223.png)'
- en: Figure 2-23\. Flask ML service
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-23\. Flask ML 服务
- en: 'Verify the deployed application works by browsing to the deployed url: `https://<your-appservice>.azurewebsites.net/`.'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览部署的网址验证部署的应用程序是否正常工作：`https://<your-appservice>.azurewebsites.net/`。
- en: You will see the output as shown in [Figure 2-24](#Figure-2-25).
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到如 [图 2-24](#Figure-2-25) 所示的输出。
- en: '![Flask Deployed App](Images/pmlo_0224.png)'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Flask 部署应用](Images/pmlo_0224.png)'
- en: Figure 2-24\. Flask deployed app
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-24\. Flask 部署应用
- en: Verify machine learning predictions work, as shown in [Figure 2-25](#Figure-2-26).
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证机器学习预测的工作性能，如 [图 2-25](#Figure-2-26) 所示。
- en: Change the line in `make_predict_azure_app.sh` to match the deployed prediction
    `-X POST https://<yourappname>.azurewebsites.net:$PORT/predict`.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改 `make_predict_azure_app.sh` 中的一行以匹配部署预测 `-X POST https://<yourappname>.azurewebsites.net:$PORT/predict`。
- en: '![Successful prediction](Images/pmlo_0225.png)'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![成功的预测](Images/pmlo_0225.png)'
- en: Figure 2-25\. Successful prediction
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-25\. 成功的预测
- en: Create an Azure DevOps project and connect to Azure ([as official documentation
    describes](https://oreil.ly/YmpSY)), as shown in [Figure 2-26](#Figure-2-27).
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Azure DevOps 项目，并连接到 Azure（正如[官方文档描述](https://oreil.ly/YmpSY)），如[图 2-26](#Figure-2-27)所示。
- en: '![Azure DevOps Connection](Images/pmlo_0226.png)'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Azure DevOps 连接](Images/pmlo_0226.png)'
- en: Figure 2-26\. Azure DevOps connection
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-26\. Azure DevOps 连接
- en: Connect to Azure Resource Manager as shown in [Figure 2-27](#Figure-2-28).
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据[图 2-27](#Figure-2-28)，连接到 Azure 资源管理器。
- en: '![Figure-2-28](Images/pmlo_0227.png)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Figure-2-28](Images/pmlo_0227.png)'
- en: Figure 2-27\. Service connector
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-27\. 服务连接器
- en: Configure the connection to the previously deployed resource group as shown
    in [Figure 2-28](#Figure-2-29).
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据[图 2-29](#Figure-2-29)，配置连接到先前部署的资源组。
- en: '![New Service Connection](Images/pmlo_0228.png)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![新的服务连接](Images/pmlo_0228.png)'
- en: Figure 2-28\. New service connection
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-28\. 新的服务连接
- en: Create a new Python pipeline with GitHub integration, as shown in [Figure 2-29](#Figure-2-30).
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 GitHub 集成创建一个新的 Python 流水线，如[图 2-29](#Figure-2-30)所示。
- en: '![New Pipeline](Images/pmlo_0229.png)'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![新的流水线](Images/pmlo_0229.png)'
- en: Figure 2-29\. New Pipeline
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-29\. 新的流水线
- en: Finally, set up the GitHub integration as shown in [Figure 2-30](#Figure-2-31).
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，按照[图 2-30](#Figure-2-31)设置 GitHub 集成。
- en: '![GitHub Integration](Images/pmlo_0230.png)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![GitHub 集成](Images/pmlo_0230.png)'
- en: Figure 2-30\. GitHub integration
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-30\. GitHub 集成
- en: 'This process will create a YAML file that looks roughly like the YAML output
    shown in the following code. Refer to the [official Azure Pipeline YAML documentation](https://oreil.ly/mU5rS)
    for more information about it. This is the first part of the machine generated
    file:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此过程将创建一个类似于以下代码所示的 YAML 文件。有关更多信息，请参阅[官方的 Azure Pipeline YAML 文档](https://oreil.ly/mU5rS)。这是机器生成文件的第一部分：
- en: '[PRE31]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Verify continuous delivery of Azure Pipelines by changing *app.py*.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过更改 *app.py* 来验证 Azure Pipelines 的持续交付。
- en: You can watch this [YouTube Walkthrough of this process](https://oreil.ly/3Qczi).
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以观看这个[过程的 YouTube 演示](https://oreil.ly/3Qczi)。
- en: 'Add a lint step (this gates your code against syntax failure):'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 lint 步骤（这将阻止代码语法错误）：
- en: '[PRE32]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-258
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete walkthrough of the code, you can watch the following [YouTube
    walkthrough of this MLOps deployment process](https://oreil.ly/I3si7).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 若要详细了解代码，请观看以下[YouTube 演示此 MLOps 部署过程的视频](https://oreil.ly/I3si7)。
- en: Conclusion
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter aimed to give you the foundational knowledge necessary to deploy
    machine learning into production, i.e., MLOps. One of the challenges of MLOps
    is how multidisciplinary the field is. When dealing with something inherently
    complex, a good approach starts small and gets the most basic solution working,
    then iterates from there.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是为您提供将机器学习部署到生产环境中所需的基础知识，即 MLOps。MLOps 的挑战之一是这个领域的多学科性。当处理 inherently
    复杂的东西时，一个好的方法是从小处着手，先让最基本的解决方案运行起来，然后再逐步迭代。
- en: It is also essential to be aware of foundational skills for an organization
    wishing to do MLOps. In particular, this means a team must know the basics of
    cloud computing, including the Linux terminal and how to navigate it. Likewise,
    a firm understanding of DevOps—i.e., how to set up and use CI/CD—is a required
    component to do MLOps. This final exercise is an excellent test of your skills
    before diving into more nuanced topics later in the book and pulls together all
    of these foundational components into a minimalist MLOps-style project.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组织希望进行 MLOps，则了解基础技能至关重要。具体来说，团队必须掌握云计算的基础知识，包括 Linux 终端及其导航方式。同样重要的是对 DevOps
    的深入理解——即如何设置和使用 CI/CD——这是进行 MLOps 所必需的组成部分。这最后一个练习是在本书后续更复杂主题之前测试你的技能的绝佳机会，并将所有这些基础组件融合成一种极简的
    MLOps 风格项目。
- en: In the next chapter, we’ll dive into containers and edge devices. These are
    essential components of most MLOps platforms like AWS SageMaker or Azure ML Studio
    and build on the knowledge covered in this chapter.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨容器和边缘设备。这些是大多数 MLOps 平台（如 AWS SageMaker 或 Azure ML Studio）的重要组成部分，并且建立在本章涵盖的知识基础之上。
- en: Exercises
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Run a hello world Python GitHub project and check it out and run your tests
    on all three clouds: AWS, Azure, and GCP.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行一个简单的 hello world Python GitHub 项目，并在 AWS、Azure 和 GCP 的所有三个云上进行测试。
- en: Make a new Flask application that serves out a “hello world” type route using
    AWS Elastic Beanstalk you think other people would find helpful and put the code
    into a GitHub repo along with a screenshot of it serving out a request in the
    GitHub *README.md*. Then, create a continuous delivery process to deploy the Flask
    application using AWS CodeBuild.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的 Flask 应用程序，使用 AWS Elastic Beanstalk 提供一个“hello world”类型的路由，你认为其他人会发现有帮助，并将代码与服务请求的
    GitHub *README.md* 截图放入 GitHub 存储库中。然后，创建一个持续交付过程，使用 AWS CodeBuild 部署 Flask 应用程序。
- en: Fork [this repository](https://oreil.ly/IItEr) that contains a Flask machine
    learning application and deploy it with continuous delivery on AWS using Elastic
    Beanstalk and Code Pipeline.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fork [这个存储库](https://oreil.ly/IItEr)，其中包含一个 Flask 机器学习应用程序，并使用 Elastic Beanstalk
    和 Code Pipeline 进行持续交付部署到 AWS。
- en: Fork [this repository](https://oreil.ly/JSsEQ) that contains a Flask machine
    learning application and deploy it with continuous delivery on GCP using Google
    App Engine and Cloud Build or Cloud Run and Cloud Build.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fork [这个存储库](https://oreil.ly/JSsEQ)，其中包含一个 Flask 机器学习应用程序，并使用 Google App Engine
    和 Cloud Build 或 Cloud Run 和 Cloud Build 进行持续交付部署到 GCP。
- en: Fork [this repository](https://oreil.ly/F2uBk) that contains a Flask machine
    learning application and deploy it with continuous delivery on Azure using Azure
    App Services and Azure DevOps Pipelines.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fork [这个存储库](https://oreil.ly/F2uBk)，其中包含一个 Flask 机器学习应用程序，并使用 Azure App Services
    和 Azure DevOps Pipelines 进行持续交付部署到 Azure。
- en: Use the Traveling Salesman code example and port it to work with coordinates
    you grab from an API, say all of the best restaurants in a city you want to visit.
    You will never think about vacation the same again.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用旅行推销员代码示例，并将其移植到从 API 中获取的坐标工作，例如一个城市中所有最好的餐馆。你再也不会以相同的方式考虑度假了。
- en: Using the [TensorFlow Playground](https://oreil.ly/ojebX), experiment with changing
    the hyperparameters across different datasets as well as problem types. Can you
    identify optimal configurations of hidden layers, learning rate, and regularization
    rate for different datasets?
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [TensorFlow Playground](https://oreil.ly/ojebX)，尝试在不同数据集和问题类型之间改变超参数。你能确定不同数据集的隐藏层、学习率和正则化率的最佳配置吗？
- en: Critical Thinking Discussion Questions
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批判性思维讨论问题
- en: A company specializing in GPU databases has a key technical member advocating
    they *stop* using the cloud because it would be much more practical to buy their
    GPU hardware since they run it 24/7\. This step would also allow them to get access
    to specialized GPUs much more quickly than they are available. On the other hand,
    another critical technical member who has *all* of the AWS certifications has
    promised to get him fired if he dares to try. He claims that they have already
    invested too much into AWS. Argue for or against this proposal.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一家专门从事 GPU 数据库的公司有一位关键技术成员主张停止使用云，因为购买自己的 GPU 硬件会更实际，因为他们全天候运行。这一步还将使他们比现有方式更快地获得专门的
    GPU。另一方面，另一位拥有所有 AWS 认证的关键技术成员承诺如果他敢尝试就把他解雇。他声称他们已经在 AWS 上投入了太多。为或反对此建议进行论述。
- en: A “Red Hat Certified Engineer” has built one of the most successful data centers
    in the Southeast for a company with only 100 employees. Even though the company
    is an e-commerce company and not a cloud company, he claims this gives the company
    a huge advantage.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一位“红帽认证工程师”为一家只有100名员工的公司在东南部建立了一个最成功的数据中心。尽管该公司是一家电子商务公司而不是云公司，但他声称这给公司带来了巨大优势。
- en: On the other hand, a “Google Certified Architect” and “Duke Data Science Masters”
    graduate claims the company is in a risky position by using a data center they
    own. They point out that the company keeps losing data center engineers for Google
    and has no disaster recovery plan or fault tolerance. Argue for or against this
    proposal.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一方面，一位“Google 认证架构师”和“杜克数据科学硕士”毕业生声称公司使用自己拥有的数据中心处于风险位置。他们指出，公司不断失去数据中心工程师给
    Google，而且没有灾难恢复计划或容错能力。为或反对此建议进行论述。
- en: What are the key technical differences between AWS Lambda and AWS Elastic Beanstalk
    including the pros and cons of each solution?
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda 和 AWS Elastic Beanstalk 之间的关键技术差异，包括每种解决方案的优缺点是什么？
- en: Why would a managed file service like EFS on AWS or Google Filestore be helpful
    in a real-world MLOps workflow in corporate America?
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么像 AWS 上的 EFS 或 Google Filestore 这样的托管文件服务在企业美国的实际 MLOps 工作流程中会有帮助？
- en: 'Kaizen starts with a simple question: can we do better? If so, what should
    we do to get better this week or today? Finally, how can we apply Kaizen to our
    machine learning projects?'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kaizen始于一个简单的问题：我们能做得更好吗？如果可以，那么这周或今天我们应该做些什么来变得更好？最后，我们如何将Kaizen应用到我们的机器学习项目中呢？
