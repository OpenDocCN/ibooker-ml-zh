- en: Chapter 6\. Artifact and Metadata Store
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。物件和元数据存储
- en: Machine learning typically involves dealing with a large amount of raw and intermediate
    (transformed) data where the ultimate goal is creating and deploying the model.
    In order to understand our model it is necessary to be able to explore datasets
    used for its creation and transformations (data lineage). The collection of these
    datasets and the transformation applied to them is called the *metadata of our
    model*.^([1](ch06.xhtml#idm45831174949784))
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习通常涉及处理大量原始和中间（转换后）数据，其最终目标是创建和部署模型。为了理解我们的模型，必须能够探索用于其创建和转换的数据集（数据谱系）。收集这些数据集及其应用的转换称为我们模型的*元数据*。^([1](ch06.xhtml#idm45831174949784))
- en: 'Model metadata is critical for *reproducibility* in machine learning;^([2](ch06.xhtml#idm45831174790872))
    reproducibility is critical for reliable production deployments. Capturing the
    metadata allows us to understand variations when rerunning jobs or experiments.
    Understanding variations is necessary to iteratively develop and improve our models.
    It also provides a solid foundation for model comparisons. As Pete Warden defined
    it in this [post](https://oreil.ly/dQZjL):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，模型元数据对于*可重现性*至关重要；^([2](ch06.xhtml#idm45831174790872)) 可重现性对于可靠的生产部署至关重要。捕捉元数据使我们能够在重新运行作业或实验时理解变化。理解变化对于迭代开发和改进我们的模型是必要的。它还为模型比较提供了坚实的基础。正如Pete
    Warden在这篇[文章](https://oreil.ly/dQZjL)中定义的那样：
- en: To reproduce results, code, training data, and the overall platform need to
    be recorded accurately.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要复现结果，需要准确记录代码、训练数据和整个平台。
- en: The same information is also required for other common ML operations—model comparison,
    reproducible model creation, etc.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他常见的ML操作，如模型比较、可重现模型创建等，也需要相同的信息。
- en: There are many different options for tracking the metadata of models. Kubeflow
    has a built-in tool for this called [Kubeflow ML Metadata](https://oreil.ly/0rVN1).^([3](ch06.xhtml#idm45831174782152))
    The goal of this tool is to help Kubeflow users understand and manage their ML
    workflows by tracking and managing the metadata that the workflows produce. Another
    tool for tracking metadata that we can integrate into our Kubeflow pipelines is
    MLflow Tracking. It provides API and UI for logging parameters, code versions,
    metrics, and output files when running your machine learning code and for later
    visualizing the results.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的选项可以用来跟踪模型的元数据。Kubeflow内置了一个称为[Kubeflow ML Metadata](https://oreil.ly/0rVN1)的工具用于此目的。该工具的目标是帮助Kubeflow用户通过跟踪和管理工作流程产生的元数据来理解和管理其ML工作流。我们可以集成到我们的Kubeflow管道中的另一个跟踪元数据的工具是MLflow
    Tracking。它提供API和UI，用于在运行机器学习代码时记录参数、代码版本、指标和输出文件，并在稍后可视化结果。
- en: 'In this chapter we will discuss the capabilities of Kubeflow’s ML Metadata
    project and show how it can be used. We will also consider some shortcomings of
    this implementation and explore usage of additional third-party software: [MLflow](https://mlflow.org).^([4](ch06.xhtml#idm45831174774904))'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Kubeflow的ML Metadata项目的能力，并展示其如何使用。我们还将考虑此实现的一些缺点，并探索使用其他第三方软件的可能性：[MLflow](https://mlflow.org)^([4](ch06.xhtml#idm45831174774904))。
- en: Kubeflow ML Metadata
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubeflow ML Metadata
- en: '[Kubeflow ML Metadata](https://oreil.ly/7WOp1) is a library for recording and
    retrieving metadata associated with model creation. In the current implementation,
    Kubeflow Metadata provides only Python APIs. To use other languages, you need
    to implement the language-specific Python plug-in to be able to use the library.
    To understand how it works, we will start with a simple artificial example showing
    the basic capabilities of Kubeflow Metadata using a very simple notebook (based
    on this [demo](https://oreil.ly/Sm3ML)).^([5](ch06.xhtml#idm45831174767144))'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kubeflow ML Metadata](https://oreil.ly/7WOp1) 是一个用于记录和检索与模型创建相关的元数据的库。在当前实现中，Kubeflow
    Metadata仅提供Python API。要使用其他语言，您需要实现特定于语言的Python插件才能使用该库。为了理解其工作原理，我们将从一个简单的人工示例开始，展示Kubeflow
    Metadata的基本功能，使用一个非常简单的笔记本（基于这个[demo](https://oreil.ly/Sm3ML)）^([5](ch06.xhtml#idm45831174767144))。'
- en: Implementation of Kubeflow Metadata starts with required imports, as shown in
    [Example 6-1](#required_imports).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeflow Metadata的实现从所需的导入开始，如[示例 6-1](#required_imports)所示。
- en: Example 6-1\. Required imports
  id: totrans-10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-1。所需导入
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Kubeflow Metadata, all the information is organized in terms of a workspace,
    run, and execution. You need to define a workspace so Kubeflow can track and organize
    the records. The code in [Example 6-2](#define_workspace) shows how this can be
    done.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubeflow Metadata 中，所有信息都按照工作空间、运行和执行进行组织。您需要定义一个工作空间，以便 Kubeflow 可以跟踪和组织记录。[示例 6-2](#define_workspace)中的代码展示了如何实现这一点。
- en: Example 6-2\. Define a workspace
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-2\. 定义工作空间
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Workspace, run, and execution can be defined multiple times in the same or different
    applications. If they do not exist, they will be created; if they already exist,
    they will be used.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在同一或不同的应用程序中多次定义工作空间、运行和执行。如果它们不存在，将被创建；如果它们已存在，则将被使用。
- en: Kubeflow does not automatically track the datasets used by the application.
    They have to be explicitly registered in code. Following a classic MNIST example
    data sets registration in Metadata should be implemented as shown in [Example 6-3](#metadata_example).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeflow 不会自动跟踪应用程序使用的数据集。它们必须在代码中显式注册。按照经典的 MNIST 示例，元数据中数据集的注册应实现如[示例 6-3](#metadata_example)所示。
- en: Example 6-3\. Metadata example
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-3\. 元数据示例
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In addition to data, Kubeflow Metadata allows you to store information about
    your model and its metrics. The code implementing it is presented in [Example 6-4](#metadata_example2).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据外，Kubeflow Metadata 还允许您存储有关模型及其指标的信息。其实现代码显示在[示例 6-4](#metadata_example2)中。
- en: Example 6-4\. Another metadata example
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-4\. 另一个元数据示例
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These code snippets will implement all of the main steps for storing model
    creation metadata:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码片段将实现用于存储模型创建元数据的所有主要步骤：
- en: Define workspace, run, and execution.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义工作空间、运行和执行。
- en: Store information about data assets used for model creation.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储有关用于模型创建的数据资产的信息。
- en: Store information about the created model, including its version, type, training
    framework, and hyperparameters used for its creation.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储有关创建的模型的信息，包括其版本、类型、训练框架及用于创建的超参数。
- en: Store information about model evaluation metrics.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储有关模型评估指标的信息。
- en: In real-world implementations these snippets should be used in the actual code
    to capture metadata used for data preparation, machine learning, etc. See [Chapter 7](ch07.xhtml#tf_ch)
    for examples of where and how this information is captured.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际实现中，这些代码片段应用于实际代码中，用于捕获用于数据准备、机器学习等的元数据。参见[第 7 章](ch07.xhtml#tf_ch)以了解在哪里以及如何捕获此类信息的示例。
- en: Collecting metadata is useful only if there are ways to view it. Kubeflow Metadata
    provides two ways of viewing it—programmatically, and using Metadata UI.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 收集元数据仅在有方法查看它时才有用。Kubeflow Metadata 提供两种查看方式——通过编程方式和使用元数据 UI。
- en: Programmatic Query
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程查询
- en: The following functionality is available for programmatic query.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过编程查询以下功能。
- en: First, we list all the models in the workspace, as shown in [Example 6-5](#list_models).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们列出工作空间中的所有模型，如[示例 6-5](#list_models)所示。
- en: Example 6-5\. List all models
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-5\. 列出所有模型
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In our code we created only a single model, which is returned as a result of
    this query (see [Table 6-1](#query_result)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们只创建了一个单一模型，这是此查询结果的返回（参见[表 6-1](#query_result)）。
- en: Table 6-1\. List of models
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-1\. 模型列表
- en: '|   | id | workspace | run | create_time | description | model_type |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   | id | workspace | run | create_time | description | model_type |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 2 | ws1 | run-2020-01-10T22:13:20.959882 | 2020-01-10T22:13:26.324443Z
    | model to recognize handwritten digits | neural network |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2 | ws1 | run-2020-01-10T22:13:20.959882 | 2020-01-10T22:13:26.324443Z
    | 用于识别手写数字的模型 | 神经网络 |'
- en: '| name | owner | version | uri | training_framework |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| name | owner | version | uri | training_framework |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| MNIST | someone@kubeflow.org | v0.0.1 | gcs://my-bucket/mnist | {*name*:
    *tensorflow*, *version*: *v1.0*} |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| MNIST | someone@kubeflow.org | v0.0.1 | gcs://my-bucket/mnist | {*name*:
    *tensorflow*, *version*: *v1.0*} |'
- en: Next, we get basic lineage (see [Example 6-6](#basic_lineage)). In our case
    we created a single model, so the returned lineage will contain only the ID of
    this model.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们获取基本谱系（参见[示例 6-6](#basic_lineage)）。在我们的情况下，我们创建了一个单一模型，因此返回的谱系将仅包含此模型的
    ID。
- en: Example 6-6\. Basic lineage
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-6\. 基本谱系
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_artifact_and_metadata_store_CO1-1)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_artifact_and_metadata_store_CO1-1)'
- en: Returns `model id is 2`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`model id is 2`。
- en: Then we find the execution that produces this model. In our toy application
    we created a single execution. An ID of this execution is returned as a result
    of this query, as shown in [Example 6-7](#find_execution).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们找到产生该模型的执行。在我们的示例应用程序中，我们创建了一个单独的执行。这个执行的 ID 作为这个查询的结果返回，如 [示例 6-7](#find_execution)
    所示。
- en: Example 6-7\. Find the execution
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 6-7\. 找到执行
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_artifact_and_metadata_store_CO2-1)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_artifact_and_metadata_store_CO2-1)'
- en: Returns `1`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `1`.
- en: Finally, we find all events related to that execution, as illustrated in [Example 6-8](#getting_events).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 [示例 6-8](#getting_events) 中说明，我们找到与该执行相关的所有事件。
- en: Example 6-8\. Getting all related events
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 6-8\. 获取所有相关事件
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In our case we used a single input that was used to create a model and metrics.
    So the result of this query looks as shown in [Table 6-2](#query_table).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们使用了单个输入来创建模型和指标。因此，这个查询的结果如 [表格 6-2](#query_table) 所示。
- en: Table 6-2\. Query result as a table
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Table 6-2\. 以表格形式显示的查询结果
- en: '|  | artifact_id | execution_id | path | type | milliseconds_since_epoch |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '|  | artifact_id | execution_id | path | type | milliseconds_since_epoch |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 1 | 1 | None | INPUT | 1578694406318 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 1 | None | INPUT | 1578694406318 |'
- en: '| 1 | 2 | 1 | None | OUTPUT | 1578694406338 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2 | 1 | None | OUTPUT | 1578694406338 |'
- en: '| 2 | 3 | 1 | None | OUTPUT | 1578694406358 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 3 | 1 | None | OUTPUT | 1578694406358 |'
- en: Kubeflow Metadata UI
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeflow Metadata UI
- en: In addition to providing APIs for writing code to analyze metadata, the Kubeflow
    Metadata tool provides a UI, which allows you to view metadata without writing
    code. Access to the Metadata UI is done through the main Kubeflow UI, as seen
    in [Figure 6-1](#metadata_ui).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供用于编写分析元数据的 API 外，Kubeflow Metadata 工具还提供一个 UI，允许您在不编写代码的情况下查看元数据。通过主 Kubeflow
    UI 访问元数据 UI，如 [图 6-1](#metadata_ui) 所示。
- en: '![Metadata UI Screenshot](Images/kfml_0603.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Metadata UI 截图](Images/kfml_0603.png)'
- en: Figure 6-1\. Accessing Metadata UI
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-1\. 访问 Metadata UI
- en: Once you click the Artifact Store, you should see the list of available artifacts
    (logged metadata events), as in [Figure 6-2](#artifact_store_ui).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击艺术品存储，您应该看到可用艺术品（已记录的元数据事件）的列表，如 [图 6-2](#artifact_store_ui) 所示。
- en: '![Artifact Store UI Screenshot](Images/kfml_0604.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![艺术品存储 UI 截图](Images/kfml_0604.png)'
- en: Figure 6-2\. List of artifacts in the Artifact Store UI
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-2\. 艺术品存储 UI 中的艺术品列表
- en: From this view we can click the individual artifact and see its details, as
    shown in [Figure 6-3](#artifact_view).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个视图中，我们可以点击单个艺术品并查看其详细信息，如 [图 6-3](#artifact_view) 所示。
- en: '![Artifact View Screenshot](Images/kfml_0605.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![艺术品视图截图](Images/kfml_0605.png)'
- en: Figure 6-3\. Artifact view
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 6-3\. 艺术品视图
- en: Kubeflow Metadata provides some basic capabilities for storing and viewing of
    machine learning metadata; however, its capabilities are extremely limited, especially
    in terms of viewing and manipulating stored metadata. A more powerful implementation
    of machine learning metadata management is done by MLflow. Though MLflow isn’t
    part of Kubeflow distribution, it’s very easy to deploy it alongside Kubeflow
    and use it from Kubeflow-based applications, as described in the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeflow Metadata 提供了一些基本功能来存储和查看机器学习元数据；然而，其功能非常有限，特别是在查看和操作存储的元数据方面。MLflow
    提供了一个更强大的机器学习元数据管理实现。虽然 MLflow 不是 Kubeflow 分发的一部分，但很容易将其部署在 Kubeflow 旁边，并从基于 Kubeflow
    的应用程序中使用，正如下一节所述。
- en: Using MLflow’s Metadata Tools with Kubeflow
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MLflow 的元数据工具与 Kubeflow
- en: 'MLflow is an open source platform for managing the end-to-end machine learning
    life cycle. It includes three primary functions:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 是一个开源平台，用于管理端到端的机器学习生命周期。它包括三个主要功能：
- en: '[MLflow Tracking](https://oreil.ly/appTI)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[MLflow 追踪](https://oreil.ly/appTI)'
- en: Tracking experiments to record and compare parameters and results
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪实验以记录和比较参数和结果
- en: '[MLflow Projects](https://oreil.ly/YmBmS)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[MLflow 项目](https://oreil.ly/YmBmS)'
- en: Packaging ML code in a reusable, reproducible form in order to share with other
    data scientists or transfer to production
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将 ML 代码打包成可重用、可再现的形式，以便与其他数据科学家共享或转移到生产环境
- en: '[MLflow Models](https://oreil.ly/WN0nm)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[MLflow 模型](https://oreil.ly/WN0nm)'
- en: Managing and deploying models from a variety of ML libraries to a variety of
    model serving and inference platforms
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 管理和部署来自各种 ML 库的模型到各种模型服务和推理平台
- en: For the purposes of our Kubeflow metadata discussion we will only discuss deployment
    and usage of MLflow tracking components—an API and UI for logging parameters,
    code versions, metrics, and output files when running your machine learning code
    and for visualizing the results. MLflow Tracking lets you log and query experiments
    using [Python](https://oreil.ly/BfpRU), [REST](https://oreil.ly/pGC0j), [R](https://oreil.ly/5xKAK),
    and [Java](https://oreil.ly/AUUXL) APIs, which significantly extends the reach
    of APIs, allowing you to store and access metadata from different ML components.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的 Kubeflow 元数据讨论目的，我们只讨论 MLflow 跟踪组件的部署和使用 —— 用于记录参数、代码版本、指标和输出文件的 API 和
    UI，以及在运行机器学习代码并可视化结果时使用。MLflow 跟踪允许您使用 [Python](https://oreil.ly/BfpRU)、[REST](https://oreil.ly/pGC0j)、[R](https://oreil.ly/5xKAK)
    和 [Java](https://oreil.ly/AUUXL) API 记录和查询实验，这显著扩展了 API 的覆盖范围，允许您存储和访问来自不同 ML
    组件的元数据。
- en: 'MLflow Tracking is organized around the concept of runs, which are executions
    of some piece of data science code. Each run records the following information:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 跟踪围绕运行的概念组织，这些运行是某些数据科学代码的执行。每次运行记录以下信息：
- en: Code version
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 代码版本
- en: Git commit hash used for the run, if it was run from an MLflow Project
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 用于运行的 Git 提交哈希，如果是从 MLflow 项目运行的话
- en: Start and end time
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和结束时间
- en: Start and end time of the run
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 运行的开始和结束时间
- en: Source
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 源
- en: Name of the file to launch the run, or the project name and entry point for
    the run if run from an MLflow Project
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 启动运行的文件名称，或者如果是从 MLflow 项目运行的话，项目名称和入口点
- en: Parameters
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: Key-value input parameters of your choice. Both keys and values are strings.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的键-值输入参数。键和值都是字符串。
- en: Metrics
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 指标
- en: Key-value metrics, where the value is numeric. Each metric can be updated throughout
    the course of the run (for example, to track how your model’s loss function is
    converging), and MLflow records and lets you visualize the metric’s full history.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 键-值指标，其中值是数值。每个指标可以在运行过程中更新（例如，跟踪模型损失函数如何收敛），而 MLflow 记录并允许您可视化指标的完整历史记录。
- en: Artifacts
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 工件
- en: Output files in any format. Here you can record images (such as PNG files),
    models (for example, a pickled Scikit-learn model), and data files (for example,
    a Parquet file) as artifacts.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 任何格式的输出文件。在这里，您可以记录图像（例如 PNG 文件）、模型（例如，一个序列化的 Scikit-learn 模型）和数据文件（例如，一个 Parquet
    文件）作为工件。
- en: Most of the [MLflow examples](https://oreil.ly/oik7f) use local MLflow installations,
    which is not appropriate for our purposes. For our implementation we need a cluster-based
    installation, allowing us to write metadata from different Docker instances and
    view them centrally. Following the approach outlined in the project [MLflow Tracking
    Server based on Docker and AWS S3](https://oreil.ly/5DdRC), the overall architecture
    of such MLflow Tracking component deployment is presented in [Figure 6-4](#mlflow_arch).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 [MLflow 示例](https://oreil.ly/oik7f) 使用本地 MLflow 安装，这对我们的目的不合适。对于我们的实施，我们需要基于集群的安装，允许我们从不同的
    Docker 实例写入元数据并集中查看它们。遵循项目 [MLflow Tracking Server based on Docker and AWS S3](https://oreil.ly/5DdRC)
    中概述的方法，展示了这种 MLflow 跟踪组件部署的整体架构，如 [图 6-4](#mlflow_arch) 所示。
- en: '![Overall architecture of MLflow components deployment](Images/kfml_0606.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow 组件部署的整体架构](Images/kfml_0606.png)'
- en: Figure 6-4\. Overall architecture of MLflow components deployment
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-4\. MLflow 组件部署的整体架构
- en: 'The main components of this architecture are:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此架构的主要组件包括：
- en: MinIO server, already part of the Kubeflow installation
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已经作为 Kubeflow 安装的一部分的 MinIO 服务器
- en: MLflow tracking server—the MLflow UI component—an additional component that
    needs to be added to Kubeflow installation to support MLflow usage
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MLflow 跟踪服务器 — MLflow UI 组件 — 需要添加到 Kubeflow 安装中以支持 MLflow 使用的额外组件
- en: User code such as notebook, Python, R, or Java application
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户代码，如笔记本、Python、R 或 Java 应用程序
- en: Creating and Deploying an MLflow Tracking Server
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和部署 MLflow 跟踪服务器
- en: MLflow Tracking Server allows you to record MLflow runs to local files, to a
    SQLAlchemy-compatible database, or remotely to a tracking server. In our implementation
    we are using a remote server.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 跟踪服务器允许您将 MLflow 运行记录到本地文件、到与 SQLAlchemy 兼容的数据库，或者远程到跟踪服务器。在我们的实施中，我们使用的是远程服务器。
- en: 'An MLflow Tracking Server has two components for storage: a backend store and
    an artifact store. The backend store is where MLflow Tracking Server stores experiment
    and run metadata as well as parameters, metrics, and tags for runs. MLflow supports
    two types of backend stores: file store and database-backed store. For simplicity
    we will be using a file store. In our deployment, this file store is part of the
    Docker image, which means that this data is lost in the case of server restart.
    If you need longer-term storage, you can either use an external filesystem, like
    NFS server, or a database. The artifact store is a location suitable for large
    data (such as an S3 bucket or shared NFS filesystem) and is where clients log
    their artifact output (for example, models). To make our deployment cloud independent,
    we decided to use MinIO (part of Kubeflow) as an artifact store. Based on these
    decisions, a Docker file for building the MLflow Tracking Server looks like [Example 6-9](#mlflow_docker)
    (similar to the implementation in [this GitHub repo](https://oreil.ly/VOe9f)).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 跟踪服务器有两个存储组件：后端存储和 artifact 存储。后端存储用于存储实验和运行元数据以及运行的参数、指标和标签。MLflow 支持两种类型的后端存储：文件存储和数据库支持的存储。为了简单起见，我们将使用文件存储。在我们的部署中，这个文件存储是
    Docker 镜像的一部分，这意味着在服务器重启的情况下，这些数据会丢失。如果您需要长期存储，可以使用外部文件系统，如 NFS 服务器，或者数据库。Artifact
    存储是一个适合大数据的位置（例如 S3 桶或共享的 NFS 文件系统），客户端在这里记录他们的 artifact 输出（例如模型）。为了使我们的部署与云无关，我们决定使用
    MinIO（Kubeflow 的一部分）作为 artifact 存储。基于这些决策，用于构建 MLflow 跟踪服务器的 Docker 文件看起来像是 [示例
    6-9](#mlflow_docker)（与 [此 GitHub 仓库](https://oreil.ly/VOe9f) 中的实现类似）。
- en: Example 6-9\. MLflow Tracking Server
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-9\. MLflow 跟踪服务器
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here we first load MLflow code (using pip), set environment variables, and then
    copy and run the startup script. The start-up script used here looks like [Example 6-10](#mlflow_startup).^([6](ch06.xhtml#idm45831173984648))
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先加载 MLflow 代码（使用 pip），设置环境变量，然后复制并运行启动脚本。这里使用的启动脚本看起来像是 [示例 6-10](#mlflow_startup)。^([6](ch06.xhtml#idm45831173984648))
- en: Example 6-10\. MLflow startup script
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-10\. MLflow 启动脚本
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This script sets an environment and then verifies that all required environment
    variables are set. Once validation succeeds, an MLflow server is started. Once
    the Docker is created, the Helm command in [Example 6-11](#install_required1)
    (the Helm chart is located on [this book’s GitHub repo](https://oreil.ly/Kubeflow_for_ML_ch06_mlflowchart))
    can be used to install the server.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本设置一个环境，然后验证所有必需的环境变量是否已设置。一旦验证成功，将启动一个 MLflow 服务器。一旦 Docker 创建完成，可以使用 [示例
    6-11](#install_required1) 中的 Helm 命令（Helm 图表位于 [本书的 GitHub 仓库](https://oreil.ly/Kubeflow_for_ML_ch06_mlflowchart)）来安装服务器。
- en: Example 6-11\. Installing MLflow server with Helm
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-11\. 使用 Helm 安装 MLflow 服务器
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This Helm chart installs three main components implementing the MLflow Tracking
    Server:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Helm 图表安装了三个主要组件，实现了 MLflow 跟踪服务器：
- en: '[Deployment](https://oreil.ly/GYQwv)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[部署](https://oreil.ly/GYQwv)'
- en: Deploying MLflow server itself (single replica). The important parameters here
    are the environment, including MinIO endpoint, credentials, and bucket used for
    artifact storage.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 MLflow 服务器本身（单个副本）。这里的重要参数包括环境，包括 MinIO 端点、凭据和用于存储 artifact 的桶。
- en: '[Service](https://oreil.ly/RZq4U)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[服务](https://oreil.ly/RZq4U)'
- en: Creating a Kubernetes service exposing MLflow deployment
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个暴露 MLflow 部署的 Kubernetes 服务
- en: '[Virtual service](https://oreil.ly/-myuN)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[虚拟服务](https://oreil.ly/-myuN)'
- en: Exposing MLflow service to users through the Istio ingress gateway used by Kubeflow
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Kubeflow 使用的 Istio 入口网关向用户公开 MLflow 服务
- en: Once the server is deployed, we can get access to the UI, but at this point
    it will say that there are no available experiments. Let’s now look at how this
    server can be used to capture metadata.^([7](ch06.xhtml#idm45831173893464))
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器部署完成，我们可以访问 UI，但此时它会显示没有可用的实验。现在让我们看看如何使用这个服务器来捕获元数据。^([7](ch06.xhtml#idm45831173893464))
- en: Logging Data on Runs
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录运行数据
- en: As an example of logging data, let’s look at some simple code.^([8](ch06.xhtml#idm45831173887816))
    We will start by installing required packages, shown in Examples [6-11](#install_required1)
    and [6-12](#install_required2).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作为记录数据的示例，让我们看一下一些简单的代码。^([8](ch06.xhtml#idm45831173887816)) 我们将从安装所需的包开始，如示例
    [6-11](#install_required1) 和 [6-12](#install_required2) 所示。
- en: Example 6-12\. Install required
  id: totrans-124
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-12\. 安装所需内容
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_artifact_and_metadata_store_CO3-1)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_artifact_and_metadata_store_CO3-1)'
- en: Here `mlflow` and `boto3` are the packages required for metadata logging, while
    the rest are used for machine learning itself.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 `mlflow` 和 `boto3` 是用于元数据记录的包，而其余的则用于机器学习本身。
- en: Once these packages are installed, we can define required imports, as shown
    in [Example 6-13](#import_required).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了这些包，我们可以像 [示例 6-13](#import_required) 中所示定义所需的导入。
- en: Example 6-13\. Import required libraries
  id: totrans-129
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-13\. 导入所需库
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here again, `os` and the last three imports are required for MLflow logging,
    while the rest are used for machine learning. Now we need to define the environment
    variables (see [Example 6-14](#set_env)) required for proper access to the MinIO
    server for storing artifacts.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这里再次，`os` 和最后三个导入项是用于 MLflow 日志记录的必需，而其余的则用于机器学习。现在我们需要定义环境变量（参见 [示例 6-14](#set_env)），以便正确访问用于存储工件的
    MinIO 服务器。
- en: Example 6-14\. Set environment variables
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-14\. 设置环境变量
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note here that in addition to the tracking server itself, `MLFLOW_S3_ENDPOINT_URL`
    is defined not only in the tracking server definition, but also in the code that
    actually captures the metadata. This is because, as we mentioned previously, user
    code writes to the artifact store directly, bypassing the server.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除了跟踪服务器本身之外，`MLFLOW_S3_ENDPOINT_URL` 不仅在跟踪服务器定义中定义，而且在实际捕获元数据的代码中也有定义。这是因为，正如我们之前提到的，用户代码直接写入到工件存储中，绕过服务器。
- en: Here we skip the majority of the code (the full code can be found on [this book’s
    GitHub repo](https://oreil.ly/Kubeflow_for_ML_ch06_MLflow)) and concentrate only
    on the parts related to the MLflow logging. The next step (see [Example 6-15](#create_experiment))
    is connecting to the tracking server and creating an experiment.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们跳过了大部分代码（完整代码可以在 [本书的 GitHub 仓库](https://oreil.ly/Kubeflow_for_ML_ch06_MLflow)
    中找到），仅集中在与 MLflow 日志记录相关的部分。下一步（参见 [示例 6-15](#create_experiment)）是连接到跟踪服务器并创建实验。
- en: Example 6-15\. Create experiment
  id: totrans-136
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-15\. 创建实验
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once connected to the server and creating (choosing) an experiment, we can start
    logging data. As an example, let’s look at the code for storing [KNN regressor](https://oreil.ly/g5yH3)
    information, in [Example 6-16](#knn_model).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接到服务器并创建（选择）实验，我们就可以开始记录数据。例如，让我们看一下存储 [KNN 回归器](https://oreil.ly/g5yH3)
    信息的代码，在 [示例 6-16](#knn_model) 中。
- en: Example 6-16\. Sample KNN model
  id: totrans-139
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-16\. 样本 KNN 模型
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this code snippet, we can see how different kinds of data about model creation
    and prediction test statistics are logged. The information here is very similar
    to the information captured by Kubeflow Metadata and includes inputs, models,
    and metrics.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码片段中，我们可以看到有关模型创建和预测测试统计数据的不同类型数据是如何记录的。这里的信息与 Kubeflow Metadata 捕获的信息非常相似，包括输入、模型和指标。
- en: Finally, similar to Kubeflow Metadata, MLflow allows you to access this metadata
    programmatically. The main APIs provided by MLflow include what you see in [Example 6-17](#getting_runs).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，类似于 Kubeflow Metadata，MLflow 允许您以编程方式访问此元数据。MLflow 提供的主要 API 包括您在 [示例 6-17](#getting_runs)
    中看到的内容。
- en: Example 6-17\. Getting the runs for a given experiment
  id: totrans-143
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-17\. 获取给定实验的运行
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](Images/1.png)](#co_artifact_and_metadata_store_CO4-1)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_artifact_and_metadata_store_CO4-1)'
- en: Getting the the runs for a given experiment
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 获取给定实验的运行
- en: '[![2](Images/2.png)](#co_artifact_and_metadata_store_CO4-2)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_artifact_and_metadata_store_CO4-2)'
- en: Sorting runs based on the specific parameters
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 根据特定参数对运行进行排序
- en: MLflow will sort runs by root mean square error (rmse) and show the best ones.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 将根据均方根误差（rmse）对运行进行排序，并显示最佳运行。
- en: For additional capabilities of the programmatic runs querying, consult the [MLflow
    documentation](https://oreil.ly/Jistd).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解程序化运行查询的额外功能，请参阅 [MLflow 文档](https://oreil.ly/Jistd)。
- en: With all the capabilities of running programmatic queries, the most powerful
    way to evaluate runs’ metadata is through the MLflow UI, which we will cover next.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行程序化查询的所有功能来评估运行元数据的最强大方法是通过 MLflow UI，我们将在下一步中介绍它。
- en: Using the MLflow UI
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 MLflow UI
- en: The Tracking UI in MLflow lets you visualize, search, and compare runs, as well
    as download run artifacts or metadata for analysis in other tools. Because MLflow
    is not part of Kubeflow, its access is not provided by Kubeflow UI. Based on the
    provided virtual service, the MLflow UI is available at *<Kubeflow Istio ingress
    gateway URL>/mlflow*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 中的跟踪 UI 允许您可视化、搜索和比较运行，并下载运行工件或元数据以在其他工具中进行分析。由于 MLflow 不是 Kubeflow 的一部分，因此
    Kubeflow UI 不提供其访问权限。根据提供的虚拟服务，MLflow UI 可通过 *<Kubeflow Istio ingress gateway
    URL>/mlflow* 访问。
- en: '[Figure 6-5](#mlflow_mainpage) shows the results produced by the run described.
    It is possible to filter results using the search box. For example, if we want
    to see only results for the KNN model, then the search criteria `tags.model="knn"`
    can be used. You can also use more complex filters, such as `tags.model="knn"`
    and `metrics.duration_prediction < 0.002`, which will return results for the KNN
    model for which prediction duration is less than 0.002 sec.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-5](#mlflow_mainpage) 显示了运行描述的结果。可以使用搜索框来过滤结果。例如，如果我们只想看到 KNN 模型的结果，则可以使用搜索条件
    `tags.model="knn"`。还可以使用更复杂的过滤器，如 `tags.model="knn"` 和 `metrics.duration_prediction
    < 0.002`，这将返回预测持续时间小于 0.002 秒的 KNN 模型的结果。'
- en: '![MLFlow Mainpage Screenshot](Images/kfml_0607.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![MLFlow 主页截图](Images/kfml_0607.png)'
- en: Figure 6-5\. MLflow main page
  id: totrans-156
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-5\. MLflow 主页
- en: By clicking the individual run we can see its details, as shown in [Figure 6-6](#indi_run).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 点击单独运行，我们可以查看其详细信息，如 [图 6-6](#indi_run) 所示。
- en: '![Screenshot of Individual Run](Images/kfml_0608.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![单独运行的截图](Images/kfml_0608.png)'
- en: Figure 6-6\. View of the individual run
  id: totrans-159
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-6\. 单独运行的视图
- en: Alternatively, we can compare several runs by picking them and clicking compare,
    as seen in [Figure 6-7](#multirun).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过选择多个运行并点击比较按钮来比较它们，如 [图 6-7](#multirun) 所示。
- en: '![Run Comparison Screenshot](Images/kfml_0609.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![运行比较截图](Images/kfml_0609.png)'
- en: Figure 6-7\. Run comparison view
  id: totrans-162
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-7\. 运行比较视图
- en: We can also view metrics comparison for multiple runs, as in [Figure 6-8](#metrics).^([9](ch06.xhtml#idm45831173255160))
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看多个运行的指标比较，如 [图 6-8](#metrics) 所示。^([9](ch06.xhtml#idm45831173255160))
- en: '![Run Metrics Comparison View Screenshot](Images/kfml_0610.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![运行指标比较视图截图](Images/kfml_0610.png)'
- en: Figure 6-8\. Run metrics comparison view
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-8\. 运行指标比较视图
- en: Conclusion
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter we have shown how the Kubeflow Metadata component of the Kubeflow
    deployment supports storing and viewing ML metadata. We have also discussed shortcomings
    of this implementation, including its Python-only support and weak UI. Last, we
    covered how to supplement Kubeflow with components with similar functionality—MLflow
    and additional capabilities that can be achieved in this case.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节展示了 Kubeflow 部署中 Kubeflow Metadata 组件支持存储和查看 ML 元数据的方式。我们还讨论了这种实现的缺点，包括仅支持
    Python 和界面弱等问题。最后，我们介绍了如何通过补充 Kubeflow 与类似功能的组件，如 MLflow，来增强其额外功能。
- en: In [Chapter 7](ch07.xhtml#tf_ch), we explore using Kubeflow with TensorFlow
    to train and serve models.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 7 章](ch07.xhtml#tf_ch) 中，我们探讨了使用 Kubeflow 与 TensorFlow 进行模型训练和服务化的内容。
- en: ^([1](ch06.xhtml#idm45831174949784-marker)) For a good background on metadata
    for machine learning, and an overview of what to capture refer to this [blog post](https://oreil.ly/3zA6K)
    written by Luigi Patruno.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch06.xhtml#idm45831174949784-marker)) 欲了解有关机器学习元数据的背景信息和要捕获内容的概述，请参阅 Luigi
    Patruno 撰写的这篇[博客文章](https://oreil.ly/3zA6K)。
- en: ^([2](ch06.xhtml#idm45831174790872-marker)) For more on this topic, see this
    [blog post](https://oreil.ly/H1B81) by Jennifer Villa and Yoav Zimmerman.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch06.xhtml#idm45831174790872-marker)) 欲了解更多，请参阅 Jennifer Villa 和 Yoav
    Zimmerman 撰写的这篇[博客文章](https://oreil.ly/H1B81)。
- en: ^([3](ch06.xhtml#idm45831174782152-marker)) Note that Kubeflow ML Metadata is
    different from [ML Metadata](https://oreil.ly/ALXsm), which is part of [TFX](https://oreil.ly/vHYGz).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch06.xhtml#idm45831174782152-marker)) 请注意，Kubeflow ML Metadata 与 [ML Metadata](https://oreil.ly/ALXsm)（TFX
    的一部分）是不同的。
- en: ^([4](ch06.xhtml#idm45831174774904-marker)) MLflow was initially developed by
    Databricks and currently is part of the [Linux Foundation](https://oreil.ly/Fscza).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch06.xhtml#idm45831174774904-marker)) MLflow 最初由 Databricks 开发，并且目前是 [Linux
    基金会](https://oreil.ly/Fscza) 的一部分。
- en: ^([5](ch06.xhtml#idm45831174767144-marker)) The complete code for this notebook
    is located in [this book’s GitHub repo](https://oreil.ly/Kubeflow_for_ML_ch06).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch06.xhtml#idm45831174767144-marker)) 本笔记本的完整代码位于[本书的 GitHub 仓库](https://oreil.ly/Kubeflow_for_ML_ch06)。
- en: ^([6](ch06.xhtml#idm45831173984648-marker)) This is a simplified implementation.
    For complete implementation, see [this book’s GitHub repo](https://oreil.ly/Kubeflow_for_ML_ch06_MLflow).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch06.xhtml#idm45831173984648-marker)) 这是一个简化的实现。要获取完整的实现，请查阅[本书的 GitHub
    仓库](https://oreil.ly/Kubeflow_for_ML_ch06_MLflow)。
- en: ^([7](ch06.xhtml#idm45831173893464-marker)) Here we are showing usage of Python
    APIs. For additional APIs (R, Java, REST) refer to the [MLflow documentation](https://oreil.ly/QaeM1).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch06.xhtml#idm45831173893464-marker)) 在这里，我们展示了使用 Python API 的用法。要了解更多
    API（如 R、Java、REST），请参阅[MLflow 文档](https://oreil.ly/QaeM1)。
- en: ^([8](ch06.xhtml#idm45831173887816-marker)) The code here is adapted from [this
    article](https://oreil.ly/nVB_s) by Jean-Michel Daignan.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch06.xhtml#idm45831173887816-marker)) 这里的代码改编自Jean-Michel Daignan的[这篇文章](https://oreil.ly/nVB_s)。
- en: ^([9](ch06.xhtml#idm45831173255160-marker)) Also see the [MLflow documentation](https://oreil.ly/w9u7n)
    for additional UI capabilities.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch06.xhtml#idm45831173255160-marker)) 也请查看[MLflow文档](https://oreil.ly/w9u7n)，了解更多的UI功能。
