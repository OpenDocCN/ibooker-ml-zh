- en: Chapter 5\. Detecting Fraud and Money Laundering Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。检测欺诈和洗钱模式
- en: In this chapter, we take on the serious problem of fraud and money laundering.
    Fraud is typically conducted by one or more parties as a multistep process. Sometimes,
    the only way to distinguish fraud or money laundering from legitimate activity
    is to detect a characteristic or unusual pattern of activity. Modeling the activity
    and relationships with a graph enables us to detect suspicious activity by searching
    for those patterns along with checking for their frequency.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们面对严重的欺诈和洗钱问题。欺诈通常由一个或多个方参与作为一个多步骤的过程进行。有时，区分欺诈或洗钱活动与合法活动的唯一方法是检测活动的特征或异常模式。通过图模型化活动和关系，我们能够检测到这些模式，并检查它们的频率以便发现可疑活动。
- en: 'After completing this chapter, you should be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您应能够：
- en: Describe coordinated activity among multiple parties in terms of a graph pattern
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述多方协调活动在图模式方面的表现
- en: Use a multihop or iterated single-hop graph traversal to perform a deep search
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多跳或迭代单跳图遍历执行深度搜索
- en: Describe bidirectional search and its advantages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述双向搜索及其优势
- en: Understand the use of timestamps to find a time sequence
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解时间戳的使用以找到时间顺序
- en: 'Goal: Detect Financial Crimes'
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标：检测金融犯罪
- en: Financial institutions are responsible for averting criminal money flows through
    the economic infrastructure. According to The Financial Action Task Force (FATF),
    illicit funds amount to 3.6% of global GDP.^([1](ch05.html#ch01fn10)) A well-known
    criminal activity is money laundering, or disguising the origin of money earned
    through illicit means. According to the FATF, 2.7% of global GDP is laundered
    per year. Banks are legally obligated to investigate their clients’ payment behavior
    and report any suspicious activities.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 金融机构负责通过经济基础设施防止犯罪资金流动。根据《金融行动特别工作组》（FATF）的数据，非法资金占全球 GDP 的 3.6%。^([1](ch05.html#ch01fn10))
    一种众所周知的犯罪活动是洗钱，即通过非法手段赚取的资金的来源掩盖。根据FATF的数据，全球 GDP 的 2.7% 每年被洗钱。银行有法律义务调查客户的支付行为，并报告任何可疑活动。
- en: Other types of financial fraud include identity theft, where someone uses another
    person’s accounts without permission, and Ponzi schemes, which are characterized
    by money flowing from newer investors to earlier investors without actually going
    to an external venture.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的金融欺诈包括身份盗窃，即某人未经许可使用他人账户，以及庞氏骗局，其特征是资金从新投资者流向早期投资者，而并未真正进入外部企业。
- en: Banks have built a wide range of applications and procedures into their daily
    operations to identify and detect financial crimes. Broadly speaking, these techniques
    can fall into two areas.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 银行已将各种应用程序和程序整合到其日常运营中，以识别和检测金融犯罪。总体而言，这些技术可以分为两个领域。
- en: The first area of investigation, Know Your Customer (KYC), looks into the client
    profile. Similar to what we’ve seen in [Chapter 3](ch03.html#see_your_customers_and_business_better)
    with the Customer 360 use case, analysts need to conduct client due diligence.
    This client risk assessment can happen at multiple stages of the client lifecycle,
    such as during new client takeover (NCTO) or during a periodic review.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个调查领域，了解您的客户（KYC），研究客户概况。就像我们在[第三章](ch03.html#see_your_customers_and_business_better)中看到的客户
    360 应用案例一样，分析师需要进行客户尽职调查。这种客户风险评估可以在客户生命周期的多个阶段进行，比如在新客户接管（NCTO）期间或定期审查期间。
- en: The second area of investigation, transaction monitoring, mainly focuses on
    identifying criminal behavior through bank transactions. Here, analysts try to
    identify unusual payment patterns between senders and beneficiaries. Although
    these two investigation areas often overlap from a bank operational perspective
    and on a risk management level, we will mainly focus on transaction monitoring
    in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个调查领域，交易监控，主要关注通过银行交易识别犯罪行为。在这里，分析师试图识别发送方和受益方之间的异常支付模式。尽管这两个调查领域在银行运营和风险管理水平上经常重叠，但本章主要关注交易监控。
- en: Transaction monitoring involves thorough investigations into entities that show
    suspicious payment behavior. Analysts start these investigations from entities
    flagged as suspicious and move from there to explore high-risk interactions. Thus,
    analysts do not know the complete picture of how the money flows and lack visibility
    on where the flagged entity is in the entire money trail. To gain this visibility,
    they have to query step-by-step the next payment interaction to build up a complete
    picture of the payment network. Therefore, analysts need an approach that helps
    them retrieve a set of consecutive payments and the parties involved in those
    payments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 交易监控涉及对表现出可疑支付行为的实体进行彻底调查。分析员从被标记为可疑的实体开始这些调查，然后从那里探索高风险交互。因此，分析员不知道资金流动的完整图景，也没有看到被标记实体在整个资金路径中的可见性。为了获得这种可见性，他们必须逐步查询下一个支付交互，以构建支付网络的完整图景。因此，分析员需要一种帮助他们检索一组连续支付和参与其中支付方的方法。
- en: 'Solution: Modeling Financial Crimes as Network Patterns'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案：将金融犯罪建模为网络模式
- en: Traditional transaction monitoring relies on rule-based systems where client
    behavior is checked against fixed risk indicators. Such a risk indicator could
    be when, for example, clients received $15,000 cash in their account and immediately
    sent that money to several third-party accounts. This could be normal income and
    expense activity, or it could be part of a money laundering technique called `layering`.
    It indicates a suspicious activity because it revolves around a large amount of
    cash, and that money moves to several third parties, making it harder to trace
    its origin.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 传统交易监控依赖于基于规则的系统，其中客户行为与固定的风险指标进行检查。例如，这样的风险指标可能是，客户账户中收到了15000美元现金，并立即将这笔钱发送到多个第三方账户。这可能是正常的收入和支出活动，也可能是称为`分层`的洗钱技术的一部分。它表明一种可疑活动，因为它围绕着大量现金，并且那笔钱移动到多个第三方账户，使其更难追溯其来源。
- en: There are two major problems with relying on rule-based risk indicators. First,
    the analyst is still required to do an in-depth follow-up investigation on flagged
    clients, which involves querying consecutive payments between different clients.
    Second, rule-based risk indicators have been limited in their sophistication due
    to the challenge of extracting deep patterns from tabular data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖基于规则的风险指标存在两个主要问题。首先，分析师仍然需要对标记客户进行深入跟进调查，这涉及查询不同客户之间的连续支付。其次，由于从表格数据中提取深层模式的挑战，基于规则的风险指标在其复杂性方面存在限制。
- en: When modeling this problem as a network, it becomes easier to identify high-risk
    patterns because we can visualize the money flow directly from the graph data
    model. Doing so shows us how the money moves in a network and which parties are
    involved in those payment interactions. This graph approach solves the first problem
    because the graph pattern search will discover the consecutive payments for the
    analyst. It also solves the second problem because the network will expose all
    the relationships between involved parties, including those that the analysts
    do not explicitly query.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当将这个问题建模成网络时，通过图数据模型直观地展示资金流动，更容易识别高风险模式。这样做能让我们看到资金在网络中的流动方式，以及参与这些支付交互的各方。这种图形方法解决了第一个问题，因为图形模式搜索将为分析员发现连续支付。它还解决了第二个问题，因为网络将揭示涉及方之间的所有关系，包括分析员没有明确查询的那些关系。
- en: Later in this book, we will see how graph machine learning can do an even better
    job of detecting financial crime patterns.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书后面我们将看到，图机器学习可以更好地检测金融犯罪模式。
- en: Implementing Financial Crime Pattern Searches
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施金融犯罪模式搜索
- en: TigerGraph provides a starter kit for fraud and money laundering detection.
    Follow the installation steps from [Chapter 3](ch03.html#see_your_customers_and_business_better)
    to install the starter kit. After the installation, we will use the starter kit
    to design our money laundering network and explore how we can detect suspicious
    payment interactions on this network.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: TigerGraph提供了一个欺诈和洗钱检测的入门套件。请按照[第三章](ch03.html#see_your_customers_and_business_better)的安装步骤安装入门套件。安装完成后，我们将使用入门套件设计我们的洗钱网络，并探索如何在该网络上检测可疑的支付交互。
- en: The Fraud and Money Laundering Detection Starter Kit
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欺诈和洗钱检测入门套件
- en: Using TigerGraph Cloud, deploy a new cloud cluster and select “Fraud and Money
    Laundering Detection” as the use case. Once this starter kit is installed, follow
    the steps in the section [“Load data and install queries for a starter kit”](ch03.html#load_data_and_install_queries_for_a_sta)
    in [Chapter 3](ch03.html#see_your_customers_and_business_better).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TigerGraph Cloud，在云中部署一个新的集群，并选择“欺诈和洗钱检测”作为用例。一旦安装了这个入门套件，按照章节[“加载数据并安装入门套件的查询”](ch03.html#load_data_and_install_queries_for_a_sta)中的步骤进行操作。
- en: Graph Schema
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图模式
- en: The Fraud and Money Laundering Detection Starter Kit contains over 4.3M vertices
    and 7M edges, with a schema that has four vertex types and five edge types. [Figure 5-1](#graph_schema_for_fraud_and_money_launde)
    shows the graph schema of this starter kit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 欺诈和洗钱检测入门套件包含超过4.3M个顶点和7M条边，具有四种顶点类型和五种边类型的模式。[图 5-1](#graph_schema_for_fraud_and_money_launde)展示了此入门套件的图模式。
- en: '![Graph schema for Fraud and Money Laundering Detection Starter Kit](assets/gpam_0501.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![欺诈和洗钱检测入门套件的图模式](assets/gpam_0501.png)'
- en: Figure 5-1\. Graph schema for the Fraud and Money Laundering Detection Starter
    Kit (see a larger version of this figure at [https://oreil.ly/gpam0501](https://oreil.ly/gpam0501))
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-1\. 欺诈和洗钱检测入门套件的图模式（在[https://oreil.ly/gpam0501](https://oreil.ly/gpam0501)上查看更大的版本）
- en: In [Table 5-1](#vertex_types_in_fraud_and_money_launder) we describe the four
    vertex types. A `**User**` has a central role in a payment interaction, where
    it can receive and send payments. `**Transaction**` is the payment itself. `**Device_Token**`
    is a unique ID number that refers to the device used for the payment, and `**Payment_Instrument**`
    refers to the type of instrument used for the payment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在[表 5-1](#vertex_types_in_fraud_and_money_launder)中描述了四种顶点类型。`**User**`在支付交互中扮演着核心角色，可以接收和发送支付。`**Transaction**`是支付本身。`**Device_Token**`是指用于支付的设备的唯一ID号码，而`**Payment_Instrument**`则指支付所使用的工具类型。
- en: Table 5-1\. Vertex types in the Fraud and Money Laundering Detection Starter
    Kit
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-1\. 欺诈和洗钱检测入门套件中的顶点类型
- en: '| Vertex type | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 顶点类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `**User**` | A person who is involved in a payment |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `**User**` | 参与支付的人 |'
- en: '| `**Transaction**` | A payment |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `**Transaction**` | 一笔支付 |'
- en: '| `**Device_Token**` | A unique ID number used to carry out the `**Transaction**`
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `**Device_Token**` | 用于执行`**Transaction**`的唯一ID号码 |'
- en: '| `**Payment_Instrument**` | An instrument to execute the payment |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `**Payment_Instrument**` | 执行支付的工具 |'
- en: There are two types of relationships between `**User**` and `**Transaction**`.
    A `**User**` can receive a transaction, denoted with `**User_Receive_Transaction**`,
    or a `**User**` can send a transaction, marked with `**User_Transfer_Transaction**`.
    A `**User**` can refer another `**User**`, which is indicated by `**User_Refer_User**`.
    The edge type `**User_to_Payment**` links a `**User**` to a `**Payment_Instrument**`
    (check, cash, warrant, etc.) used to carry out a transaction. Finally, the `**User_to_Device**`
    edge type connects a `**User**` to the `**Device_Token**` used when making an
    electronic payment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`**User**`和`**Transaction**`之间有两种关系类型。`**User**`可以接收交易，用`**User_Receive_Transaction**`表示，或者`**User**`可以发送交易，用`**User_Transfer_Transaction**`标记。`**User**`可以引用另一个`**User**`，这由`**User_Refer_User**`表示。边类型`**User_to_Payment**`连接了`**User**`和用于进行交易的`**Payment_Instrument**`（支票、现金、票据等）。最后，边类型`**User_to_Device**`将`**User**`连接到用于电子支付时使用的`**Device_Token**`。'
- en: Queries and Analytics
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询与分析
- en: The queries included in this starter kit showcase how graphs can help analysts
    detect high-risk payment behavior to combat fraud and money laundering. We’ll
    first give a high-level description of the pattern that each query looks for and
    how this pertains to transaction fraud or money laundering. We then go into depth
    for three of them to give you a better idea of how they are implemented.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此入门套件中包含的查询展示了如何利用图来帮助分析师检测高风险支付行为，以打击欺诈和洗钱活动。我们首先提供每个查询所查找的模式的高级描述，以及这如何与交易欺诈或洗钱相关联。然后我们深入研究其中的三个查询，以便更好地了解它们的实现方式。
- en: Circle detection
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 圆检测
- en: This query detects when money moves in a circular flow. It selects the `**Transaction**`
    elements that form a time sequence from an input `**User**` and then return to
    that `**User**`. If the amount of money that comes back is close to the amount
    that went out, then this may indicate money laundering.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询检测资金在循环流动时。它选择形成时间序列的`**Transaction**`元素，从输入的`**User**`开始，然后返回到该`**User**`。如果回来的金额接近出去的金额，可能表明存在洗钱行为。
- en: Invited user behavior
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 邀请用户行为
- en: This query looks for suspicious patterns of `**User_Refer_User**` behavior,
    which may indicate that a **`User`** is collaborating with other parties to collect
    referral bonuses. It looks at the number of referrals within two hops of a source
    **`User`** and at the number of transactions these users have conducted.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询寻找`**User_Refer_User**`行为的可疑模式，可能表明一个**`User`**正在与其他方合作以收集推荐奖金。它查看源**`User`**周围两跳内的推荐数以及这些用户进行的交易数。
- en: Multitransaction
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 多次交易
- en: This query showcases the payments between two networks of `**User**` elements.
    Starting with an input `**Transaction**`, the first group is a network of `**User**`
    elements related to the sending party. The second group is a network of `**User**`
    elements from the receiving party. The query visualizes the two networks and any
    money flows between them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询展示了两个`**User**`元素网络之间的支付。从输入的`**Transaction**`开始，第一组是与发送方相关的`**User**`元素网络。第二组是来自接收方的`**User**`元素网络。查询可视化了两个网络及其之间的资金流动。
- en: Repeated user
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 重复用户
- en: This query discovers if there is a connection among `**User**` elements that
    send money to the same receiver. It starts with the input `**User**`, who receives
    money, and selects all other `**User**` elements that send the money to that input
    `**User**`. Then it checks if there is a path between those senders using `**Device_Token**`,
    `**Payment_Instrument**`, and `**User**`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询发现向相同接收者发送资金的`**User**`元素之间是否存在连接。它从接收资金的输入`**User**`开始，并选择所有向该输入`**User**`发送资金的其他`**User**`元素。然后，它使用`**Device_Token**`、`**Payment_Instrument**`和`**User**`检查这些发送者之间是否存在路径。
- en: Same receiver sender
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 同一接收者发送者
- en: This query detects if a `**User**` uses a fake account to send money to itself.
    Given an input `**Transaction**`, this query returns true if the receiver and
    sender can be linked to each other by `**Device_Token**` and `**Payment_Instrument**`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询检测`**User**`是否使用假账户向自己发送资金。给定一个`**Transaction**`，如果接收者和发送者可以通过`**Device_Token**`和`**Payment_Instrument**`相互关联，则此查询返回真。
- en: Transferred amount
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 转账金额
- en: This query looks within a given time window for the total amount of funds transferred
    out from the **`Users`** who are connected within a few hops of a source `**User**`.
    While not directly suspicious, a high volume of funds could help to build the
    case for anti-money-laundering layering.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询在给定的时间窗口内查找从与源`**User**`几跳相连的**`Users`**转出的总金额。虽然不直接可疑，但大量资金可能有助于建立反洗钱分层的案件。
- en: We now take a closer look at the invited user behavior, multitransaction, and
    circle detection queries.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更详细地查看了邀请用户行为、多次交易和圈子检测查询。
- en: Invited user behavior
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 邀请用户行为
- en: This pattern assumes that a **`User`** can earn tiered referral bonuses for
    referring many new **`User`** to an electronic payment service. This query contains
    a two-hop traversal implementation, as illustrated in [Figure 5-2](#graph_traversal_pattern_to_detect_fraud).
    We start our traversal from a given `input_user`. The first hop selects all the
    **`User`** elements that are invited by this `input_user`. Then, with the second
    hop, we collect all the **`User`** elements that the first-order invitees invite.
    We then aggregate the transaction amount of those invitees. The `input_user` is
    a fraudulent **`User`** if the amount of money directly being transferred is high
    while the aggregated money from the second-order invitees is low or zero. The
    intuition behind this is that `input_user` has many fake referrals that fuel itself
    with referral bonuses so that it can send a large number of transactions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式假设一个**`User`**可以通过引荐许多新的**`User`**来赚取分层推荐奖金，用于电子支付服务。此查询包含了一个双跳遍历实现，如[图 5-2](#graph_traversal_pattern_to_detect_fraud)所示。我们从给定的`input_user`开始遍历。第一跳选择所有由此`input_user`邀请的**`User`**元素。然后，通过第二跳，收集所有一级受邀者邀请的**`User`**元素。然后我们聚合这些被邀请者的交易金额。如果直接转账金额很高，而来自二级被邀请者的聚合金额很低或为零，则`input_user`是一个欺诈的**`User`**。其背后的直觉是`input_user`有很多虚假的推荐，通过推荐奖金来推动自身进行大量交易。
- en: '![Graph traversal pattern to detect fraudulent users that conduct activities
    to earn referral bonuses](assets/gpam_0502.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图遍历模式，用于检测执行活动以赚取推荐奖金的欺诈用户](assets/gpam_0502.png)'
- en: Figure 5-2\. Graph traversal pattern to detect fraudulent users that conduct
    activities to earn referral bonuses
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-2\. 图遍历模式，用于检测执行活动以赚取推荐奖金的欺诈用户
- en: 'First we declare some accumulator variables to store our aggregated data:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明一些累加器变量来存储我们聚合的数据：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `SumAccum` `@@num_invited_persons` counts the number of second-hop invitees.
    The `SumAccum` `@@total_amount_sent` aggregates the amount of all transactions
    from the one-hop invitees. The `SumAccum` `@@edges_to_display` gathers all the
    edges (`User_Ref_User`) between the input `**User**` and a referred `**User**`,
    so that the visualization system knows to display them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`SumAccum` `@@num_invited_persons` 计算二级受邀者的数量。`SumAccum` `@@total_amount_sent`
    聚合了来自一级受邀者的所有交易金额。`SumAccum` `@@edges_to_display` 收集了输入**`User`** 和引荐**`User`**
    之间的所有边（`User_Ref_User`），以便可视化系统知道如何显示它们。'
- en: 'Then we find the one-hop invitees referred by the source `**User**`. We save
    each edge between the `Start` **`User`** and an invitee in `@@display_edge_set`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们找到由源**`User`**引荐的一级受邀者。我们将`Start` **`User`** 和一个受邀者之间的每条边保存在`@@display_edge_set`中：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the `FROM` clause, we don’t need to specify what type of vertices we are
    targeting because the edge type (**`User_Refer_User`**) only permits one type
    of target vertex (**`User`**).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`FROM`子句中，我们不需要指定我们要针对哪种类型的顶点，因为边的类型（**`User_Refer_User`**）只允许一个类型的目标顶点（**`User`**）。
- en: 'Next, we add up the amount of money that these first-order invitees have sent
    out. Each `**Transaction**` has an attribute called `amount`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们累加这些一级受邀者发送出去的金额。每个**`Transaction`**都有一个名为`amount`的属性：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we get the additional invitees referred by first-hop invitees:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们得到了由一级受邀者引荐的额外受邀者：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This search looks very much like the first hop, with two additional steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个搜索看起来非常像第一跳，但有两个额外的步骤：
- en: We check that we are not hopping back to the source `**User**`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们检查我们没有回到源**`User`**。
- en: We count the number of second-order invitees.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们计算二级受邀者的数量。
- en: If you run the algorithm with the three suggested input users (115637, 25680893,
    22120362), you’ll see they have referred one or a few users, who in turn have
    referred zero or a few users. Looking at the JSON results, you’ll see between
    $0 and $709 in total payments.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您用三个建议的输入用户（115637、25680893、22120362）运行算法，您会发现他们推荐了一个或少数用户，这些用户又没有推荐用户。查看JSON结果，您会看到总支付金额在0美元到709美元之间。
- en: Multitransaction
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多次交易
- en: Analysts believe that criminals often transfer money between two networks. The
    following query exposes this intuition. Given any input transaction, the first
    network consists of related accounts from the sender of that transaction, and
    the second network consists of associated accounts from the receiving party. Then
    we look for payment activities among all parties from those two networks. This
    query assembles those networks and finds any interactions between them, using
    the execution flow illustrated in [Figure 5-3](#graph_traversal_pattern_to_find_transac).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 分析人员认为，犯罪分子经常在两个网络之间转移资金。以下查询展示了这一直觉。给定任何输入事务，第一个网络由该事务的发送方的相关账户组成，第二个网络由接收方的相关账户组成。然后，我们查找这两个网络中所有方的支付活动。该查询通过图5-3中说明的执行流程组装这些网络，并查找它们之间的任何交互。
- en: '![Graph traversal pattern to find transaction networks from sending and receiving
    parties](assets/gpam_0503.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![从发送方和接收方找到事务网络的图遍历模式](assets/gpam_0503.png)'
- en: Figure 5-3\. Graph traversal pattern to find transaction networks from sending
    and receiving parties
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-3. 从发送方和接收方找到事务网络的图遍历模式
- en: 'We start with selecting the sender and receiver `**User**` elements for a given
    `**Transaction**` by traversing `**User_Transfer_Transaction**` or `**User_Receive_Transaction**`
    edge types:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过遍历`**User_Transfer_Transaction**`或`**User_Receive_Transaction**`边类型来选择给定`**Transaction**`的发送方和接收方`**User**`元素：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the `FROM` clause, we are traversing from a `**Transaction**` (`source_transaction`)
    to `**User**` elements, which is the reverse direction of the `**User_Receive_Transaction**`
    and `**User_Transfer_Transaction**` edges. That is why the direction arrows point
    to the left and are on the left side of the edge type names. Alternatively, if
    those edges have reverse edge types defined, we could use their reverse edges
    instead (and use right-facing arrows.)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`FROM`子句中，我们从`**Transaction**`（`source_transaction`）到`**User**`元素进行遍历，这是`**User_Receive_Transaction**`和`**User_Transfer_Transaction**`边的反向方向。这就是为什么方向箭头指向左侧并位于边类型名称的左侧。或者，如果这些边有定义反向边类型，我们可以使用它们的反向边代替（并使用向右的箭头）。
- en: 'We use cases to determine if the `**User**` is a receiving or sending party
    of the `**Transaction**`. If a `**User**` connects to a `**Transaction**` via
    `**User_Receive_Transaction**`**,** we set `@from_receiver` to true and add that
    `**User**` to the `@@receiver_set`. In other cases, the `**User**` is a sending
    party of the `**Transaction**`, so we set `@from_sender` to true and add this
    `**User**` to `@@sender_set`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用用例来确定`**User**`是`**Transaction**`的接收方还是发送方。如果一个`**User**`通过`**User_Receive_Transaction**`连接到一个`**Transaction**`，我们将`@from_receiver`设置为true，并将该`**User**`添加到`@@receiver_set`中。在其他情况下，`**User**`是`**Transaction**`的发送方，因此我们将`@from_sender`设置为true，并将此`**User**`添加到`@@sender_set`中：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we know the sender and receiver, we find `**User**` elements that
    belong to the receiving or sending party. That is, we traverse over `**User_to_Device**`
    or `**User_to_Payment**` edges and add `**User**` elements to either the `@@sender_set`
    or `@@receiver_set` if they exist within four hops (`WHILE Start.size() > 0 LIMIT
    MAX_HOPS DO`). Since it takes two hops to make a transaction (sender → transaction
    → recipient), four hops equals a chain of two transactions:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了发送方和接收方，我们找到属于接收方或发送方的`**User**`元素。也就是说，我们遍历`**User_to_Device**`或`**User_to_Payment**`边，并将`**User**`元素添加到`@@sender_set`或`@@receiver_set`（如果它们在四个跳跃内存在（`WHILE
    Start.size() > 0 LIMIT MAX_HOPS DO`）。因为完成一笔交易需要两个跳跃（发送方 → 事务 → 接收方），四个跳跃等于两个交易的链：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we end up at a `**User**` vertex type and that `**User**` is a sending party,
    we add that `**User**` to `@@sender_set`. If `t.@from_receiver` is true, then
    the `**User**` belongs to the receiving party, and we add that `**User**` to `@@receiver_set`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们最终到达一个`**User**`顶点类型，并且该`**User**`是发送方，我们将该`**User**`添加到`@@sender_set`中。如果`t.@from_receiver`为true，则`**User**`属于接收方，我们将该`**User**`添加到`@@receiver_set`中。
- en: 'After forming the sending and receiving groups, we now look for transactions
    other than the source transaction that connect the sender and receiver groups.
    First, we find transactions adjacent to the receiver set:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 形成发送方和接收方组后，我们现在寻找除源事务之外连接发送方和接收方组的其他事务。首先，我们查找与接收方集合相邻的事务：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we find transactions adjacent to the sender set:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们查找与发送方集合相邻的事务：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `HAVING` clause checks whether a transaction is considered part of the receiving
    group and the sending group.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`HAVING`子句检查事务是否被视为接收组和发送组的一部分。'
- en: Running the query with one of the suggested transaction IDs (32, 33, or 37),
    the output will look like one connected community, because there is at least one
    transaction in addition to the input transaction that joins the sender community
    to the receiver community. Try a different input ID, and the output will likely
    look like two separate communities, joined only by the input transaction.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行使用建议的任一交易ID（32、33或37）的查询时，输出看起来像是一个连接的社区，因为除了输入交易之外，还有至少一笔交易将发送方社区与接收方社区连接在一起。尝试不同的输入ID，输出很可能看起来像是两个独立的社区，仅通过输入交易连接在一起。
- en: Circle detection
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 圆圈检测
- en: The essence of money laundering is transfering money between enough parties
    that it becomes a challenge to trace its origin. Criminals have several routing
    schemas to mask the source of their illicit money. A popular transfer schema is
    one where the money is transferred via various intermediaries to return eventually
    to one of the senders. In this case, the money traverses in a circular pattern.
    A circular money flow is not itself a crime. What makes it criminal is intent
    and if any of the transitions are by themselves fraudulent. Characteristics of
    a circular flow—the size of the loop, the amount of money transferred, the percentage
    of money returned to the sender, the time delays between transactions, and how
    many of the individual transactions are out of the ordinary—are also useful indicators.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 洗钱的本质是在足够多的参与者之间转移资金，使得追踪其起源成为一个挑战。罪犯有几种路由模式来掩盖其非法资金的来源。一个流行的转移模式是通过各种中介最终返回到其中一个发件人的资金。在这种情况下，资金以循环模式传播。循环资金流动本身并不是犯罪。使其成为犯罪的是意图以及其中任何一个过渡本身是否属于欺诈行为。循环流动的特征——循环的大小、转移的资金金额、返回给发送者的资金百分比、交易之间的时间延迟以及多少个个别交易是不寻常的——也是有用的指标。
- en: With graphs, we can detect such circular patterns easier than with traditional
    databases because we can hop repeatedly from one transaction to the next until
    a transaction arrives at the originator. As we explained in [Chapter 2](ch02.html#connect_and_explore_data),
    graph hops are computationally much cheaper than table joins in a relational database.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在图形中，我们可以比传统数据库更容易地检测到这种循环模式，因为我们可以从一个交易跳到下一个，直到一个交易到达发起者。正如我们在[第2章](ch02.html#connect_and_explore_data)中所解释的那样，图的跳跃在计算上比关系数据库中的表连接要便宜得多。
- en: In [Figure 5-4](#example_circular_money_flow), we see such a circular money
    flow. In this example, Adam is the originator and sends $100 to Ben. Ben sends
    $60 to Cor, and she sends $40 to Daisy, who in turn sends $100 back to Adam. We
    show in this example that Ben, Cor, and Daisy do not send the same amount of money
    they have received to the next person in the chain. Criminals do this to add another
    layer of noise by making the starting amount branch out into different chunks
    across various intermediaries, making it harder to find out who the originator
    is and what amount is being laundered.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图5-4](#example_circular_money_flow)中，我们看到这样的循环资金流动。在这个例子中，亚当是发起者，向本发送了$100。本发送了$60给科尔，她向黛西发送了$40，后者又向亚当发送了$100。我们在这个例子中展示，本、科尔和黛西没有把他们收到的金额完全发送给链条中的下一个人。罪犯这样做是为了通过使起始金额分散到各种中间人中，增加另一层噪音，使得查明起始者及洗钱金额更加困难。
- en: '![Example circular money flow](assets/gpam_0504.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![示例循环资金流动](assets/gpam_0504.png)'
- en: Figure 5-4\. Example circular money flow
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-4\. 示例循环资金流动
- en: 'The query `circle_detection` finds all the circular transaction chains starting
    from a given **`User`** (`source_id`) that have up to a maximum number of transactions
    per circle (`max_transactions`). Since there are two hops per transaction (sender
    → transaction → recipient), the circles can have up to twice as many hops. To
    be a valid circle, the sequence of transactions in a circle must move forward
    in time. For example, for this to be a valid circle:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '查询 `circle_detection` 查找从给定的**`User`**（`source_id`）开始的所有循环交易链，每个循环最多有一定数量的交易（`max_transactions`）。由于每个交易有两次跳跃（发送者
    → 交易 → 接收者），因此每个循环可以有多达两次跳跃。要成为有效的循环，循环中的交易序列必须在时间上向前移动。例如，为了使这个循环有效： '
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: then `txn_A.ts < txn_B.ts < txn_C.ts`, where `ts` is the timestamp of a transaction.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 `txn_A.ts < txn_B.ts < txn_C.ts`，其中 `ts` 是交易的时间戳。
- en: Because there are so many possible paths to check, the query’s implementation
    employs a couple of performance and filtering techniques. The first one is bidirectional
    search, which searches forward from the starting point while simultaneously searching
    backward from the ending point. It is faster to conduct two half-length searches
    than one full-length search. When the two searches intersect, you have a complete
    path.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有很多可能的路径需要检查，查询的实现采用了几种性能和过滤技术。第一种是双向搜索，从起点向前搜索同时从终点向后搜索。进行两个半长度的搜索比进行一个全长度的搜索要快。当两个搜索相交时，就找到了一条完整的路径。
- en: 'The second technique filters out paths that can’t meet the forward time travel
    requirement:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种技术过滤掉不能满足向前时间旅行要求的路径。
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Starting from `source_id`, make one step both forward (`**User_Transfer_Transaction**`)
    and backward (`**User_Receive_Transaction**`). Find the earliest time of any transaction
    sent by `source_id` (`@@min_src_send_time`) and the latest time of any transaction
    received by `source_id` (`@@max_src_receive_time`). Check to make sure that `@@max_src_receive_time
    >= @@min_src_send_time`. These global limits will also be used later to check
    the plausibility of other transactions, which are candidates for a circular path.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从`source_id`开始，向前一步（`**User_Transfer_Transaction**`）和向后一步（`**User_Receive_Transaction**`）。找到`source_id`发送的任何交易的最早时间（`@@min_src_send_time`）和接收的最晚时间（`@@max_src_receive_time`）。检查确保`@@max_src_receive_time
    >= @@min_src_send_time`。这些全局限制也将用于稍后检查其他交易的合理性，这些交易是循环路径的候选者。
- en: Then we begin Phase 1 of the search. Starting from `source_id`, step forward
    two hops (equals one transaction). Using [Figure 5-4](#example_circular_money_flow)
    as an example, this would step from Adam to Ben. Also traverse two hops backward
    (Adam to Daisy). Iterate this combination of steps, moving forward (or backward)
    in time until each direction has stepped halfway around a maximum size circle.
    [Table 5-2](#forward_and_reverse_pathscomma_using_th) shows the paths that would
    be traversed if we consider the graph of [Figure 5-4](#example_circular_money_flow).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们开始搜索的第一阶段。从`source_id`开始，向前走两步（相当于一次交易）。以[图 5-4](#example_circular_money_flow)为例，这将从Adam到Ben。同时向后走两步（Adam到Daisy）。迭代这种步骤的组合，向前（或向后）移动，直到每个方向都绕过一个最大大小的圆圈的一半。[表 5-2](#forward_and_reverse_pathscomma_using_th)显示了如果我们考虑[图 5-4](#example_circular_money_flow)的图表，则会遍历的路径。
- en: Table 5-2\. Forward and reverse paths, using the graph of [Figure 5-4](#example_circular_money_flow)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-2\. 使用[图 5-4](#example_circular_money_flow)的图表的前向和后向路径
- en: '| Iteration | 1 | 2 | 3 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 迭代 | 1 | 2 | 3 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Forward | Adam→Ben | Ben→Cor | Cor→Daisy |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 前向 | Adam→Ben | Ben→Cor | Cor→Daisy |'
- en: '| Reverse | Adam→Daisy | Daisy→Cor | Cor→Ben |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 反向 | Adam→Daisy | Daisy→Cor | Cor→Ben |'
- en: 'The following code snippet shows a simplified version of one iteration of the
    forward traversal. For brevity, the checking of timing and step constraints has
    been omitted:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了前向遍历的一个简化版本的一次迭代。为简洁起见，省略了时间和步骤约束的检查：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Looking at [Table 5-2](#forward_and_reverse_pathscomma_using_th), we see that
    after the second iteration, a forward path and a reverse path have met at a common
    point: Cor. We have a circle! But wait. What if the Ben→Cor timestamp is later
    than the Cor→Daisy timestamp? If so, then it’s not a *valid* circle.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从[表 5-2](#forward_and_reverse_pathscomma_using_th)可以看出，在第二次迭代后，前向路径和后向路径在一个共同点Cor相遇。我们有一个圆圈！但是等等。如果Ben→Cor的时间戳晚于Cor→Daisy的时间戳怎么办？如果是这样，那么它就不是一个*有效*的圆圈。
- en: 'In Phase 2 of the query, we discover and validate circular paths by doing the
    following. For the forward search, continue traversing forward but only along
    paths that were previously traversed in the reverse direction and that move forward
    in time. In our example, if `max_transactions` = 2 so that Phase 1 got as far
    as Ben→Cor, then Phase 2 could continue on to Cor→Daisy, but only because we had
    already traversed Daisy→Cor in Phase 1 and only if the timestamps continue to
    increase:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询的第二阶段，我们通过以下方式发现并验证循环路径。对于前向搜索，继续沿着在反向方向先前遍历过的路径前进，而且时间上是向前的。在我们的例子中，如果`max_transactions`
    = 2，因此第一阶段已经走到了Ben→Cor，那么第二阶段可以继续到Cor→Daisy，但只有因为我们在第一阶段已经遍历了Daisy→Cor，并且时间戳继续增加：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After Phase 2, we have found our circles. There is a Phase 3 that traverses
    the circles and marks the vertices and edges so that they can be displayed. [Figure 5-5](#circle_detection_results_for_source_id)
    and [Figure 5-6](#circle_detection_results_for_source_ide) show example results
    from circle detection, for maximum circle sizes of four, five, and six transactions.
    As the circle size limit increases, more circles are found.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2阶段后，我们找到了我们的圈子。有第3阶段遍历这些圈子，并标记顶点和边缘，以便它们可以被显示出来。图5-5和图5-6展示了来自圈检测的示例结果，最大圈子大小为四、五和六个交易。随着圈子大小限制的增加，找到的圈子也越多。
- en: '![Circle detection results for source_id=111 and max_transactions of 4 and
    5, respectively](assets/gpam_0505.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![当 `source_id`=111 和 `max_transactions` 分别为4和5时的圈检测结果](assets/gpam_0505.png)'
- en: Figure 5-5\. Circle detection results for `source_id` = 111 and `max_transactions`
    of 4 and 5, respectively (see a larger version of this figure at [https://oreil.ly/gpam0505](https://oreil.ly/gpam0505))
  id: totrans-115
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-5\. 当 `source_id` = 111 和 `max_transactions` 分别为4和5时的圈检测结果（请在 [https://oreil.ly/gpam0505](https://oreil.ly/gpam0505)
    查看更大的版本）
- en: s![Circle detection results for source_id=111 and max_transactions=6](assets/gpam_0506.png)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: s![当 `source_id`=111 和 `max_transactions`=6 时的圈检测结果](assets/gpam_0506.png)
- en: Figure 5-6\. Circle detection results for `source_id` = 111 and `max_transactions`
    = 6 (see a larger version of this figure at [https://oreil.ly/gpam0506](https://oreil.ly/gpam0506))
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-6\. 当 `source_id` = 111 和 `max_transactions` = 6 时的圈检测结果（请在 [https://oreil.ly/gpam0506](https://oreil.ly/gpam0506)
    查看更大的版本）
- en: Chapter Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节总结
- en: 'Financial fraud is a serious and costly problem that most businesses and all
    financial institutions must face. Better and faster techniques to detect and stop
    fraud are needed. We showed that graph data modeling and graph queries are powerful
    ways to detect suspicious patterns of activity that would have otherwise gone
    unnoticed. Graph modeling makes it easy to address three key phases for searching
    for patterns: describing the search, performing the search, and examining the
    results. Later in the book, we’ll show how graph machine learning provides more
    sophisticated and accurate fraud detection.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 金融欺诈是大多数企业和所有金融机构必须面对的严重和昂贵的问题。我们需要更好和更快的技术来检测和阻止欺诈。我们展示了图数据建模和图查询是检测可能被忽视的可疑活动模式的强大方法。图建模使得能够轻松应对搜索模式的三个关键阶段：描述搜索、执行搜索和检查结果。在本书的后续部分，我们将展示图机器学习如何提供更复杂和准确的欺诈检测。
- en: More specifically, we have discussed three queries to detect and combat fraud
    and money laundering. The first query demonstrated how we could detect if money
    flows in a circular pattern. The second query showed how graphs could find suspicious
    user behavior within a referral program. The third query showcased the money flow
    between two networks of people. The fourth query showed how we could find connections
    between people who send their money to the same person. The fifth query detected
    whether someone used a fake account to send money to themselves. The last query
    we discussed was about detecting a high volume of money transfers to a person.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们已经讨论了三个查询来检测和打击欺诈和洗钱。第一个查询展示了如何检测资金是否呈循环流动。第二个查询展示了如何通过图形在推荐计划中发现可疑的用户行为。第三个查询展示了两个人群网络之间的资金流动。第四个查询展示了如何找出将资金发送给同一人的人之间的连接。第五个查询检测是否有人使用假账户向自己发送资金。我们讨论的最后一个查询是关于检测向某人进行大量资金转移的情况。
- en: In the next chapter, we will offer a systematic approach to analyzing graphs.
    In particular, we will delve into the rewarding world of graph measures and graph
    algorithms.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将提供一种系统化的方法来分析图形。特别是，我们将深入探讨图形度量和图形算法的丰富世界。
- en: ^([1](ch05.html#ch01fn10-marker)) “What Is Money Laundering?” fatf-gafi, accessed
    May 22, 2023, [*https://www.fatf-gafi.org/en/pages/frequently-asked-questions.html#tabs-36503a8663-item-6ff811783c-tab*](https://www.fatf-gafi.org/en/pages/frequently-asked-questions.html#tabs-36503a8663-item-6ff811783c-tab).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch05.html#ch01fn10-marker)) “什么是洗钱？” fatf-gafi，访问于2023年5月22日，[*https://www.fatf-gafi.org/en/pages/frequently-asked-questions.html#tabs-36503a8663-item-6ff811783c-tab*](https://www.fatf-gafi.org/en/pages/frequently-asked-questions.html#tabs-36503a8663-item-6ff811783c-tab)。
