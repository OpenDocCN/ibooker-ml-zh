- en: Chapter 6\. Introducing Imitation Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 介绍模仿学习
- en: In this chapter, we’re going to look at imitation learning (IL). Imitation learning
    is slightly different from other forms of machine learning because the intent
    of IL isn’t to achieve a specific goal. Instead, the intent is to copy the behavior
    of something else. That something else? Probably a human.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将讨论模仿学习（IL）。与其他形式的机器学习略有不同，IL 的目的并不是为了达到特定的目标。相反，它的目的是复制其他事物的行为。那个其他事物？可能是人类。
- en: To explore IL, we’ll be making another ball-based agent that can roll around,
    and we’ll be training it to seek and pick up a coin (a classic video game–style
    pickup). But instead of training it to do what we want by reinforcing the behavior
    using reward signals, we’ll train it using our own human brains.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索IL，我们将创建另一个基于球的代理程序，它可以在周围滚动，并且我们将训练它去寻找和捡起一个硬币（经典视频游戏风格的捡取）。但与其通过奖励信号强化行为来训练它相反，我们将使用我们自己的大脑来训练它。
- en: This means that, initially, we’ll be moving the agent around ourselves, using
    the keyboard, just like when we’ve used the heuristic behavior to control agents
    in previous chapters. The difference is that while we drive the agent around this
    time, ML-Agents will be watching us, and once we’ve finished, we’ll use IL to
    let the agent work out how to copy our behavior.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，最初，我们将自己移动代理程序，使用键盘，就像我们在前几章中使用启发式行为来控制代理程序一样。不同之处在于，这一次当我们驱动代理程序时，ML-Agents
    将观察我们，一旦完成，我们将使用IL让代理程序学会如何复制我们的行为。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: IL not only lets you create more humanlike behaviors, it can also be used to
    essentially jump-start training. Some tasks have very high initial learning curves,
    and training to get over these early hurdles can be quite slow. If a human can
    show the agent how to do a task, the agent can use that as guidance when getting
    started and then optimize the approach from there. Luckily for us, humans are
    pretty good at plenty of things, and IL lets you take advantage of this. A disadvantage
    of IL is that it’s not as good at finding novel approaches and can often peak
    earlier than other approaches. It’s only as good as the demonstrations it has
    been given.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: IL不仅可以让您创建更像人类的行为，还可以用来启动训练。一些任务有非常高的初始学习曲线，克服这些早期障碍的训练可能相当缓慢。如果人类能向代理程序展示如何完成任务，代理程序可以将其作为起点并优化方法。幸运的是，人类在很多事情上都做得很好，IL让您能够利用这一点。IL的一个缺点是，它不擅长发现新颖的方法，通常比其他方法更早达到顶峰。它的效果取决于所展示的演示。
- en: The main advantage of IL is that you can very quickly get results with far less
    training than other machine learning techniques. We won’t have to set up any reward
    structure for this scenario, as the reward signal will automatically be how closely
    it matches our behavior, instead of something more explicit. We will look at using
    rewards together with IL later, in [Chapter 7](ch07.html#chapter-advanced-il).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: IL的主要优势是，您可以比其他机器学习技术更快地获得结果，而无需设置任何奖励结构。这种情况下，奖励信号将自动是它与我们行为匹配程度的衡量，而不是更显式的东西。我们将在[第7章](ch07.html#chapter-advanced-il)中探讨如何与IL一起使用奖励。
- en: In this chapter, we’ll be using a specific IL approach called behavioral cloning
    (BC), which is relatively straightforward to implement using Unity and ML-Agents,
    but has more limitations than other techniques. We’ll touch on those limitations
    as we encounter them.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用一种特定的IL方法，称为行为克隆（BC），这种方法在Unity和ML-Agents中相对容易实现，但比其他技术有更多限制。我们将在遇到这些限制时详细讨论它们。
- en: Tip
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Unity also supports an IL technique called generative adversarial imitation
    learning (GAIL). We will be using GAIL in [Chapter 7](ch07.html#chapter-advanced-il).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Unity还支持一种称为生成对抗性模仿学习（GAIL）的IL技术。我们将在[第7章](ch07.html#chapter-advanced-il)中使用GAIL。
- en: Simulation Environment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仿真环境
- en: Our IL simulation environment will be fairly simple and abstract. You can see
    an image of our version in [Figure 6-1](#fig:ch_ilintro_scenario). Our environment
    will have a large plane for our ground, a ball to serve as our agent, and a flattened
    cylinder as our goal coin (trust us, it’s a coin!).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的IL仿真环境将是相当简单和抽象的。你可以在[图6-1](#fig:ch_ilintro_scenario)中看到我们版本的图像。我们的环境将有一个用于地面的大平面，一个球作为我们的代理程序，以及一个扁平的圆柱体作为我们的目标硬币（相信我们，这是一个硬币！）。
- en: '![psml 0601](assets/psml_0601.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0601](assets/psml_0601.png)'
- en: Figure 6-1\. The simulation we’ll be building
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-1. 我们将要构建的仿真
- en: 'To build the simulation environment, we need to:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建仿真环境，我们需要：
- en: Make the ground
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制造地面
- en: Make the goal
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作目标。
- en: Make the agent
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作代理。
- en: 'Let’s get cracking:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: Create a new 3D Unity project using the Unity Hub. Ours is named “ImitationLearningBall.”
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Unity Hub创建一个新的3D Unity项目。我们的项目名为“ImitationLearningBall”。
- en: Import the Unity ML-Agents package.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入Unity ML-Agents包。
- en: Make sure your Python environment is ready to go.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的Python环境准备就绪。
- en: Once you’ve done this, continue on to build the environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，继续构建环境。
- en: Creating the Ground
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建地面。
- en: 'First we will need our ground to exist, for without a ground it would be very
    hard for our ball to roll anywhere. After creating a new Unity project, importing
    the Unity ML-Agents package, and getting into an empty scene, you’ll need to:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要我们的地面存在，因为没有地面，我们的球将很难滚动到任何地方。在创建新的Unity项目、导入Unity ML-Agents包并进入空场景之后，你需要：
- en: Create a plane, name it “Ground,” and make sure its position is `(0, 0, 0)`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个平面，命名为“地面”，并确保其位置为`(0, 0, 0)`。
- en: Now that our ground is correctly positioned, we will quickly give it a different
    appearance so that it is slightly easier for us to distinguish from the other
    soon-to-exist elements of our environment.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们的地面位置正确，我们将快速地给它一个不同的外观，以便我们稍后在环境中能更容易地区分它和其他即将存在的元素。
- en: Create a material in the Project view, name it something like “GroundMaterial,”
    and give it a nice color that looks like the ground (we recommend a nice grass-like
    green) by changing the albedo property.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目视图中创建一个材质，命名为“地面材质”或类似名称，并通过更改反照率属性给它一个漂亮的颜色，看起来像地面（我们推荐一个漂亮的草绿色）。
- en: Assign the material to the ground plane by dragging it onto it.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将材料分配给地面平面，通过将其拖动到上面。
- en: When you’re done, you should have something similar to [Figure 6-2](#fig:ch_ilintro_ground).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当完成时，你应该有类似于[图6-2](#fig:ch_ilintro_ground)的东西。
- en: '![psml 0602](assets/psml_0602.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0602](assets/psml_0602.png)'
- en: Figure 6-2\. The ground plane for our IL scenario
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-2。我们IL场景的地面平面
- en: Our ground is ready, so it’s time to make the goal. Don’t forget to save your
    scene before continuing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的地面已经准备好了，现在是时候制作目标了。在继续之前，请不要忘记保存你的场景。
- en: Creating the Goal
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建目标。
- en: Our goal for this scenario is going to be a large gold coin. What more could
    a rolling ball desire? (If it is good enough for Mario, it is good enough for
    our ball!)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们此场景的目标将是一个大金币。对于一个滚动的球来说，还能想要什么呢？（如果它足够好用于马里奥，对我们的球来说也足够好！）
- en: 'To create the coin, open your Unity scene and do the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建硬币，请打开Unity场景并按照以下步骤操作：
- en: Create a new cylinder and name it “Goal.”
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的圆柱体，并命名为“目标”。
- en: Use the Inspector and change the goal’s position to `(0, 0.75, 0`), its rotation
    to `(0, 0, 90)`, and its scale to (`1.5, 0.1, 1.5)`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用检视器，将目标的位置更改为`(0, 0.75, 0)`，其旋转更改为`(0, 0, 90)`，并将其缩放更改为`(1.5, 0.1, 1.5)`。
- en: 'This gives us a nice flat disk, but it doesn’t look much like a coin, so let’s
    change that by giving it a little pizazz with a material:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们一个漂亮的平面圆盘，但看起来并不像一个硬币，所以让我们通过给它一点材质来改变这一点：
- en: Create a new material, and name it something related to a Goal Coin.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新材质，并命名为与目标硬币相关的名称。
- en: Use the Inspector, and set the new material’s albedo color to a nice golden
    yellow.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用检视器，将新材质的反射率颜色设置为漂亮的金黄色。
- en: Still in the material’s Inspector, drag the Metallic slider all the way to the
    right until it reads `1.0`, and drag the Smoothness slider to around `0.3`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在材料检视器中，将金属滑块拖到最右边，直到读数为`1.0`，并将光滑度滑块拖动到约`0.3`。
- en: Drag the new material onto the goal object in the scene or the Hierarchy to
    apply it.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新材质拖到场景中目标物体或层级上以应用它。
- en: When you’re done, you should have a coin that looks similar to [Figure 6-3](#fig:ch_ilintro_goal).
    Aren’t video games amazing?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当完成时，你应该有一个看起来类似于[图6-3](#fig:ch_ilintro_goal)的硬币。视频游戏真是不可思议吧？
- en: '![psml 0603](assets/psml_0603.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0603](assets/psml_0603.png)'
- en: Figure 6-3\. The goal coin for our IL scenario
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-3。我们IL场景的目标硬币
- en: 'Of course, it isn’t really a video game coin *unless* it slowly spins. This
    has nothing to do with any aspect of machine learning or the simulation, but we
    feel it’s very important:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果不慢慢旋转，它就不是一个真正的视频游戏硬币*了*。这与任何机器学习或模拟的任何方面都无关，但我们觉得这非常重要：
- en: Select the coin in the Hierarchy.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级中选择硬币。
- en: In the Inspector, click on the Add Component button.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视器中，点击“添加组件”按钮。
- en: Select the New Script option in the drop-down menu.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单中选择“新建脚本”选项。
- en: Name the script “CoinSpin” and press Return.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本命名为“CoinSpin”，然后按回车。
- en: Open the *CoinSpin.cs* script in your code editor.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开*CoinSpin.cs*脚本。
- en: 'Replace the code in that file with the following code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换文件中的代码：
- en: '[PRE0]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is a `speed` float variable that is exposed in the Inspector in the Unity
    Editor (because it was set to `public` in the code) if you want to make the coin
    spin faster or slower.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity编辑器中检查器中暴露了一个名为`speed`的浮点变量（因为在代码中设置为`public`），如果您想让硬币旋转得更快或更慢，可以使用它。
- en: Now if we play the scene in Unity, the goal coin will slowly spin around. Perfection.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果在Unity中播放场景，目标硬币将会缓慢旋转。完美。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Making the coin spin or coloring it a shiny gold isn’t at all necessary for
    training. However, because humans will need to be the ones driving the ball around
    initially, it’s worth spending a little bit of time making things more clearly
    delineated and interesting to look at. Humans don’t like looking at abstract white
    shapes much, and adding a bit of fun is rarely a bad idea, even if the computer
    doesn’t care.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让硬币旋转或使其变成闪亮的金色对于培训来说并不是必要的。然而，因为最初需要人类来驾驶球，所以值得花一点时间使事物更加清晰和有趣。人类不喜欢看抽象的白色形状，稍微增加一些乐趣很少是一个坏主意，即使计算机并不在乎。
- en: The final thing we need to do is set the coin up to handle the situation when
    it collides with the ball.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后需要做的是设置硬币处理碰撞球的情况。
- en: When you create one of Unity’s predefined polyhedrons (like the cylinder we
    fashioned into a coin), it comes with a collider, which lets us know when things
    collide with it. By default, Unity treats the collider like a solid object, but
    we don’t want that. We don’t want the ball to bounce off the coin, we want it
    to pass through it, and notify us that that’s what happened.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建Unity的预定义多面体之一（例如我们将其制成的圆柱体），它会带有碰撞器，让我们知道何时发生碰撞。默认情况下，Unity将碰撞器视为实体对象，但我们不希望如此。我们不希望球弹开硬币，我们希望球穿过硬币，并通知我们发生了碰撞。
- en: 'To do this, we need to convert our collider to a trigger volume:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要将我们的碰撞器转换为触发体积：
- en: Select the coin in the Hierarchy.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Hierarchy中选择硬币。
- en: Inside the Inspector, locate the Capsule Collider section.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，找到胶囊碰撞器部分。
- en: Tick the Is Trigger tickbox to make it a trigger.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选“是触发器”复选框以使其成为触发器。
- en: Now when things collide with the coin, instead of hitting it like a wall, we
    will be informed that something hit it, but there will be no physics effect.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当东西与硬币碰撞时，不会像撞墙那样，我们会被通知有东西碰到了，但不会有物理效果。
- en: 'We still need an easy way to let the ball know it hit the coin instead of something
    else. As we did in [Chapter 5](ch05.html#chapter-self-driving-car), we will use
    the Unity Editor’s tags for this. Tags let you quickly flag certain objects in
    a scene with additional metadata, and while there are other ways of achieving
    the same effect, tags are very lightweight and convenient:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要一个简单的方法来让球知道它碰到了硬币而不是其他东西。就像我们在[第5章](ch05.html#chapter-self-driving-car)中所做的那样，我们将使用Unity编辑器的标签来实现这一点。标签可以让您快速地用附加元数据标记场景中的某些对象，虽然有其他方法可以实现相同的效果，但标签非常轻便和方便：
- en: Select the coin in the Hierarchy.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Hierarchy中选择硬币。
- en: Inside the Inspector, select the Tag drop-down menu, as shown in [Figure 6-4](#fig:ch_ilintro_goal_tag_1).
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，选择标签下拉菜单，如[图 6-4](#fig:ch_ilintro_goal_tag_1)所示。
- en: '![psml 0604](assets/psml_0604.png)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0604](assets/psml_0604.png)'
- en: Figure 6-4\. The initial list of tags
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-4。初始标签列表
- en: 'There are a few predefined tags, but we don’t want these so we will have to
    make our own:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个预定义的标签，但我们不想要这些，所以我们将自己制作：
- en: Select the Add Tag option from the drop-down menu. This will open the Tag editor,
    allowing us to create new tags.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择“添加标签”选项。这将打开标签编辑器，允许我们创建新标签。
- en: Click the `+` button to create a new tag.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“+”按钮创建一个新标签。
- en: Name the tag “Goal.”
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签命名为“目标”。
- en: Select the coin in the Hierarchy and open the Tag drop-down menu from the Inspector.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Hierarchy中选择硬币，并从检查器中打开标签下拉菜单。
- en: Select the newly created “Goal” tag, as shown in [Figure 6-5](#fig:ch_ilintro_goal_tag_2).
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新创建的“目标”标签，如[图 6-5](#fig:ch_ilintro_goal_tag_2)所示。
- en: '![psml 0605](assets/psml_0605.png)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0605](assets/psml_0605.png)'
- en: Figure 6-5\. The modified list of tags
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-5。修改后的标签列表
- en: Now our coin is tagged as a goal, which we can use later to differentiate between
    objects. Our goal coin is complete! Don’t forget to save.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的硬币被标记为目标，稍后可以用来区分物体。我们的目标硬币完成了！别忘了保存。
- en: The Name’s Ball, Agent Ball
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 名称为Ball，Agent Ball
- en: Time to make our ball agent. We know, it’s always very exciting to ponder any
    form of orb, and our ball agent is no exception. At this point we will just be
    setting up the physical properties of our ball, not the ML elements.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候制作我们的球体代理了。我们知道，思考任何形式的球体总是令人兴奋的，而我们的球体代理也不例外。此时，我们只是设置我们球体的物理属性，而不涉及 ML
    元素。
- en: 'In the Unity Editor, do the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 编辑器中，执行以下操作：
- en: Create a new sphere in the Hierarchy, and name it “Ball.”
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次视图中创建一个新的球体，并将其命名为 “Ball”。
- en: Use the Inspector, and set the ball’s position to `(0, 0.25, 0)` and its scale
    to `(0.5, 0.5, 0.5)`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用检视面板，将球体的位置设置为 `(0, 0.25, 0)`，其缩放设置为 `(0.5, 0.5, 0.5)`。
- en: Use the ball’s Inspector to add a Rigidbody component. You don’t need to modify
    any of its parameters.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用球体的检视面板添加一个 Rigidbody 组件。你不需要修改其任何参数。
- en: Now we have a ball created and placed in the scene, and we have given it a Rigidbody,
    so it exists in the physics system.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建并放置了一个球体在场景中，并且给它添加了 Rigidbody，因此它存在于物理系统中。
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The Rigidbody is the component that allows the ball to participate in Unity’s
    physics system, and gives it various physical properties such as its mass.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Rigidbody 是 Unity 的物理系统中允许球体参与的组件，它赋予了球体各种物理属性，比如质量。
- en: 'Finally, we want to give the ball agent a different appearance:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望给球体代理赋予一个不同的外观：
- en: Create a new material in the Assets pane.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源窗口中创建一个新的材质。
- en: Rename it “Ball_Mat.”
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为 “Ball_Mat。”
- en: Download the book’s assets from [the book’s website](https://oreil.ly/1efRA)
    and locate the file *ball_texture.png*. Drag that files into the Project pane
    in Unity.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [书籍网站](https://oreil.ly/1efRA) 下载书籍的资源，并找到 *ball_texture.png* 文件。将该文件拖放到 Unity
    的项目窗口中。
- en: Select the ball material.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择球体材质。
- en: Drag the ball texture from the Assets section into the Albedo field in the Inspector.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将球体纹理从资源区域拖拽到检视面板中的 Albedo 字段中。
- en: Drag the material from the assets onto the ball in the scene.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将材质从资源拖放到场景中的球体上。
- en: Now our ball in [Figure 6-6](#fig:ch_ilintro_ball_material) is ready and looking
    good. Feel free to make your own texture for the ball if you prefer.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的球体在 [图 6-6](#fig:ch_ilintro_ball_material) 中已经准备就绪，看起来不错。如果你喜欢，可以自己制作球体的纹理。
- en: '![psml 0606](assets/psml_0606.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0606](assets/psml_0606.png)'
- en: Figure 6-6\. Our ball with its new material applied
  id: totrans-97
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-6\. 我们的球体应用了新的材质
- en: Don’t forget to save your scene before continuing.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 继续操作前别忘了保存场景。
- en: The Camera
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摄像机
- en: Even though the camera is not used in the training (we’ll get to that later,
    in [Chapter 10](ch10.html#chapter-vision)), as humans we will need to be able
    to see the environment when we are driving the ball around, so we need to position
    the camera somewhere we’re comfortable with.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管摄像机在训练中没有使用（我们稍后将在 [第 10 章](ch10.html#chapter-vision) 中讨论），作为人类，在驾驶球体时我们需要能够看到环境，因此我们需要将摄像机放置在我们感到舒适的位置。
- en: 'There are no real rules here, and whatever camera angle and position you feel
    works best for you is where you should settle. However, if you want the entire
    ground in view at all times, you can use the following settings in the Unity Editor:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有真正的规则，任何你认为最适合你的摄像机角度和位置都可以。但是，如果你希望在任何时候都能看到整个地面，请在 Unity 编辑器中使用以下设置：
- en: Select the Main Camera in the Hierarchy.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次视图中选择主摄像机。
- en: In the Inspector, change the position of the camera to `0, 5, 0`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视面板中，将摄像机的位置更改为 `0, 5, 0`。
- en: In the Inspector, set the rotation to `90, 0, 0`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视面板中，将旋转设置为 `90, 0, 0`。
- en: In the Inspector, find the Camera component section.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视面板中找到摄像机组件部分。
- en: Set the Field of View to `90`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视野设置为 `90`。
- en: Now you should be able to have a top-down view of the entire ground and anything
    on it, as shown in [Figure 6-7](#fig:ch_ilintro_camera).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够从上方俯视整个地面和其上的任何物体，就像 [图 6-7](#fig:ch_ilintro_camera) 中展示的那样。
- en: '![psml 0607](assets/psml_0607.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0607](assets/psml_0607.png)'
- en: Figure 6-7\. The top-down all-seeing camera
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-7\. 俯视全视角摄像机
- en: Again, don’t forget to save the scene.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，不要忘记保存场景。
- en: Building the Simulation
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建模拟
- en: With the majority of our environment set up and configured, we can now turn
    to the simulation and training side of things.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 随着大部分环境的设置和配置完成，我们现在可以转向模拟和训练方面。
- en: We will be doing multiple things here, most of which relate to our ball (soon
    to be an agent).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里进行多项操作，其中大部分与我们的球体相关（即将成为一个代理）。
- en: 'The steps we’ll take here should be starting to become familiar, but in case
    you’re feeling rusty, we will be:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要采取的步骤应该开始变得熟悉了，但是如果你感觉有些生疏，我们将会：
- en: Configuring the ball to be an agent
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置球体成为一个代理
- en: Writing heuristic control code, allowing us to drive the ball
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写启发式控制代码，使我们能够驱动球。
- en: Writing code to generate observations
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码以生成观察结果。
- en: Writing code to reset the environment on success or failure
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码以在成功或失败时重置环境。
- en: Because we’re using IL instead of RL, we won’t be using rewards in this scenario.
    This means you won’t see us provide any rewards, positive or negative.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用的是IL而不是RL，所以在这种情况下我们不会使用奖励。这意味着你将看不到我们提供任何奖励，无论是正面的还是负面的。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We could include rewards if we wanted, but it wouldn’t have any impact on this
    particular scenario, so we won’t bother. In the next chapter, when we look at
    GAIL approaches to IL, we will investigate combining rewards and imitation further.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意，我们可以包括奖励，但这对这个特定的场景没有任何影响，所以我们不打算这么做。在下一章中，当我们研究用于模仿学习的GAIL方法时，我们将进一步探讨如何结合奖励和模仿。
- en: Agent Components
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理组件。
- en: 'Our ball is going to need to be an agent, but currently it’s just a ball with
    an inferiority complex, so let’s fix that. In your scene, in the Unity Editor,
    do the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的球将需要成为一个代理，但目前它只是一个带有自卑情结的球，所以让我们来修复它。在你的场景中，在Unity编辑器中执行以下操作：
- en: Select the ball in the Hierarchy.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中选择球。
- en: In the Inspector, click on the Add Component button.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视器中，单击“添加组件”按钮。
- en: Add a Decision Requestor component.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个决策请求器组件。
- en: Change the Decision Period to `10`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将决策周期更改为`10`。
- en: 'This will add a bunch of other components. Some are necessary, but others aren’t
    needed, so we’ll make some tweaks:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加许多其他组件。有些是必需的，但其他一些则不需要，所以我们将做一些调整：
- en: In the Inspector, inside the Behavior Parameters component, change the Behavior
    Name to “RollingBall.”
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在行为参数组件内部检视器中，将行为名称更改为“RollingBall”。
- en: Change the Vector Observations Space Size to `8` instead of `1`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将向量观察空间大小更改为`8`，而不是`1`。
- en: Change the Continuous Actions to `2`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将连续动作更改为`2`。
- en: 'These means we have set our agent up to have eight observations and two control
    actions, but none of this allows for heuristic control. Let’s add that now. These
    will be new steps, compared to what we’ve done in the past:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些意味着我们已经设置了我们的代理以具有八个观察结果和两个控制动作，但这并不允许启发式控制。现在让我们添加它。这些将是与过去所做的不同的新步骤：
- en: In the ball agent’s Inspector, click on the Add Component button.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在球代理的检视器中，单击“添加组件”按钮。
- en: Add a Demonstration Recorder component.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加演示记录器组件。
- en: Set the Demonstration Name to “RollerDemo.”
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将演示名称设置为“RollerDemo”。
- en: Set the Demonstration Director to Assets/Demos.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将演示指导者设置为Assets/Demos。
- en: The Demonstration Recorder is a component that allows the ML-Agents system to
    watch what we do when we drive the ball around, and record it to a file at the
    directory we set earlier. That file will then be used in training.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 演示记录器是一个组件，允许ML-Agents系统观察我们驱动球的行为，并将其记录到我们之前设置的目录中的文件中。该文件将用于训练。
- en: 'Finally, we need to set up an agent script. Because the Decision Requestor
    component requires an agent script, it added a default version for us, but we
    want a custom one:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要设置一个代理脚本。因为决策请求组件需要一个代理脚本，所以它为我们添加了一个默认版本，但我们希望自定义一个：
- en: In the Inspector, click the Add Component button.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视器中，单击“添加组件”按钮。
- en: Add a new script called “Roller” to the ball.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在球上添加一个名为“Roller”的新脚本。
- en: Open *Roller.cs* in your code editor.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开*Roller.cs*。
- en: 'Now we’ll configure the ball to be an agent. We will be doing some basic setup
    here and then adding more in later sections:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将配置球以成为一个代理。我们将在这里进行一些基本设置，然后在后续部分添加更多内容：
- en: 'Add the following imports to the top of the *Roller.cs* file:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*Roller.cs*文件的顶部添加以下导入：
- en: '[PRE1]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These give us the basic ML components we will be using as well as access to
    the UnityEngine library, which we will need for generating some random numbers.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些为我们提供了我们将使用的基本ML组件，以及访问UnityEngine库的能力，我们将需要它来生成一些随机数。
- en: 'Modify the class definition of `Roller`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Roller`的类定义：
- en: '[PRE2]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following instance variables to `Roller`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Roller`添加以下实例变量：
- en: '[PRE3]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Replace the `Start` method with the following:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下内容替换`Start`方法：
- en: '[PRE4]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We did a few things here: first we made `Roller` a subclass of `Agent`, which
    means we can get a default agent that Unity added for us. Then we set up four
    different properties we will need.'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里做了几件事情：首先，我们将`Roller`作为`Agent`的子类，这意味着我们可以得到Unity为我们添加的默认代理。然后我们设置了我们将需要的四个不同属性。
- en: The `speed` and `goal` are public and are intended to be set in the Inspector,
    and we will do this in a moment. These control how fast the ball moves and what
    `GameObject` it should be aiming for as its goal.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`speed`和`goal`是公共的，意在在检查器中设置，我们马上就会这样做。它们控制着球的移动速度以及它应该以什么`GameObject`作为目标。'
- en: The `body` keeps track of the physics Rigidbody component so that we can add
    and remove forces to it as necessary.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`body`跟踪物理Rigidbody组件，以便我们可以根据需要添加和移除力。'
- en: And the `victory` will be used to determine if we have hit the goal or not.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且`victory`将用于确定是否已达到目标。
- en: In the Inspector, drag the goal coin from the scene into the goal slot in the
    Roller component.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，将场景中的目标硬币拖到Roller组件的目标槽中。
- en: In the Inspector, delete the default Agent component that Unity added.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，删除Unity添加的默认代理组件。
- en: With that all done, you should now have ML-Agents components on your ball agent
    that look similar to [Figure 6-8](#fig:ch_ilintro_ball_components).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以上步骤后，您现在应该在您的球代理上有类似于[图 6-8](#fig:ch_ilintro_ball_components)的ML-Agents组件。
- en: '![psml 0608](assets/psml_0608.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0608](assets/psml_0608.png)'
- en: Figure 6-8\. Our ball with its Agent components configured correctly
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-8\. 我们的球，其代理组件正确配置完成。
- en: Note
  id: totrans-161
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on your particular version of ML-Agents it may not have installed
    the same components automatically. If that is the case, you will want a Decision
    Requestor, a Behavior Parameters, and a Demonstration Recorder component. You
    will also need our custom agent script Roller.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的ML-Agents版本，可能不会自动安装相同的组件。如果是这种情况，您将需要一个决策请求器、一个行为参数以及一个演示记录器组件。您还需要我们的自定义代理脚本Roller。
- en: Don’t forget to save everything.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了保存一切。
- en: Adding Heuristic Controls
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加启发式控制。
- en: 'As we will be driving the ball around to generate training behavior, we need
    some way to move the ball directly, which (as usual) we can do using heuristic
    controls:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将驱动球以生成训练行为，我们需要一种直接移动球的方式，通常我们可以使用启发式控制来做到这一点：
- en: Open *Roller.cs*.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*Roller.cs*。
- en: 'Add the following method to the class:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中添加以下方法：
- en: '[PRE5]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This method gets called by ML-Agents when it is time for the agent to take an
    action, except now we are intercepting that and providing our own actions.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ML-Agents需要代理执行操作时，此方法将被调用，但现在我们拦截了这一过程，并提供了我们自己的操作。
- en: We are using the default Unity input system to get `0` - `1` normalized horizontal
    and vertical values to give our ball. By default these map to the standard WASD
    or arrow-key control scheme in games, which is perfect for us.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们正在使用默认的Unity输入系统获取`0` - `1`归一化的水平和垂直值，以控制我们的球。默认情况下，这些值映射到游戏中的标准WASD或箭头键控制方案，非常适合我们。
- en: Now we need to be able to configure the agent and its goal for each episode.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们需要能够为每个集进行配置代理及其目标。
- en: 'Add the following method to the class:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中添加以下方法：
- en: '[PRE6]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This accomplishes a few things. First, we set the victory flag back to false,
    not that it has changed yet. Then we remove all forces from our ball and set it
    back to the center of the ground.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这做了几件事情。首先，我们将胜利标志重置为false，尽管它尚未改变。然后，我们从球体中移除所有力，并将其重置到地面的中心。
- en: Finally, we generate a random position on a circle of radius 3 (which maps well
    to the size of our ground) and set the goal to that position. The only thing that
    remains before we can drive the ball around ourselves is to add the action code.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，在半径为3的圆上生成一个随机位置（这与我们的地面的大小很匹配），并将目标设置为该位置。在我们自己驱动球之前，唯一剩下的就是添加操作代码。
- en: 'Add the following method to the class:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中添加以下方法：
- en: '[PRE7]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we are getting the horizontal and vertical components of the action values
    and using them to add a small force to the physics body of our ball. This essentially
    pushes it in the direction of the action values, using Unity’s physics system.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们获取动作值的水平和垂直分量，并使用它们向我们球的物理体添加一个小力量。这实质上是将球推向动作值的方向，使用了Unity的物理系统。
- en: Tip
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示。
- en: You can learn more about `AddForce()` in the [Unity documentation](https://oreil.ly/mbUOy).
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在[Unity文档](https://oreil.ly/mbUOy)中了解更多关于`AddForce()`的信息。
- en: Then we do a quick check to see if we’ve won (which we can’t yet) or if we’ve
    fallen off the edge. If so, we end the episode and reset everything back to how
    it was before.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后我们快速检查一下是否已经获胜（目前还不能），或者是否已经掉到了边缘。如果是这样，我们就结束本集并将一切重置回之前的状态。
- en: With that done, we save our work and return to the Unity Editor so that we can
    test our code.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成这些操作后，保存工作并返回Unity编辑器，以便我们可以测试我们的代码。
- en: In the Inspector, in the Behavior Parameters script, change the Behavior Type
    setting to be Heuristic.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视器中，在行为参数脚本中，将行为类型设置更改为启发式。
- en: Play the scene.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。
- en: You can now drive the ball around using your keyboard. If you fall off the edge
    of the world, the environment should be reset. Huzzah!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用键盘驾驶球。如果您从世界的边缘掉落，环境应该会重置。万岁！
- en: Warning
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: You might notice that Unity is warning you about the number of observations
    not matching the values set, and we’ll fix that next. It’s happening because we’re
    not yet providing all the observations we intend to, and we told Unity to expect
    eight when we configured the Vector Observations Space Size in the Behavior Parameters
    component on the agent in the Unity Editor.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到 Unity 警告您关于观察数与设置值不匹配的问题，我们将在下一步修复。这是因为我们尚未提供我们打算提供的所有观察，而我们在配置 Unity
    编辑器中代理的行为参数组件的向量观察空间大小时告诉 Unity 预期有八个观察。
- en: As always, remember to save the scene.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，请记得保存场景。
- en: Observations and Goals
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察和目标
- en: Although we can drive our ball around perfectly well, it has no understanding
    of its world, so it would have no capacity to learn.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以完美地驾驭我们的球，但它对自己的世界一无所知，所以它没有学习的能力。
- en: To give the ball agent an understanding of the world, it needs observations.
    As with every simulated agent we’ve built so far, the observations are what the
    agent knows about the world it’s in.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使球体代理理解世界，它需要观察。与我们迄今为止构建的每个模拟代理一样，观察是代理了解所处世界的内容。
- en: 'While we are doing that, we should also handle what happens when we hit the
    coin and how we hit the coin:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做的同时，我们还应处理当我们击中硬币时发生的事情以及我们如何击中硬币：
- en: Open *Roller.cs*.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 *Roller.cs*。
- en: 'Add the following method:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法：
- en: '[PRE8]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This method is called by ML-Agents when it needs to collect observations for
    the agent. Our observations are fairly simple for this scenario: we are passing
    over the position of the goal and ourselves (`x` and `z` positions). We’re also
    passing over the horizontal and vertical velocities of the ball.'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 ML-Agents 需要为代理收集观察时，将调用此方法。对于这种情况，我们的观察相当简单：我们传递目标位置和自身位置 (`x` 和 `z` 坐标)。我们还传递球的水平和垂直速度。
- en: That concludes the observations, and it’s now time to add in the collisions.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就结束了观察，现在是时候加入碰撞了。
- en: 'Add the following method to *Roller.cs*:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *Roller.cs* 中添加以下方法：
- en: '[PRE9]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`OnTriggerEnter` is a built-in Unity function that gets called when an object
    enters the trigger volume (such as that of our coin).'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`OnTriggerEnter` 是 Unity 中的内置函数，当物体进入触发器体积（例如我们的硬币的触发器）时调用。'
- en: Here we are just checking if what we collided with is tagged as a “goal,” which
    our coin is, and if it is, we tell it to set a flag that we have achieved our
    goal.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是检查我们碰撞的物体是否标记为“目标”，我们的硬币就是这样，并且如果是，我们告诉它设置一个已达成目标的标志。
- en: Save your script. Now, if we jump back into Unity and play the scene, we can
    drive the ball around, pick up the coins, and reset the episode.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的脚本。现在，如果我们返回 Unity 并播放场景，我们可以驾驶球，拾取硬币，并重置这一事件。
- en: We are ready to start generating some training data and perform some learning.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好开始生成一些训练数据并进行一些学习。
- en: Warning
  id: totrans-204
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: While we are using the Unity physics system to let us know when collisions happen,
    this can lead to some weird results in more complex scenarios. The timing of events
    that lets the agent associate actions, observations, and rewards means you can’t
    always rely on `OnTriggerEnter` firing off when you need it to for training. In
    this case, our example is simple, and this lets us delve a bit more into the Unity
    physics system, so we think it’s worth it. For the most part, however, doing distance
    checking is advised.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Unity 物理系统让我们知道何时发生碰撞时，这可能会在更复杂的场景中导致一些奇怪的结果。事件的定时让代理能够关联行动、观察和奖励，这意味着您不能总是依靠
    `OnTriggerEnter` 在需要时触发训练。在本例中，我们的示例很简单，这使我们能够更深入地了解 Unity 物理系统，因此我们认为这是值得的。然而，对于大多数情况，建议进行距离检查。
- en: Generating Data and Training
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成数据和训练
- en: With our scene set up correctly, we can generate some training data. It’s time
    to show a robot how to drive a ball into coins.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 配置正确的场景后，我们可以生成一些训练数据。现在是向机器人展示如何将球开到硬币的时候了。
- en: Creating Training Data
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建训练数据
- en: 'Helpfully, Unity has made it trivial to record our actions: all we need to
    do is set a flag. The hard bit will be being good at driving the ball around.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 令人欣慰的是，Unity 已经让我们轻而易举地记录我们的动作：我们只需要设置一个标志。困难的部分将是善于驾驶球。
- en: Note
  id: totrans-210
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It is important here that you try your best at the game. The agent will be learning
    directly from you, so if you are bad, the agent will be bad. The *ML-Apple* won’t
    fall far from the *You-Tree*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里很重要的是你尽力玩好游戏。代理将直接从你学习，所以如果你表现不好，代理也会表现不好。*ML-Apple*离*You-Tree*不远。
- en: Select the ball in the Hierarchy.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次视图中选择球。
- en: In the Inspector, find the Demonstration Recorder component.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视器中找到演示记录器组件。
- en: Set the Record toggle to be on. We are ready to record.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将记录开关设为打开状态。我们准备开始录制。
- en: Play the scene.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。
- en: Drive the ball around with your keyboard, and make sure you pick up the coin
    a few times.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用键盘驱动小球，并确保多次捡起硬币。
- en: Stop the scene when you are happy with it. We recommend trying to pick up the
    coin about 20 times.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你对场景满意时停止它。我们建议尝试大约20次捡起硬币。
- en: You should see that once that is done, there is a new folder called *Demos*
    in the *Assets* directory. Inside that folder, you should see a file called *RollerDemo*.
    If you select it in the Inspector in the Unity Editor, it will tell you relevant
    information, like what sort of actions and observations were recorded, as shown
    in [Figure 6-9](#fig:rollerdemos).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，你应该在*Assets*目录下看到一个名为*Demos*的新文件夹。在该文件夹内，你应该能看到一个名为*RollerDemo*的文件。如果你在Unity编辑器的检视器中选择它，它将告诉你相关信息，比如记录了什么样的动作和观察结果，如[图6-9](#fig:rollerdemos)所示。
- en: '![psml 0609](assets/psml_0609.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![psml 0609](assets/psml_0609.png)'
- en: Figure 6-9\. Inspecting our demo recording
  id: totrans-220
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-9\. 检查我们的演示录制
- en: If you do multiple training runs, you will see multiple demo files all named
    numerically increasing values, like *RollerDemo_0*, *RollerDemo_1*, and so on.
    These will be our training data.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进行多次训练运行，你将看到多个演示文件，它们的命名方式是数字递增的，比如*RollerDemo_0*、*RollerDemo_1*等。这些将是我们的训练数据。
- en: Configuring for Training
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置训练
- en: With our training data written, we now need to make our YAML configuration file.
    Everyone loves YAML.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了我们的训练数据编写后，现在需要创建我们的YAML配置文件。每个人都喜欢YAML。
- en: 'Most of this file will be based on [Chapter 2](ch02.html#chapter-creating-first-simulation),
    so we won’t be going into too much detail here. We will be talking about the parts
    specific to the IL, though:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 本文件的大部分内容将基于[第2章](ch02.html#chapter-creating-first-simulation)，所以我们不会在这里详细讨论。不过，我们会讨论与IL特定部分相关的内容：
- en: Create a config folder at the project root.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录创建一个config文件夹。
- en: Inside that folder, create a new text file.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件夹内，创建一个新的文本文件。
- en: Name it *RollerBallIL.yaml*.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为*RollerBallIL.yaml*。
- en: 'Add the following YAML to that file:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下YAML添加到该文件中：
- en: '[PRE10]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Most of this is identical to the earlier YAML files we made, with the main difference
    being the `behavioral_cloning` section. Those are the specific parameters for
    behavioral cloning (or BC), the IL technique we are using.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分内容与我们之前创建的YAML文件相同，主要区别在于`behavioral_cloning`部分。这些是我们正在使用的行为克隆（或BC）技术的具体参数。
- en: Currently, they’re fairly generic because of the simplicity of our simulation.
    However, of particular interest is the `strength` setting, which controls the
    learning rate of the BC relative to normal PPO training. Essentially, `strength`
    is saying how strongly the BC influences and controls the training; setting this
    too high means it might overfit to you, but if you set it too low, it won’t learn
    enough.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 目前它们都非常通用，因为我们的模拟非常简单。然而，特别感兴趣的是`strength`设置，它控制BC相对于正常的PPO训练的学习率。实质上，`strength`表示BC对训练的影响和控制程度；如果设置得太高，可能会导致过拟合，但如果设置得太低，则学习不足。
- en: As with all configuration parameters, the best way to see their impact is to
    change them and see what it does to the training.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有配置参数一样，了解它们的影响最好的方法是改变它们并观察对训练的影响。
- en: Another interesting property is the `demo_path`. This points to the demonstration
    recording we made earlier. If you changed the name of your demo, or want to use
    a different demo than the first run, make sure to change the `demo_path` variable
    to match. You might need to give it an absolute path, depending on your system
    (e.g., */Volumes/Work/Sims/IL/RollerDemo.demo*).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的属性是`demo_path`。它指向我们之前制作的演示录制。如果你改变了你的演示名称，或者想要使用不同于第一次运行的演示，确保修改`demo_path`变量以匹配。根据你的系统，可能需要给它一个绝对路径（例如*/Volumes/Work/Sims/IL/RollerDemo.demo*）。
- en: Tip
  id: totrans-234
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is easy to type these parameters incorrectly in the YAML file. It might be
    easier to copy them directly from our code at [GitHub](https://oreil.ly/u43u2).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在YAML文件中很容易打错这些参数。直接从我们的代码中复制它们可能会更容易一些，我们的代码在[GitHub](https://oreil.ly/u43u2)上。
- en: Begin Training
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始训练
- en: 'It’s almost time to do the *machine* part of machine learning, *finally*. Almost.
    First, we have to do some setup in the Unity Editor:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 差不多可以进行机器学习的*机器*部分了，*终于*。但首先，我们必须在Unity编辑器中进行一些设置：
- en: Select the ball inside the Hierarchy.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Hierarchy中选择球体。
- en: In the Inspector, find the Behavior Parameter component.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视器中找到行为参数组件。
- en: Set the Behavior Type to Default.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行为类型设置为默认。
- en: In the Inspector, find the Demonstration Recorder component.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视器中找到演示录制器组件。
- en: Toggle off the Record setting. Now our agent is ready to be controlled by Python.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭记录设置。现在我们的代理已经可以由Python控制。
- en: Open the Terminal.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: Navigate to the Unity project root.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至Unity项目根目录。
- en: 'Run the following command:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After a brief moment, you should see something similar to [Figure 6-10](#fig:ch_ilintro_cmd),
    which means we can start things up in Unity.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过了一会儿，你应该看到类似于[图6-10](#fig:ch_ilintro_cmd)的东西，这意味着我们可以在Unity中开始工作了。
- en: '![psml 0610](assets/psml_0610.png)'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![psml 0610](assets/psml_0610.png)'
- en: Figure 6-10\. Python ML-Agents is ready to train
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-10。Python ML-Agents已经准备好进行训练。
- en: Go back to Unity.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unity。
- en: Play the scene.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。
- en: You should see the ball zipping off on its own, attempting to learn how you
    drive.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到球独自迅速移动，试图学习你的驾驶技能。
- en: Go get a very tall cup of coffee, or maybe read a book for a bit. It’s OK, we’ll
    wait.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去拿一杯很高的咖啡，或者可能读一会儿书。没关系，我们会等你的。
- en: Once this process ends, our training is finished and we can test it.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个过程结束，我们的训练就完成了，我们可以测试它了。
- en: Tip
  id: totrans-255
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you want a pretrained machine learning model, check out the one we made over
    on [GitHub](https://oreil.ly/nwupp).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个预训练的机器学习模型，请查看我们在[GitHub](https://oreil.ly/nwupp)上制作的模型。
- en: Running with Our Trained Model
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用我们训练好的模型运行。
- en: Time to take our IL-trained model out for a spin.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候让我们的IL训练模型尝试一下了。
- en: 'First, as usual, we need to locate the neural net ML-Agents created for us:
    by default it will be in the results folder in the project root. Inside there
    will be another folder named *Roller Ball*, and inside that there will be a file
    named *Rolling Ball.onnx*, which is our trained neural net.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，像往常一样，我们需要找到ML-Agents为我们创建的神经网络：默认情况下，它将位于项目根目录中的results文件夹中。在里面会有一个名为*Roller
    Ball*的文件夹，里面有一个名为*Rolling Ball.onnx*的文件，这是我们训练好的神经网络。
- en: 'Follow these steps to run the ball agent with the trained model:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用训练好的模型运行球体代理：
- en: Drag the *.onnx* file into Unity’s Assets pane.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*.onnx*文件拖放到Unity的资源面板中。
- en: Select the ball in the Hierarchy.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Hierarchy中选择球体。
- en: In the Inspector, locate the Behavior Parameters component.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检视器中找到行为参数组件。
- en: Add the *.onnx* file into the Model slot.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*.onnx*文件添加到模型槽中。
- en: Set the Behavior Type to Inference Only.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行为类型设置为仅推断。
- en: Play the scene in Unity.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中播放场景。
- en: Now you should see the ball rolling around collecting coins and, if you drive
    like we do, often falling off the edge. Hopefully you’re a better teacher to the
    ball than we are.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该看到球在四处滚动，收集硬币，并且如果你像我们一样开车，经常会从边缘掉下去。希望你比我们更擅长教球。
- en: Congratulations, you trained an agent using imitation learning!
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，使用模仿学习训练了一个代理！
- en: Understanding and Using Imitation Learning
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和使用模仿学习。
- en: Imitation learning is useful for making an agent behave like a human (somewhat);
    however, in practice, it’s more likely to be used as part of a multistage, multitechnique
    training process to help an agent along, particularly in *early training*.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 模仿学习对于使代理像人类一样行为是有用的（在某种程度上）；然而，在实践中，它更可能作为多阶段、多技术训练过程的一部分，帮助代理尤其是在*早期训练*中前进。
- en: Tip
  id: totrans-271
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: For further information on the multiple techniques possible, refer back to [“The
    Techniques”](ch01.html#ch1-techniques).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如需进一步了解多种可能的技术，请参考[“技术”](ch01.html#ch1-techniques)章节。
- en: 'When you’re considering a simulation, you’re trying to make something that’s
    going to be an efficient simulation: you want early training to be as successful
    as possible.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑进行模拟时，你试图创建一个高效的模拟：你希望早期的训练尽可能成功。
- en: In reinforcement learning, an agent has absolutely no idea what it’s doing,
    even slightly, until it gets its first reward. IL lets you shortcut the process
    and use a human to demonstrate a “good behavior” to start with, and then either
    continue with IL, or switch to RL to continue training, with the difficult early
    training out of the way, as quickly as possible.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在强化学习中，代理在获得第一个奖励之前完全不知道自己在做什么，甚至稍微的。IL允许你快速跳过这一过程，使用人类来展示一个“良好的行为”开始，然后继续使用IL或切换到RL进行训练，尽可能快速地完成困难的早期训练。
- en: After the early training, you can continue with IL to generate an agent with
    more organic, “humanlike” behavior (whatever that means in the context of your
    simulations), or swap to another technique, such as the aforementioned RL, to
    rapidly generate new experiences and improve upon the demonstrated human behaviors.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期训练之后，您可以继续使用IL生成具有更有机、“类人”的行为的代理（在您模拟的背景下，这意味着什么），或者转向另一种技术，如前述的RL，以快速生成新的经验并改进演示的人类行为。
- en: For example, the car that we created in [Chapter 5](ch05.html#chapter-self-driving-car),
    which was trained solely using RL, could instead have an initial training phase
    using IL in which human demonstrations of driving the track are used to inform
    its driving behavior, and then a second training phase—largely identical to the
    one we actually used in [Chapter 5](ch05.html#chapter-self-driving-car)—using
    RL on top of this. This approach would likely yield both faster training time
    overall, and a slightly more human feel to the car’s approach to driving the course.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们在[第五章](ch05.html#chapter-self-driving-car)中创建的汽车，最初使用RL训练，可以改为首先使用IL进行初始训练阶段，其中使用人类驾驶赛道的演示来指导其驾驶行为，然后进行第二个训练阶段——几乎与我们在[第五章](ch05.html#chapter-self-driving-car)实际使用的相同——在此基础上使用RL。这种方法很可能会大大缩短总体训练时间，并使汽车在驾驶课程时显得稍微更具人性化。
